<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>modelling corruption | Alvaro Franco Martins</title>
    <link>https://alvarofrancomartins.com/tag/modelling-corruption/</link>
      <atom:link href="https://alvarofrancomartins.com/tag/modelling-corruption/index.xml" rel="self" type="application/rss+xml" />
    <description>modelling corruption</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>en-us</language><lastBuildDate>Tue, 03 May 2022 00:00:00 +0000</lastBuildDate>
    <image>
      <url>https://alvarofrancomartins.com/media/sharing.png</url>
      <title>modelling corruption</title>
      <link>https://alvarofrancomartins.com/tag/modelling-corruption/</link>
    </image>
    
    <item>
      <title>Computational model of political corruption networks</title>
      <link>https://alvarofrancomartins.com/post/corruption-networks-model/</link>
      <pubDate>Tue, 03 May 2022 00:00:00 +0000</pubDate>
      <guid>https://alvarofrancomartins.com/post/corruption-networks-model/</guid>
      <description>&lt;p&gt;In our &lt;a href=&#34;https://alvarofrancomartins.com/publication/universality-of-political-corruption-networks/&#34;&gt;latest paper&lt;/a&gt;, the findings of universal characteristics in political corruption networks allowed us to propose a model to simulate the growth of corruption networks. Among other results, our research revealed the prominent role of recidivist agents on corruption networks. For instance, we discover that recidivists act as bridges among minor corrupt groups and coordinate peripheral criminals to perform more extensive and often much more harmful corruption processes.&lt;/p&gt;
&lt;br&gt;
&lt;p&gt;Motivated by these insights, we have used the recidivism rate (&lt;em&gt;i.e&lt;/em&gt;, the fraction of corrupt agents recurring in the criminal activity), as the main parameter of the model. The simulations not only produce networks with features very similar to those observed in the empirical data, but also indicates that corruption networks operate around a critical recidivism rate. More specifically, corruption networks simulated below this critical recidivism rate are completely fragmented, while networks generated above this critical value become overly connected.&lt;/p&gt;
&lt;br&gt;
&lt;p&gt;In this post, I will&lt;/p&gt;
&lt;br&gt;
&lt;ul&gt;
&lt;li&gt;Describe the model  &lt;a href=&#34;#model&#34;&gt;
  &lt;i class=&#34;fas fa-fas fa-link  pr-1 fa-fw&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Display an interactive demonstration &lt;a href=&#34;#play&#34;&gt;
  &lt;i class=&#34;fas fa-fas fa-link  pr-1 fa-fw&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Present the algorithm of the model in Python &lt;a href=&#34;#algorithm&#34;&gt;
  &lt;i class=&#34;fas fa-fas fa-link  pr-1 fa-fw&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;h1 id=&#34;model&#34;&gt;The model&lt;/h1&gt;
&lt;br&gt;
&lt;p&gt;We have proposed the model based on two of our main findings about political corruption networks. In particular, we have found that the size distribution of scandals is roughly approximated by an exponential distribution with a characteristic number of people around seven people. This result shows that political corruption runs in small groups that rarely exceed more than ten people (only 20% and 17% of corruption cases in Spain and Brazil, respectively). The surprising similarity in the size distribution of scandals in both countries suggests a universal pattern related to political corruption processes.&lt;/p&gt;
&lt;br&gt;
&lt;p&gt;The second finding came from investigating the dynamics of repeat offenders. We have found that the number of recidivist agents is linearly associated with the number of people in the network over the entire network growth process. The recidivism rates (number of repeat offenders divided by the total number of offenders) are 9% for Spain and 14.2% for Brazil. Therefore, the number of recidivists ($r$) can be modeled by the following equation.&lt;/p&gt;
&lt;p&gt;$$r(n) = \alpha n + \beta,$$&lt;/p&gt;
&lt;p&gt;where $n$ is the total number of people and the parameters are&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$\alpha$: The recidivism rate (number of repeat offenders / total number of offenders). $\in [0, 1]$.&lt;/li&gt;
&lt;li&gt;$\beta$: The regression coefficient. It controls the minimal number of people necessary for the emergence of the first recidivist agents. $\in [-\infty, 0)$.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The model works as follows. It first starts with an empty network that grows by including complete graphs representing political scandals at each iteration. The size of these complete graphs ($s$) is randomly drawn from an exponential distribution ($P$) to mimic the empirical behavior given by $P(s)\sim e^{-s/s_c}$, where $s_c$ represents the characteristic size of corruption scandals (empirically, $s_c\approx 7$ people). We consider that part of the agents added to the network at each iteration are recidivists. We assume the number of recidivists to increase linearly according with the equation of $r(n)$. We keep track of the number of recidivists during the network growth process, and when new recidivists emerge, we randomly select nodes already present in the network to become recidivists and make them belong to the next scandal (complete graph) added to the network.&lt;/p&gt;
&lt;br&gt;
&lt;p&gt;In addition, when selecting nodes for representing recidivist agents, we can select nodes that were already recidivists with a small probability $p$ or nodes that will become recidivists for the first time with probability $1-p$. This last procedure allows us to control the number of agents involved in more than two corruption scandals and reproduce the empirical behavior (about 2.5% of all agents of both Spanish and Brazilian networks fit this condition).&lt;/p&gt;
&lt;br&gt;
&lt;h1 id=&#34;play&#34;&gt;Interact with the model simulations&lt;/h1&gt;
&lt;br&gt;
&lt;p&gt;The application below allows you to interact with the network&amp;rsquo;s simulations and see how they evolve as you add new scandals. To play with it, first click in the &lt;strong&gt;Start new network&lt;/strong&gt; button and then add as many scandals as you want using the &lt;strong&gt;Add new scandal&lt;/strong&gt; button. Please note that, initially, only complete graphs will appear. After a while, however, the recidivists will show up and they will connect different parts of the network.&lt;/p&gt;
&lt;br&gt;

&lt;!DOCTYPE html&gt;
&lt;html lang=&#34;en&#34;&gt;

  &lt;head&gt;
    &lt;title&gt;Network Corruption Model&lt;/title&gt;

    &lt;style&gt;
      #mynetwork {
        display: inline-block;
        height: 620px;
        width: 100%;
        border: 1px solid #444444;
        background-color: #222222;
      }

      .input-group {
        width: 100%;
        padding:  0px;

      }

      .my_input {
        border: solid 1px #ccc;

        padding-left: 20px;

        border-radius: 5px;
        margin-bottom: 5px;
        }

      .btn-primary{
        font-size: 20px;
        margin-left: 10px;
        margin-bottom: 5px;
      }

      .btn-outline-primary{
        font-size: 20px;
        margin-left: 10px;
        margin-bottom: 5px;
      }

      .row {
        margin-left:2px;
      }

    &lt;/style&gt;

    &lt;script type=&#34;text/javascript&#34; src=&#34;https://unpkg.com/vis-network/standalone/umd/vis-network.min.js&#34;&gt;&lt;/script&gt;
    &lt;script src=&#34;https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js&#34;&gt;&lt;/script&gt;
  &lt;/head&gt;

  &lt;body&gt;
    &lt;div class=&#34;input-group&#34;&gt;
      &lt;label style=&#34;font-size:28px;padding-top:5px;&#34;&gt;$\alpha$ &amp;nbsp&lt;/label&gt;&lt;input class = &#34;my_input&#34; type=&#34;number&#34; name=&#34;recidivism_rate&#34; min=0 max=1 step=0.001 value=0.142 id=&#34;recidivism_rate&#34; oninput= &#34;(!validity.rangeOverflow||(value=1)) &amp;&amp; (!validity.rangeUnderflow||(value=0)) &amp;&amp;
(!validity.stepMismatch||(value=parseInt(this.value)));&#34;/&gt;

      &lt;label style=&#34;font-size:28px;padding-top:5px;&#34;&gt;&amp;nbsp&amp;nbsp $\beta$ &amp;nbsp&lt;/label&gt;&lt;input class = &#34;my_input&#34; type=&#34;number&#34; name=&#34;beta_parameter&#34; min=-100 max=-1 step=-1 value=-11 id=&#34;beta_parameter&#34; oninput= &#34;(!validity.rangeOverflow||(value=-1)) &amp;&amp; 
(!validity.stepMismatch||(value=parseInt(this.value)));&#34; /&gt;

      &lt;div class=&#34;row&#34;&gt;
        &lt;button id=&#34;startNewNetwork&#34; class=&#34;btn btn-primary&#34; onclick=&#34;startNewNetwork();addCompleteGraph();enableAddGraph();&#34;&gt;Start new network&lt;/button&gt;
        &lt;button id=&#34;add_new_scandal&#34; class=&#34;btn btn-outline-primary&#34; onclick=&#34;addCompleteGraph();&#34; disabled&gt;Add new scandal&lt;/button&gt;
      &lt;/div&gt;

    &lt;/div&gt;

    &lt;div id=&#34;mynetwork&#34;&gt;&lt;/div&gt;

    &lt;script type=&#34;text/javascript&#34;&gt;
      var container = document.getElementById(&#34;mynetwork&#34;);

      proba = 0.024;
      lambda = 7.33;

      const options = {
        &#34;autoResize&#34;: true,
        &#34;height&#34;: &#39;100%&#39;,
        &#34;width&#34;: &#39;100%&#39;,
        &#34;physics&#34;: {
          &#34;enabled&#34;: true,
          &#34;forceAtlas2Based&#34;: {
            &#34;theta&#34;: 0.9,
            &#34;gravitationalConstant&#34;: -100,
            &#34;centralGravity&#34;: 0.01,
            &#34;springConstant&#34;: 0.08,
            &#34;springLength&#34;: 100,
            &#34;damping&#34;: 0.7,
            &#34;avoidOverlap&#34;: 0
          },
          &#34;maxVelocity&#34;: 50,
          &#34;minVelocity&#34;: 0.1,
          &#34;solver&#34;: &#39;forceAtlas2Based&#39;,
          &#34;stabilization&#34;: {
            &#34;enabled&#34;: false
          },
          &#34;timestep&#34;: 0.2,
          &#34;adaptiveTimestep&#34;: true,
        },
        &#34;edges&#34;: {
          &#34;smooth&#34;: false
        },
        &#34;nodes&#34;: {
          &#34;shape&#34;: &#34;dot&#34;,
          &#34;size&#34;: 10,
        },
        &#34;interaction&#34;: {
          &#34;dragNodes&#34;: false,
          &#34;dragView&#34;: true
        }
      }

      function startNewNetwork() {
        a = parseFloat(document.getElementById(&#34;recidivism_rate&#34;).value);
        b = parseFloat(document.getElementById(&#34;beta_parameter&#34;).value);

        last_agent_index = 0;
        total_repeated_agents = 0;

        repeated_agent_names = [];
        agent_names = [];

        nodes = new vis.DataSet();
        edges = new vis.DataSet();

        data = {
          nodes: nodes,
          edges: edges,
        };

        return network = new vis.Network(container, data, options);
      }

      function expoSampling(scale) {
        return Math.round(-scale * Math.log(1.0 - Math.random()));
      }

      function addCompleteGraph() {
        // calculate the size of the complete graph to enter the network
        var n_new_agents = expoSampling(lambda);

        while (n_new_agents &lt;= 1) {
          var n_new_agents = expoSampling(lambda);
        }

        // get index from new nodes
        var new_agent_names = [];
        for (let n = last_agent_index; n &lt; last_agent_index + n_new_agents; n++) {
          new_agent_names.push(n);
        }
        last_agent_index += n_new_agents;

        size_network = agent_names.length;

        // apply model
        var new_repeated_agents = Math.round(a * (size_network) + b - total_repeated_agents);

        if (new_repeated_agents &gt; 0) {

          var minimo = Math.min(new_repeated_agents, new_agent_names.length);

          for (let i = 0; i &lt; minimo; i++) {

            if ((Math.random() &lt;= proba) &amp;&amp; (repeated_agent_names.length &gt; 0)) {

              id_old = repeated_agent_names[Math.floor(Math.random() * repeated_agent_names.length)];

            } else {

              let difference = agent_names.filter(x =&gt; !repeated_agent_names.includes(x));

              id_old = difference[Math.floor(Math.random() * difference.length)];

              total_repeated_agents += 1;
            }

            new_agent_names[i] = id_old;
            repeated_agent_names.push(id_old);
          }
        }

        for (let i = 0; i &lt; new_agent_names.length; i++) {
          if (!agent_names.includes(new_agent_names[i])) {
            agent_names.push(new_agent_names[i])
          }
        }

        // add complete graph to the network
        for (let n = 0; n &lt; new_agent_names.length; n++) {
          nodes.update({
            id: new_agent_names[n]
          })
        }

        for (let i = 0; i &lt; new_agent_names.length; i++) {
          for (let j = i + 1; j &lt; new_agent_names.length; j++) {
            let i_ = new_agent_names[i];
            let j_ = new_agent_names[j];

            if (i_ != j_) {
              edges.update({
                from: i_,
                to: j_
              });
            }
          }
        }
        network.fit({
                    &#34;minZoomLevel&#34;: 0.1,
                    &#34;maxZoomLevel&#34;: 0.35,
                    });
      }

      // button dynamics
      const numSeconds = 1
      document.querySelector(&#39;#add_new_scandal&#39;).addEventListener(&#39;click&#39;, (e) =&gt; {
        e.target.disabled = true
        setTimeout(() =&gt; {
          e.target.disabled = false
        }, numSeconds * 500)
      })

      function enableAddGraph() {
        document.getElementById(&#34;add_new_scandal&#34;).disabled = false;
      }

    &lt;/script&gt;

  &lt;/body&gt;

&lt;/html&gt;
&lt;p&gt;This interactive visualization was made using &lt;a href=&#34;https://visjs.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;visjs&lt;/a&gt;, a browser based visualization library. The figures below show a visual comparison between simulated and empirical networks. Figure 1 is a simulation of the Brazilian corruption network using its recidivism rate, and Figure 2 shows the empirical network.&lt;/p&gt;
&lt;div class=&#34;parent&#34; style = &#34;display:flex&#34;&gt;
&lt;figure&gt;
&lt;img style = &#34;width: 100%;display: inline-block;padding-left: 5px;&#34; class=&#34;half-page-image&#34; src=&#34;figs/model.png&#34;&gt;
&lt;figcaption&gt;Figure 1: A network simulation with $\alpha = 0.142$.&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure&gt;
&lt;img style = &#34;width: 100%;display: inline-block; padding-left: 5px;&#34; class=&#34;half-page-image&#34; src=&#34;figs/brazil.png&#34;&gt;
&lt;figcaption &gt;Figure 2: The Brazilian corruption network. &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/div&gt;
&lt;p&gt;For more comparisons (both visual and quantitative) between the model and the empirical networks, see the &lt;a href=&#34;https://www.nature.com/articles/s41598-022-10909-2&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;paper&lt;/a&gt; or take a look at my other &lt;a href=&#34;https://alvarofrancomartins.com/post/corruption-networks&#34;&gt;post&lt;/a&gt; where I have summarized our results.&lt;/p&gt;
&lt;br&gt;
&lt;h1 id=&#34;algorithm&#34;&gt;The algorithm&lt;/h1&gt;
&lt;br&gt;
&lt;p&gt;In order to run the model, we first need to import the following packages:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;numpy&lt;/span&gt;          &lt;span class=&#34;k&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;np&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;graph_tool.all&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;gt&lt;/span&gt;

&lt;span class=&#34;kn&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;itertools&lt;/span&gt; &lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;combinations&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The function which generate the network links according to our model is written as follows.&lt;/p&gt;
&lt;br&gt;
&lt;details class=&#34;spoiler &#34;  id=&#34;spoiler-4&#34;&gt;
  &lt;summary&gt;Click to view the code&lt;/summary&gt;
  &lt;p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;generate_net_links&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tmax&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;100&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;lambda_&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;7.33&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.09&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;11.5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;proba&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.024&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;#34;&amp;#34;
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;    Generate a corruption network based on our model.
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;    
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;    Parameters
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;    ---------
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;    tmax : int
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;           Number of iteration steps (default: 100).
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;    lambda_ : float
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;           Characteristic number of people per scandal (default: 7.33).
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;    a, b : float
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;           Parameters defining the number of repeated agents (nr) as a function
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;           of total number of agents (n): nr = a*n + b (default: 0.09, -11.5).
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;    proba : float
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;            Probability of selecting a repeated agent that was already involved in
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;            another scandal (default: 0.024).
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;    Returns
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;    -------
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;    links_list : list
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;                 A list of edge lists where each element correspond to
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;                 a particular iteration step.
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;    &amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
    
    &lt;span class=&#34;n&#34;&gt;t&lt;/span&gt;                          &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;links&lt;/span&gt;                      &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;links_list&lt;/span&gt;                 &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;agent_names&lt;/span&gt;                &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;set&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;last_agent_index&lt;/span&gt;           &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;repeated_agent_names&lt;/span&gt;       &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;set&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;total_repeated_agents&lt;/span&gt;      &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
    
    &lt;span class=&#34;k&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tmax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;n_new_agents&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;np&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;round&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;np&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;random&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;exponential&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;lambda_&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;
            
        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;n_new_agents&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
        
            &lt;span class=&#34;n&#34;&gt;new_agent_names&lt;/span&gt;     &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;np&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;arange&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;last_agent_index&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;last_agent_index&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;n_new_agents&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)]&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;last_agent_index&lt;/span&gt;   &lt;span class=&#34;o&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;n_new_agents&lt;/span&gt;
            
            &lt;span class=&#34;n&#34;&gt;new_repeated_agents&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;np&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;round&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;agent_names&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;total_repeated_agents&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;
            
            &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;new_repeated_agents&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
                &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;range&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;min&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;new_repeated_agents&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;new_agent_names&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))):&lt;/span&gt;

                    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;np&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;random&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;uniform&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;proba&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;repeated_agent_names&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
                        &lt;span class=&#34;c1&#34;&gt;#select from repeated_agent_names&lt;/span&gt;
                        &lt;span class=&#34;n&#34;&gt;repeated_agent&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;np&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;random&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;choice&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;repeated_agent_names&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
                    &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
                        &lt;span class=&#34;c1&#34;&gt;#select from agent_names&lt;/span&gt;
                        &lt;span class=&#34;n&#34;&gt;repeated_agent&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;np&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;random&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;choice&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;repeated_agent_names&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;^&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;agent_names&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
                        &lt;span class=&#34;n&#34;&gt;total_repeated_agents&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;

                    &lt;span class=&#34;n&#34;&gt;new_agent_names&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;repeated_agent&lt;/span&gt;
                    &lt;span class=&#34;n&#34;&gt;repeated_agent_names&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;add&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;repeated_agent&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
                    
            &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;agent_&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;new_agent_names&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
                &lt;span class=&#34;n&#34;&gt;agent_names&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;add&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;agent_&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
            
            &lt;span class=&#34;n&#34;&gt;new_links&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;combinations&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;new_agent_names&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
            
            &lt;span class=&#34;n&#34;&gt;links_list&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;new_links&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;t&lt;/span&gt;          &lt;span class=&#34;o&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;

    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;links_list&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;
&lt;/details&gt;
&lt;p&gt;This function returns a list of edge lists, where each element correspond to a particular iteration step.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;&lt;span class=&#34;n&#34;&gt;edge_lists&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;generate_net_links&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tmax&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;100&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.142&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# e.g, [[(0, 1), (0, 3), ... (5, 6)], [(7, 8), (7, 9) ... (14, 15)], ... ]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;To create the network until step $t$ we need to concatenate these lists.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;network&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;edges_list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;g&lt;/span&gt;           &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;gt&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Graph&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;directed&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;False&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;edge_list_t&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;np&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;concatenate&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;edges_list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt;
    
    &lt;span class=&#34;n&#34;&gt;g&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;add_edge_list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;edge_list_t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;hashed&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;True&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

    &lt;span class=&#34;c1&#34;&gt;# Self loops and parallel edges are not allowed. &lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;gt&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;remove_self_loops&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;g&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;gt&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;remove_parallel_edges&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;g&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;g&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now we can generate the network until $t$ steps (100 in this case).&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;&lt;span class=&#34;n&#34;&gt;final_network&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;network&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;100&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;edge_lists&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;final_network&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;&amp;lt;Graph object, undirected, with 767 vertices and 4805 edges, at 0x7f2789007d60&amp;gt;&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;br&gt;
&lt;h1 id=&#34;closing-thoughts&#34;&gt;Closing thoughts&lt;/h1&gt;
&lt;br&gt;
&lt;p&gt;The most important aspect of this model is that it highlights the relevance of recidivists in criminal contexts. Recidivists are able to connect different parts of networks and function as brokers. In other words, they represent the backbone of criminal networks, sustaining organized crime across time and space. In this sense, the recidivism rate plays an important role in the evolution, structure and dynamics of corruption networks.&lt;/p&gt;
&lt;br&gt;
&lt;p&gt;From a practical perspective, our model may have important implications for law enforcement and intelligence activities. In a scenario where we are able to estimate the number of recidivists, we could therefore approximate relevant features regarding the evolution and structure of the underlying network. Moreover, our model can even be used as a benchmark for related corruption network investigations, such as link prediction or efficiency in network dismantling.&lt;/p&gt;
&lt;!-- &lt;ul class=&#34;cta-group&#34;&gt;
  
  &lt;li&gt;
    &lt;a href=&#34;https://alvarofrancomartins.com/&#34;  class=&#34;btn btn-primary px-3 py-3&#34;&gt;Do something&lt;/a&gt;
  &lt;/li&gt;
  
  
&lt;/ul&gt;
 --&gt;
&lt;!-- For now I think that&#39;s about it. Please, do not hesitate to contact me in case you want to talk about my work.  --&gt;
&lt;br&gt;
&lt;p&gt;Main references:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://alvarofrancomartins.com/publication/universality-of-political-corruption-networks&#34;&gt;&lt;em&gt;&lt;strong&gt;Alvaro F. Martins&lt;/strong&gt;, Bruno. R. da Cunha, Quentin S. Hanley, Sebastián Gonçalves, Matjaž Perc, and Haroldo V. Ribeiro. &lt;strong&gt;Universality of political corruption networks.&lt;/strong&gt; Scientific Reports 7, 100-200, DOI: 10.1038/s41598-022-10909-2 (2022).&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://alvarofrancomartins.com/publication/brazilian-corruption-network&#34;&gt;&lt;em&gt;Ribeiro, H. V., Alves, L. G. A., &lt;strong&gt;Alvaro F. Martins&lt;/strong&gt;, Lenzi, E. K. &amp;amp; Perc, M. &lt;strong&gt;The dynamical structure of political corruption networks.&lt;/strong&gt; J. Complex Networks 6, 989–1003, DOI: 10.1093/comnet/cny002s (2018).&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
  </channel>
</rss>
