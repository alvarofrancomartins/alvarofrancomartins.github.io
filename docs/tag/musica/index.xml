<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>M√∫sica | Alvaro Franco Martins</title>
    <link>https://alvarofrancomartins.com/tag/musica/</link>
      <atom:link href="https://alvarofrancomartins.com/tag/musica/index.xml" rel="self" type="application/rss+xml" />
    <description>M√∫sica</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>en-us</language><lastBuildDate>Sat, 31 May 2025 00:00:00 +0000</lastBuildDate>
    <image>
      <url>https://alvarofrancomartins.com/media/sharing.png</url>
      <title>M√∫sica</title>
      <link>https://alvarofrancomartins.com/tag/musica/</link>
    </image>
    
    <item>
      <title>Mapeie Sua Pr√≥xima Descoberta Musical</title>
      <link>https://alvarofrancomartins.com/post/sankey/</link>
      <pubDate>Sat, 31 May 2025 00:00:00 +0000</pubDate>
      <guid>https://alvarofrancomartins.com/post/sankey/</guid>
      <description>&lt;p&gt;Cansado das listas superficiais de artistas similares? Esta ferramenta vai fundo, revelando artistas de artistas de artistas&amp;hellip; at√© quatro n√≠veis de dist√¢ncia do seu ponto de partida.&lt;/p&gt;
&lt;br&gt;
&lt;p&gt;√â uma forma de visualizar uma vasta rede de conex√µes musicais de maneira condensada, perfeita para quem tem gostos ecl√©ticos e busca expandir seus horizontes sonoros. A partir de um artista que voc√™ j√° curte, descubra caminhos surpreendentes para novos talentos e quebre suas barreiras musicais.&lt;/p&gt;
&lt;br&gt;
&lt;p&gt;Cada nome no diagrama √© um convite para explorar mais: clique e acesse diretamente a p√°gina do artista no Last.fm, abrindo-a em uma nova aba. Descubra a linhagem musical e encontre sua pr√≥xima obsess√£o.&lt;/p&gt;
&lt;br&gt;

&lt;!DOCTYPE html&gt;
&lt;div id=&#34;artistas-app-container&#34; class=&#34;artistas-app-wrapper&#34;&gt;
    &lt;header class=&#34;artistas-app-header&#34;&gt;
        &lt;h2&gt;Artistas Similares&lt;/h2&gt;
        &lt;p&gt;Descubra conex√µes musicais em at√© 4 n√≠veis de similaridade.&lt;/p&gt;
    &lt;/header&gt;
    &lt;div class=&#34;artistas-app-search-container&#34;&gt;
        &lt;input type=&#34;text&#34; id=&#34;artist-input-app&#34; placeholder=&#34;Digite o nome de um artista&#34; value=&#34;Radiohead&#34;&gt;
        &lt;button id=&#34;search-button-app&#34;&gt;Buscar&lt;/button&gt;
        &lt;button id=&#34;generate-diagram-playlist-btn-app&#34; class=&#34;artistas-app-playlist-button&#34; disabled&gt;‚ú® Gerar Playlist&lt;/button&gt;
    &lt;/div&gt;
    &lt;div id=&#34;search-feedback-message-app&#34; class=&#34;artistas-app-feedback&#34;&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&#34;sankey-chart-container-app&#34; class=&#34;artistas-app-sankey-container&#34; style=&#34;display: none;&#34;&gt;
    &lt;div id=&#34;sankey-chart-app&#34;&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&#34;playlist-modal-overlay-app&#34; class=&#34;artistas-app-modal-overlay&#34;&gt;
    &lt;div class=&#34;artistas-app-modal-content&#34;&gt;
        &lt;button id=&#34;modal-close-btn-app&#34; class=&#34;artistas-app-modal-close-button&#34;&gt;&amp;times;&lt;/button&gt;
        &lt;h2 id=&#34;playlist-modal-title-app&#34;&gt;üé∂ Sankey Playlist&lt;/h2&gt;
        &lt;div id=&#34;playlist-modal-body-app&#34;&gt;&lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;

&lt;footer class=&#34;artistas-app-footer&#34;&gt;
    &lt;p&gt;Dados fornecidos pela &lt;a href=&#34;https://www.last.fm&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;Last.fm&lt;/a&gt;.&lt;/p&gt;
&lt;/footer&gt;

&lt;style&gt;
/* Para evitar conflitos, todas as classes t√™m o prefixo &#34;artistas-app-&#34; */
.artistas-app-wrapper {
    font-family: &#39;Inter&#39;, sans-serif; /* Certifique-se que a fonte Inter est√° carregada na sua p√°gina Hugo principal */
    line-height: 1.6;
    color: #374151;
    margin-bottom: 40px;
}
.artistas-app-header { text-align: center; margin-bottom: 20px; }
.artistas-app-header h2 { color: #c53030; margin-top: 0; margin-bottom: 5px; font-weight: 700; font-size: 1.8rem; }
.artistas-app-header p { margin-bottom: 0; font-size: 1rem; color: #6b7280; }

.artistas-app-search-container {
    display: flex;
    justify-content: center;
    align-items: stretch; /* Para alinhar altura dos bot√µes e input */
    margin-bottom: 15px;
    gap: 8px; /* Espa√ßo entre os elementos */
}
.artistas-app-search-container input[type=&#34;text&#34;] {
    padding: 10px 15px;
    width: clamp(220px, 50%, 300px); /* Ajustada largura do input */
    border: 1px solid #d1d5db;
    border-radius: 8px;
    font-size: 1rem;
    box-shadow: 0 1px 2px rgba(0,0,0,0.05);
}
.artistas-app-search-container input[type=&#34;text&#34;]:focus {
    outline: none;
    border-color: #c53030;
    box-shadow: 0 0 0 3px rgba(197, 48, 48, 0.15);
    z-index: 1;
}
.artistas-app-search-container button#search-button-app {
    padding: 10px 20px;
    background-color: #c53030;
    color: white;
    border: none;
    border-radius: 8px;
    cursor: pointer;
    font-size: 1rem;
    font-weight: 600;
    white-space: nowrap;
}
.artistas-app-search-container button#search-button-app:hover {
    background-color: #a02828;
}

button.artistas-app-playlist-button { /* Estilo para o bot√£o de playlist, agora no mesmo container */
    background-color: #2563eb;
    color: white;
    padding: 10px 18px;
    border: none;
    border-radius: 8px;
    font-size: 1rem;
    font-weight: 600;
    cursor: pointer;
    white-space: nowrap;
    transition: background-color 0.2s ease, opacity 0.2s ease;
    box-shadow: 0 1px 2px rgba(0,0,0,0.07);
}
button.artistas-app-playlist-button:hover {
    background-color: #1d4ed8;
}
button.artistas-app-playlist-button:disabled {
    background-color: #9ca3af;
    opacity: 0.7;
    cursor: not-allowed;
}

.sankey-chart-app {
    width: 100%;
    overflow: visible; /* Prevents unintended cropping */
}

.artistas-app-feedback { text-align: center; margin: 8px 0; min-height: 18px; font-size: 1rem; color: #4b5563; }
.artistas-app-feedback.error { color: #c53030; font-weight: 500; }
.artistas-app-sankey-container { width: 100%; max-width: 100%; margin-top: 5px; background-color: #ffffff; border-radius: 12px; box-shadow: 0 6px 12px rgba(0,0,0,0.08); padding: 5px; box-sizing: border-box; overflow-x: auto; }
.artistas-app-sankey-container svg { display: block; width: 100%; min-height: 800px; /* Aumentada altura m√≠nima para profundidade 4 */ }
.sankey-node-group { cursor: pointer; }
.sankey-node rect { fill-opacity: 1; shape-rendering: crispEdges; stroke: rgba(0,0,0,0.1); stroke-width: 0.5px; transition: all 0.2s ease; }
.sankey-node-group:hover .sankey-node { stroke-width: 1.5px; stroke: rgba(0,0,0,0.3); fill-opacity: 0.85; }
.sankey-link { fill: none; stroke-opacity: 0.55; transition: stroke-opacity 0.2s ease; }
/* .sankey-link-group:hover .sankey-link { stroke-opacity: 0.8; } */
.sankey-node-label { pointer-events: none; font-size: 20px; font-weight: 500; fill: #1f2937; transition: all 0.2s ease; }
.sankey-node-group:hover .sankey-node-label { font-size: 20px; font-weight: 700; fill: #000000; }
.artistas-app-modal-overlay { position: fixed; top: 0; left: 0; width: 100%; height: 100%; background-color: rgba(0, 0, 0, 0.6); display: flex; justify-content: center; align-items: center; z-index: 2000; opacity: 0; visibility: hidden; transition: opacity 0.3s ease, visibility 0.3s ease; }
.artistas-app-modal-overlay.active { opacity: 1; visibility: visible; }
.artistas-app-modal-content { background-color: white; padding: 20px 25px; border-radius: 12px; box-shadow: 0 5px 15px rgba(0,0,0,0.3); width: 90%; max-width: 650px; max-height: 80vh; overflow-y: auto; position: relative; }
.artistas-app-modal-content h2 { margin-top: 0; margin-bottom: 15px; font-size: 1.4rem; color: #c53030; }
.artistas-app-modal-content ul { list-style: decimal; padding-left: 20px; }
.artistas-app-modal-content li { margin-bottom: 8px; font-size: 0.9rem; }
.artistas-app-modal-content li a { color: #2563eb; text-decoration: none; font-weight: 500; }
.artistas-app-modal-content li a:hover { text-decoration: underline; }
.artistas-app-modal-close-button { position: absolute; top: 10px; right: 15px; background: none; border: none; font-size: 1.7rem; cursor: pointer; color: #9ca3af; padding: 0; line-height: 1; }
.artistas-app-modal-close-button:hover { color: #6b7280; }
.artistas-app-modal-loading-spinner { display: flex; flex-direction: column; justify-content: center; align-items: center; min-height: 120px; }
.artistas-app-modal-loading-spinner p { margin-bottom: 12px; font-size: 0.95rem; color: #4b5563; }
.spinner { border: 4px solid rgba(0, 0, 0, 0.1); width: 32px; height: 32px; border-radius: 50%; border-left-color: #c53030; animation: spin 1s ease infinite; }
@keyframes spin { 0% { transform: rotate(0deg); } 100% { transform: rotate(360deg); } }
.artistas-app-footer { text-align: center; padding: 10px 0; font-size: 0.8rem; color: #6b7280; margin-top: 15px; }
.artistas-app-footer a { color: #c53030; text-decoration: none; }
.artistas-app-footer a:hover { text-decoration: underline; }
&lt;/style&gt;

&lt;script src=&#34;https://d3js.org/d3.v7.min.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;https://unpkg.com/d3-sankey@0.12.3/dist/d3-sankey.min.js&#34;&gt;&lt;/script&gt;
&lt;script&gt;
(function() {
    // Get references to DOM elements
    const artistInputApp = document.getElementById(&#39;artist-input-app&#39;);
    // Early exit if the main input isn&#39;t found (e.g., if script is loaded on a page without the app)
    if (!artistInputApp) { return; }

    const searchButtonApp = document.getElementById(&#39;search-button-app&#39;);
    const generateDiagramPlaylistBtnApp = document.getElementById(&#39;generate-diagram-playlist-btn-app&#39;);
    const searchFeedbackMessageApp = document.getElementById(&#39;search-feedback-message-app&#39;);
    const sankeyChartContainerApp = document.getElementById(&#39;sankey-chart-container-app&#39;);
    const sankeyChartDivApp = document.getElementById(&#39;sankey-chart-app&#39;);

    // Playlist Modal Elements
    const playlistModalOverlayApp = document.getElementById(&#39;playlist-modal-overlay-app&#39;);
    const playlistModalTitleApp = document.getElementById(&#39;playlist-modal-title-app&#39;);
    const playlistModalBodyApp = document.getElementById(&#39;playlist-modal-body-app&#39;);
    const modalCloseBtnApp = document.getElementById(&#39;modal-close-btn-app&#39;);

    // Configuration constants
    const MAX_DEPTH_APP = 4; // Max levels of similarity to explore
    const SIMILAR_ARTISTS_LIMIT_PER_CALL_APP = 3; // How many similar artists to fetch per API call

    // State variables
    let currentGraphNodesApp = []; // Stores nodes currently displayed in the diagram
    let cachedPlaylistDataApp = null; // Caches generated playlist to avoid re-fetching
    let cachedDiagramSignatureApp = null; // Signature of the current diagram to validate cache

    // --- D3 Sankey Diagram Configuration ---
    // MODIFICATION 1: Reduce left and right margins to provide more horizontal space
    const marginApp = {top: 40, right: 40, bottom: 40, left: 40}; // Margins for the SVG
    const nodeWidthApp = 25; // Width of the Sankey nodes
    const nodePaddingVerticalApp = 50; // Vertical padding between nodes in the same column

    /**
     * Initializes the application by setting up event listeners.
     * It also triggers an initial search if an artist name is pre-filled.
     */
    function initializePageApp() {
        searchButtonApp.addEventListener(&#39;click&#39;, handleSearchApp);
        artistInputApp.addEventListener(&#39;keypress&#39;, (event) =&gt; { if (event.key === &#39;Enter&#39;) handleSearchApp(); });
        generateDiagramPlaylistBtnApp.addEventListener(&#39;click&#39;, handleGenerateDiagramPlaylistApp);
        modalCloseBtnApp.addEventListener(&#39;click&#39;, () =&gt; playlistModalOverlayApp.classList.remove(&#39;active&#39;));
        // Close modal if user clicks outside the content area
        playlistModalOverlayApp.addEventListener(&#39;click&#39;, (event) =&gt; {
            if (event.target === playlistModalOverlayApp) playlistModalOverlayApp.classList.remove(&#39;active&#39;);
        });
        handleSearchApp(); // Perform an initial search (e.g., for &#34;Radiohead&#34; if pre-filled)
    }

    /**
     * Displays a loading message and disables UI elements during data fetching.
     * @param {string} message - The message to display.
     */
    function showLoadingApp(message = &#34;Procurando...&#34;) {
        searchFeedbackMessageApp.textContent = message;
        searchFeedbackMessageApp.className = &#39;artistas-app-feedback&#39;; // Reset class
        sankeyChartContainerApp.style.display = &#39;none&#39;; // Hide diagram container
        generateDiagramPlaylistBtnApp.disabled = true;
        searchButtonApp.disabled = true;
        artistInputApp.disabled = true;
    }

    /**
     * Hides the loading state by re-enabling UI elements.
     */
    function hideLoadingApp() {
        searchButtonApp.disabled = false;
        artistInputApp.disabled = false;
        // Playlist button is enabled separately when diagram is ready
    }

    /**
     * Displays an error message to the user.
     * @param {string} message - The error message.
     */
    function showErrorApp(message) {
        console.error(&#34;Erro (Artistas App):&#34;, message);
        searchFeedbackMessageApp.textContent = message;
        searchFeedbackMessageApp.className = &#39;artistas-app-feedback error&#39;; // Add error class for styling
        sankeyChartContainerApp.style.display = &#39;none&#39;;
        generateDiagramPlaylistBtnApp.disabled = true;
        hideLoadingApp(); // Re-enable search inputs
    }

    /**
     * Calls a Netlify serverless function which acts as a proxy to the Last.fm API.
     * This is used to hide the API key and manage requests.
     * @param {string} method - The Last.fm API method (e.g., &#39;artist.getinfo&#39;, &#39;artist.getsimilar&#39;).
     * @param {string|null} artistName - The name of the artist for the query.
     * @param {number} limit - The number of results to limit for certain methods.
     * @returns {Promise&lt;object&gt;} - A promise that resolves with the JSON data from the API.
     * @throws {Error} - If the API call fails or returns an error.
     */
    async function callNetlifyProxy(method, artistName = null, limit = SIMILAR_ARTISTS_LIMIT_PER_CALL_APP) {
        const netlifyFunctionBaseUrl = &#34;https://afmartins.netlify.app/.netlify/functions/lastfm-proxy&#34;;

        let proxyUrl = `${netlifyFunctionBaseUrl}?method=${method}`;
        if (artistName) proxyUrl += `&amp;artist=${encodeURIComponent(artistName)}`;
        if (method === &#39;artist.getsimilar&#39; || method === &#39;artist.gettoptracks&#39;) proxyUrl += `&amp;limit=${limit}`;

        try {
            const response = await fetch(proxyUrl);
            const contentType = response.headers.get(&#34;content-type&#34;);

            if (contentType &amp;&amp; contentType.indexOf(&#34;application/json&#34;) !== -1) {
                const data = await response.json();
                if (!response.ok) { // Check for HTTP errors (4xx, 5xx)
                    const errorMsg = data.error || data.details || `Erro ao chamar o proxy (Status: ${response.status})`;
                    throw new Error(errorMsg);
                }
                // Check for Last.fm specific errors embedded in the JSON response
                if (data.error &amp;&amp; typeof data.error === &#39;string&#39; &amp;&amp; data.message) throw new Error(data.message); // Last.fm error format 1
                if (data.error &amp;&amp; data.error.message) throw new Error(data.error.message); // Last.fm error format 2
                return data;
            } else {
                // Handle non-JSON responses (e.g., HTML error pages from proxy)
                const textResponse = await response.text();
                throw new Error(`Resposta inesperada do servidor proxy (n√£o JSON). Status: ${response.status}. Resposta: ${textResponse.substring(0,100)}...`);
            }
        } catch (error) {
            console.error(`Erro na callNetlifyProxy para ${method} (${artistName || &#39;&#39;}):`, error);
            throw error; // Re-throw to be caught by calling function
        }
    }

    /**
     * Fetches detailed information for a specific artist.
     * @param {string} artistName - The name of the artist.
     * @returns {Promise&lt;object&gt;} - Artist data object.
     */
    async function fetchArtistInfoAPIApp(artistName) {
        try {
            const data = await callNetlifyProxy(&#39;artist.getinfo&#39;, artistName);
            if (!data.artist) throw new Error (`Informa√ß√µes do artista &#34;${artistName}&#34; n√£o encontradas (via proxy).`);
            return data.artist;
        } catch (error) {
            throw error;
        }
    }

    /**
     * Fetches artists similar to a given artist.
     * @param {string} artistName - The name of the artist.
     * @returns {Promise&lt;Array&lt;object&gt;&gt;} - An array of similar artist objects.
     */
    async function fetchSimilarArtistsAPIApp(artistName) {
        try {
            const data = await callNetlifyProxy(&#39;artist.getsimilar&#39;, artistName, SIMILAR_ARTISTS_LIMIT_PER_CALL_APP);
            return (data.similarartists &amp;&amp; Array.isArray(data.similarartists.artist)) ? data.similarartists.artist : [];
        } catch (error) {
            // Log a warning but don&#39;t let it break the entire diagram generation if one artist fails
            console.warn(`Falha ao buscar similares para &#34;${artistName}&#34; via proxy: ${error.message}`);
            return []; // Return empty array on failure
        }
    }

    /**
     * Fetches the top track for a given artist.
     * @param {string} artistName - The name of the artist.
     * @returns {Promise&lt;object|null&gt;} - The top track object or null if not found.
     */
    async function fetchArtistTopTrackAPIApp(artistName) {
         try {
            const data = await callNetlifyProxy(&#39;artist.gettoptracks&#39;, artistName, 1); // Fetch only 1 top track
            if (!data.toptracks || !data.toptracks.track || data.toptracks.track.length === 0) {
                console.warn(`Nenhuma top track encontrada para &#34;${artistName}&#34; via proxy.`);
                return null;
            }
            return data.toptracks.track[0]; // Return the first track
        } catch (error) {
            console.warn(`Erro ao buscar top track para &#34;${artistName}&#34; via proxy: ${error.message}`);
            return null;
        }
    }

    /**
     * Generates a unique signature for a set of diagram nodes.
     * Used to check if the playlist cache is still valid for the current diagram.
     * @param {Array&lt;object&gt;} nodes - Array of node objects from the diagram.
     * @returns {string|null} - A sorted string of node names or null.
     */
    function generateDiagramSignatureApp(nodes) {
        if (!nodes || nodes.length === 0) return null;
        return nodes.map(n =&gt; n.name).sort().join(&#39;||&#39;); // Simple signature: sorted names joined
    }

    /**
     * Recursively fetches similar artists up to a max depth and prepares data for the Sankey diagram.
     * This function now explicitly tracks and assigns an &#39;explicitDepth&#39; to each node
     * based on its level in the BFS traversal from the initial artist.
     * @param {string} initialArtistName - The starting artist for the similarity search.
     * @param {number} maxDepth - The maximum depth of similarity links to explore.
     * @returns {Promise&lt;object&gt;} - An object containing nodes, links, and the initial artist name.
     */
    async function generateSankeyDataApp(initialArtistName, maxDepth) {
        const rawLinks = []; // Stores link objects {source, target, value}
        const fetchedArtists = new Set(); // Keeps track of artists already processed to avoid redundant API calls and cycles
        const allNodesData = new Map(); // Stores node data {name, url, explicitDepth} keyed by artist name

        let initialArtistData;
        try {
            // Fetch info for the initial artist to ensure it&#39;s valid and get its URL
            initialArtistData = await fetchArtistInfoAPIApp(initialArtistName);
            // Assign initial explicit depth
            allNodesData.set(initialArtistData.name, { name: initialArtistData.name, url: initialArtistData.url, explicitDepth: 0 });
        } catch (error) {
            // If the initial artist can&#39;t be fetched, throw error to stop processing
            throw error;
        }

        // Use a queue for a Breadth-First Search (BFS) to correctly assign explicit depths
        const queue = [{ artistName: initialArtistData.name, depth: 0 }];
        fetchedArtists.add(initialArtistData.name.toLowerCase()); // Mark initial artist as fetched

        let head = 0;
        while (head &lt; queue.length) {
            const { artistName: currentArtist, depth: currentDepth } = queue[head++];

            if (currentDepth &gt;= maxDepth) continue; // Stop exploring if max depth reached

            const similarArtists = await fetchSimilarArtistsAPIApp(currentArtist);

            similarArtists.forEach(targetArtistInfo =&gt; {
                // Ensure the similar artist data is valid
                if (targetArtistInfo &amp;&amp; targetArtistInfo.name &amp;&amp; targetArtistInfo.match &amp;&amp; targetArtistInfo.url) {
                    const targetArtistName = targetArtistInfo.name;
                    const normalizedTargetArtist = targetArtistName.toLowerCase();

                    // Only process if not already fetched at an earlier or equal depth
                    if (!fetchedArtists.has(normalizedTargetArtist)) {
                        fetchedArtists.add(normalizedTargetArtist);
                        // Assign explicit depth to the new node
                        allNodesData.set(targetArtistName, { name: targetArtistName, url: targetArtistInfo.url, explicitDepth: currentDepth + 1 });
                        queue.push({ artistName: targetArtistName, depth: currentDepth + 1 });
                    }

                    // Add link if similarity is above threshold AND it doesn&#39;t create a circular reference
                    // by ensuring the target node&#39;s explicitDepth is greater than the source node&#39;s.
                    const weight = parseFloat(targetArtistInfo.match) * 100; // &#39;match&#39; is similarity score (0-1)
                    if (weight &gt; 0.01) { // Only include links with a minimal similarity
                        const sourceNode = allNodesData.get(currentArtist);
                        const targetNode = allNodesData.get(targetArtistName);

                        // Prevent circular links: only add if target depth is greater than source depth
                        if (sourceNode &amp;&amp; targetNode &amp;&amp; targetNode.explicitDepth &gt; sourceNode.explicitDepth) {
                            rawLinks.push({ source: currentArtist, target: targetArtistName, value: Math.max(0.01, weight) }); // Sankey value
                        }
                    }
                }
            });
        }

        const nodes = Array.from(allNodesData.values()); // Convert Map to array of node objects
        // Filter out any links where source or target might have been removed or failed to add
        const links = rawLinks.filter(link =&gt; allNodesData.has(link.source) &amp;&amp; allNodesData.has(link.target));

        // Ensure all nodes involved in links actually exist in `nodes` and have an explicitDepth.
        // This is a safeguard for any edge cases where a node might be linked but not fully processed.
        links.forEach(link =&gt; {
            if (!allNodesData.has(link.source)) {
                allNodesData.set(link.source, { name: link.source, url: `https://www.last.fm/music/${encodeURIComponent(link.source.replace(/\s+/g, &#39;+&#39;))}`, explicitDepth: 0 }); // Fallback depth
            }
            if (!allNodesData.has(link.target)) {
                allNodesData.set(link.target, { name: link.target, url: `https://www.last.fm/music/${encodeURIComponent(link.target.replace(/\s+/g, &#39;+&#39;))}`, explicitDepth: 0 }); // Fallback depth
            }
        });
        // Re-filter nodes to ensure consistency after potential fallback additions
        const finalNodes = Array.from(allNodesData.values());


        return { nodes: finalNodes, links, initialArtistName: initialArtistData.name };
    }

    /**
     * Displays the generated playlist in a modal window.
     * @param {object} playlistData - Object containing playlistName and an array of tracks.
     */
    function displayPlaylistInModalApp(playlistData) {
        playlistModalTitleApp.textContent = `üé∂ ${playlistData.playlistName}`;
        let playlistHtml = &#34;&lt;ul&gt;&#34;;
        playlistData.tracks.forEach(track =&gt; {
            playlistHtml += `&lt;li&gt;&lt;a href=&#34;${track.trackUrl}&#34; target=&#34;_blank&#34;&gt;${track.trackName}&lt;/a&gt; - ${track.artistName}&lt;/li&gt;`;
        });
        playlistHtml += &#34;&lt;/ul&gt;&#34;;
        playlistModalBodyApp.innerHTML = playlistHtml;
        playlistModalOverlayApp.classList.add(&#39;active&#39;); // Show the modal
        generateDiagramPlaylistBtnApp.disabled = false; // Re-enable button
    }

    /**
     * Draws the Sankey diagram using D3.js.
     * @param {object} sankeyData - Data object containing nodes and links.
     */
    function drawSankeyD3App(sankeyData) {
        searchFeedbackMessageApp.textContent = &#39;&#39;; // Clear any previous messages
        const { nodes, links, initialArtistName } = sankeyData;
        currentGraphNodesApp = []; // Reset current graph nodes

        // Handle cases with no data or only a single node
        if (!nodes || nodes.length === 0) {
            showErrorApp(`Nenhum dado encontrado para &#34;${initialArtistName}&#34;.`);
            generateDiagramPlaylistBtnApp.disabled = true; return;
        }
        // Special display for a single artist with no similar links found
        if (nodes.length === 1 &amp;&amp; (!links || links.length === 0)) {
            sankeyChartDivApp.innerHTML = &#39;&#39;; // Clear previous diagram
            const singleNode = nodes[0]; currentGraphNodesApp = [singleNode]; // Store for playlist
            const svgSingle = d3.select(sankeyChartDivApp).append(&#34;svg&#34;)
                .attr(&#34;width&#34;, &#34;100%&#34;)
                .attr(&#34;height&#34;, 120)
                .append(&#34;g&#34;)
                .attr(&#34;transform&#34;, `translate(20, 30)`);

            svgSingle.append(&#34;text&#34;).attr(&#34;x&#34;, 0).attr(&#34;y&#34;, 20).attr(&#34;class&#34;, &#34;sankey-node-label&#34;).style(&#34;font-size&#34;, &#34;16px&#34;)
                .text(`Artista: `)
              .append(&#34;a&#34;) // Make artist name a link
                .attr(&#34;xlink:href&#34;, singleNode.url)
                .attr(&#34;target&#34;, &#34;_blank&#34;)
                .style(&#34;fill&#34;, &#34;#c53030&#34;) // Style link
                .style(&#34;text-decoration&#34;, &#34;underline&#34;)
                .text(singleNode.name);
            svgSingle.append(&#34;text&#34;).attr(&#34;x&#34;, 0).attr(&#34;y&#34;, 45).attr(&#34;class&#34;, &#34;sankey-node-label&#34;)
                .text(&#34;(Nenhum artista similar direto encontrado na Last.fm)&#34;);

            sankeyChartContainerApp.style.display = &#39;block&#39;;
            generateDiagramPlaylistBtnApp.disabled = false; // Can still generate playlist for single artist
            hideLoadingApp();
            return;
        }
        // If there are nodes but no links (e.g., initial artist + others but no connections made)
        if ((!links || links.length === 0) &amp;&amp; nodes.length &gt; 1) {
             showErrorApp(`Nenhum artista similar encontrado para &#34;${initialArtistName}&#34; para gerar o diagrama.`);
             generateDiagramPlaylistBtnApp.disabled = true; return;
        }

        // --- Sankey Diagram Setup ---
        const containerWidth = Math.max(1200, sankeyChartDivApp.clientWidth); // Ensure minimum width or use container width
        // Dynamic height based on number of nodes and links to prevent squashing
        const dynamicHeight = Math.max(800, nodes.length * 50 + links.length * 20);
        const width = containerWidth - marginApp.left - marginApp.right;
        const height = dynamicHeight - marginApp.top - marginApp.bottom;

        sankeyChartDivApp.innerHTML = &#39;&#39;; // MODIFICATION: Clear previous diagram before drawing new one
        const svg = d3.select(sankeyChartDivApp).append(&#34;svg&#34;)
            .attr(&#34;width&#34;, containerWidth)
            .attr(&#34;height&#34;, dynamicHeight)
          .append(&#34;g&#34;)
            .attr(&#34;transform&#34;, `translate(${marginApp.left},${marginApp.top})`);

        // MODIFICATION: Change nodeAlign to a custom function to prevent nodes with no outgoing links
        // from being pushed to the last column. This aligns nodes based purely on their explicitDepth.
        const sankey = d3.sankey()
            .nodeId(d =&gt; d.name) // Accessor for node ID (artist name)
            .nodeAlign(function(node) {
                // Use the &#39;explicitDepth&#39; property assigned during graph generation
                // to align nodes to columns. This ensures nodes stay in their
                // natural depth position, even if they have no outgoing links.
                return node.explicitDepth;
            })
            .nodeWidth(nodeWidthApp)
            .nodePadding(nodePaddingVerticalApp)
            .extent([[0, 5], [width, height - 5]]) // Diagram bounds [[x0, y0], [x1, y1]]
            .iterations(32); // Number of layout iterations

        let graph;
        try {
            // Compute the Sankey layout. D3 modifies the nodes and links objects in place.
            // It will also add its own &#39;depth&#39; property, but our nodeAlign uses &#39;explicitDepth&#39;.
            graph = sankey({
                nodes: JSON.parse(JSON.stringify(nodes)), // Deep copy to avoid modifying original data
                links: JSON.parse(JSON.stringify(links))
            });
        } catch (error) {
            showErrorApp(`Erro no layout do Sankey: ${error.message}.`);
            generateDiagramPlaylistBtnApp.disabled = true; return;
        }

        if (!graph || !graph.nodes || !graph.links || graph.nodes.length === 0) {
            showErrorApp(&#39;Falha ao gerar o gr√°fico Sankey com os dados processados.&#39;);
            generateDiagramPlaylistBtnApp.disabled = true; return;
        }

        currentGraphNodesApp = graph.nodes; // Store processed nodes for playlist generation
        generateDiagramPlaylistBtnApp.disabled = false; // Enable playlist button

        // --- Color Scheme &amp; Gradients for Links ---
        const simpleColors = [&#34;#66c2a5&#34;, &#34;#fc8d62&#34;, &#34;#8da0cb&#34;, &#34;#e78ac3&#34;, &#34;#a6d854&#34;, &#34;#ffd92f&#34;, &#34;#e5c494&#34;, &#34;#b3b3b3&#34;];
        let maxNodeDepth = 0;
        // MODIFICATION: Ensure node.explicitDepth is used for color if available
        graph.nodes.forEach(node =&gt; {
            const depthToUse = typeof node.explicitDepth === &#39;number&#39; ? node.explicitDepth : node.depth;
            if (typeof depthToUse !== &#39;number&#39; || isNaN(depthToUse)) node.depth = 0; // Fallback to 0 if neither is valid
            if (depthToUse &gt; maxNodeDepth) maxNodeDepth = depthToUse;
        });
        // Color nodes based on their explicit depth (or D3&#39;s depth as fallback)
        const nodeColorFunc = (node) =&gt; {
            const depthToUse = typeof node.explicitDepth === &#39;number&#39; ? node.explicitDepth : node.depth;
            if (typeof depthToUse !== &#39;number&#39; || isNaN(depthToUse)) return &#34;#cccccc&#34;; // Fallback color
            return simpleColors[depthToUse % simpleColors.length];
        };

        const defs = svg.append(&#34;defs&#34;); // Container for SVG definitions (like gradients)
        // Create a gradient for each link
        graph.links.forEach((link, i) =&gt; {
            const gradientID = `linkGradient-${i}`; // Unique ID for each gradient
            const gradient = defs.append(&#34;linearGradient&#34;)
                .attr(&#34;id&#34;, gradientID)
                .attr(&#34;gradientUnits&#34;, &#34;userSpaceOnUse&#34;) // Gradient coordinates relative to the link path
                .attr(&#34;x1&#34;, link.source.x1) // Start gradient at the end of the source node
                .attr(&#34;x2&#34;, link.target.x0); // End gradient at the start of the target node

            const sourceColor = nodeColorFunc(link.source);
            const targetColor = nodeColorFunc(link.target);
            gradient.append(&#34;stop&#34;).attr(&#34;offset&#34;, &#34;0%&#34;).attr(&#34;stop-color&#34;, sourceColor);
            gradient.append(&#34;stop&#34;).attr(&#34;offset&#34;, &#34;100%&#34;).attr(&#34;stop-color&#34;, targetColor);
        });

        // --- Draw Links ---
        const linkGroups = svg.append(&#34;g&#34;)
            .attr(&#34;fill&#34;, &#34;none&#34;) // Links are typically strokes, not fills
          .selectAll(&#34;g.sankey-link-group&#34;)
          .data(graph.links)
          .join(&#34;g&#34;)
            .attr(&#34;class&#34;, &#34;sankey-link-group&#34;);

        linkGroups.append(&#34;path&#34;)
            .attr(&#34;class&#34;, &#34;sankey-link&#34;)
            .attr(&#34;d&#34;, d3.sankeyLinkHorizontal()) // Path generator for Sankey links
            .attr(&#34;stroke&#34;, (d, i) =&gt; `url(#${`linkGradient-${i}`.replace(/\s/g, &#39;-&#39;)})`) // Apply gradient
            .attr(&#34;stroke-width&#34;, d =&gt; Math.max(1, d.width)); // Stroke width based on link value

        // --- Draw Nodes ---
        const nodeLinkGroups = svg.append(&#34;g&#34;) // Group for nodes, wrapped in links
          .selectAll(&#34;a.sankey-node-link&#34;)
          .data(graph.nodes)
          .join(&#34;a&#34;) // Each node is a link to the artist&#39;s Last.fm page
            .attr(&#34;class&#34;, &#34;sankey-node-link&#34;)
            .attr(&#34;xlink:href&#34;, d =&gt; d.url)
            .attr(&#34;target&#34;, &#34;_blank&#34;) // Open in new tab
          .append(&#34;g&#34;) // Group for rect and text within the link
            .attr(&#34;class&#34;, &#34;sankey-node-group&#34;)
            .attr(&#34;transform&#34;, d =&gt; `translate(${d.x0},${d.y0})`); // Position node group

        nodeLinkGroups.append(&#34;rect&#34;) // The visual node rectangle
            .attr(&#34;class&#34;, &#34;sankey-node&#34;)
            .attr(&#34;height&#34;, d =&gt; Math.max(0.5, d.y1 - d.y0)) // Node height
            .attr(&#34;width&#34;, d =&gt; d.x1 - d.x0) // Node width (calculated by Sankey layout)
            .attr(&#34;fill&#34;, d =&gt; nodeColorFunc(d)); // Color by depth

        // --- Add Node Labels ---
        nodeLinkGroups.append(&#34;text&#34;)
            .attr(&#34;class&#34;, &#34;sankey-node-label&#34;)
            .each(function(d) { // `each` allows using `this` to refer to the text element
                const isInitialArtist = d.name === initialArtistName;
                const text = d3.select(this);
                const nodeWidth = d.x1 - d.x0;
                const nodeHeight = d.y1 - d.y0;

                // MODIFICATION: Adjusted label positioning logic
                if (isInitialArtist &amp;&amp; nodeHeight &gt; 20) { // Centered for initial artist if tall enough
                     text.attr(&#34;x&#34;, nodeWidth / 2).attr(&#34;y&#34;, nodeHeight / 2).attr(&#34;text-anchor&#34;, &#34;middle&#34;);
                } else if (d.x0 &lt; width * 0.15 &amp;&amp; nodeHeight &gt; 15 ) { // Text to the right for nodes on the far left
                    text.attr(&#34;x&#34;, nodeWidth + 6).attr(&#34;y&#34;, nodeHeight / 2).attr(&#34;text-anchor&#34;, &#34;start&#34;);
                } else if (d.x1 &gt; width * 0.85 &amp;&amp; nodeHeight &gt; 15) { // Text to the left for nodes on the far right
                    text.attr(&#34;x&#34;, -6).attr(&#34;y&#34;, nodeHeight / 2).attr(&#34;text-anchor&#34;, &#34;end&#34;);
                }
                else { // Default: above node, or centered if very thin
                    text.attr(&#34;x&#34;, nodeWidth / 2).attr(&#34;y&#34;, nodeHeight &lt; 12 ? nodeHeight / 2 : -12).attr(&#34;text-anchor&#34;, &#34;middle&#34;);
                }
            })
            .attr(&#34;dy&#34;, &#34;0.35em&#34;) // Vertical alignment adjustment
            .text(d =&gt; d.name)
            .style(&#34;display&#34;, d =&gt; (d.y1 - d.y0) &gt; 10 ? &#34;inline&#34; : &#34;none&#34;); // Hide label if node is too short

        sankeyChartContainerApp.style.display = &#39;block&#39;; // Show the diagram container
        hideLoadingApp();
    }

    /**
     * Handles the generation of a playlist from the artists in the current Sankey diagram.
     * Fetches the top track for each artist and displays them in a modal.
     */
    async function handleGenerateDiagramPlaylistApp() {
        if (!currentGraphNodesApp || currentGraphNodesApp.length === 0) {
            showErrorApp(&#34;Nenhum artista no diagrama para gerar playlist.&#34;);
            return;
        }

        // Check cache first
        const currentDiagramSignature = generateDiagramSignatureApp(currentGraphNodesApp);
        if (cachedPlaylistDataApp &amp;&amp; cachedDiagramSignatureApp === currentDiagramSignature) {
            displayPlaylistInModalApp(cachedPlaylistDataApp);
            return;
        }

        // Show loading state in modal
        playlistModalTitleApp.textContent = `üé∂ Gerando Playlist...`;
        playlistModalBodyApp.innerHTML = &#39;&lt;div class=&#34;artistas-app-modal-loading-spinner&#34;&gt;&lt;p&gt;Procurando as m√∫sicas mais famosas...&lt;/p&gt;&lt;div class=&#34;spinner&#34;&gt;&lt;/div&gt;&lt;/div&gt;&#39;;
        playlistModalOverlayApp.classList.add(&#39;active&#39;);
        generateDiagramPlaylistBtnApp.disabled = true; // Disable button while fetching

        // Fetch top track for each artist in the diagram
        const trackPromises = currentGraphNodesApp.map(node =&gt; fetchArtistTopTrackAPIApp(node.name));

        try {
            const topTracksResponses = await Promise.all(trackPromises);
            const validTracks = topTracksResponses.filter(track =&gt; track !== null); // Filter out nulls (failed fetches)

            if (validTracks.length === 0) {
                throw new Error(&#34;N√£o foi poss√≠vel encontrar as m√∫sicas mais famosas para os artistas do diagrama.&#34;);
            }

            // Prepare playlist data
            const tracksForPlaylist = validTracks.map(track =&gt; ({
                artistName: track.artist.name,
                trackName: track.name,
                trackUrl: track.url
            }));
            const playlistData = {
                playlistName: &#34;Sankey Playlist&#34;,
                tracks: tracksForPlaylist
            };

            // Cache and display
            cachedPlaylistDataApp = playlistData;
            cachedDiagramSignatureApp = currentDiagramSignature;
            displayPlaylistInModalApp(playlistData);
        } catch (error) {
            console.error(&#34;Erro ao gerar playlist do diagrama:&#34;, error);
            playlistModalTitleApp.textContent = &#34;Erro ao Gerar a Playlist&#34;;
            playlistModalBodyApp.innerHTML = `&lt;p style=&#34;color: #c53030;&#34;&gt;${error.message}&lt;/p&gt;`;
        } finally {
            generateDiagramPlaylistBtnApp.disabled = false; // Re-enable button
        }
    }

    /**
     * Handles the main search functionality when the user clicks &#34;Buscar&#34; or presses Enter.
     * Fetches Sankey data for the entered artist and triggers diagram drawing.
     */
    async function handleSearchApp() {
        if (!artistInputApp) return; // Should not happen if initialized correctly
        const artistNameFromInput = artistInputApp.value.trim();
        if (!artistNameFromInput) {
            showErrorApp(&#39;Por favor, digite o nome de um artista.&#39;);
            return;
        }

        showLoadingApp(`Procurando por &#34;${artistNameFromInput}&#34;...`);
        if(sankeyChartDivApp) sankeyChartDivApp.innerHTML = &#39;&#39;; // Clear previous diagram
        currentGraphNodesApp = []; // Reset state
        if(generateDiagramPlaylistBtnApp) generateDiagramPlaylistBtnApp.disabled = true;
        cachedPlaylistDataApp = null; // Clear cache
        cachedDiagramSignatureApp = null;

        try {
            const sankeyData = await generateSankeyDataApp(artistNameFromInput, MAX_DEPTH_APP);
            if (sankeyData &amp;&amp; sankeyData.nodes &amp;&amp; sankeyData.nodes.length &gt; 0) {
                drawSankeyD3App(sankeyData);
            } else {
                // This case should ideally be caught by generateSankeyDataApp throwing an error
                // if initialArtistData fails, or by drawSankeyD3App if nodes array is empty after processing.
                showErrorApp(`Nenhuma informa√ß√£o encontrada para &#34;${artistNameFromInput}&#34;.`);
            }
        } catch (error) {
            // Catch errors from generateSankeyDataApp (e.g., initial artist not found)
            showErrorApp(error.message || `Ocorreu um erro ao buscar dados para &#34;${artistNameFromInput}&#34;.`);
        }
    }

    // --- App Initialization ---
    // Ensure the script runs only if the main container element exists on the page
    if (document.getElementById(&#39;artist-input-app&#39;)) {
        initializePageApp();
    }

})();
&lt;/script&gt;
</description>
    </item>
    
  </channel>
</rss>
