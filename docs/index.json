[{"authors":null,"categories":null,"content":"I\u0026rsquo;m a physicist with a background on complex systems and data science. I currently work as a Data Scientist in the Corporate Security Modelling team at Bradesco, one of the largest private financial institutions in Brazil.\n","date":1747785600,"expirydate":-62135596800,"kind":"term","lang":"en","lastmod":1747785600,"objectID":"2525497d367e79493fd32b198b28f040","permalink":"https://alvarofrancomartins.com/author/alvaro-franco-martins/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/author/alvaro-franco-martins/","section":"authors","summary":"I\u0026rsquo;m a physicist with a background on complex systems and data science. I currently work as a Data Scientist in the Corporate Security Modelling team at Bradesco, one of the largest private financial institutions in Brazil.","tags":null,"title":"Alvaro Franco Martins","type":"authors"},{"authors":["Alvaro Franco Martins"],"categories":null,"content":"Teste Artistas Similares Descubra conex√µes musicais em at√© 4 n√≠veis de similaridade.\n Buscar ‚ú® Gerar Playlist      \u0026times; üé∂ Sankey Playlist    Dados fornecidos pela Last.fm.\n  /* Para evitar conflitos, todas as classes t√™m o prefixo \"artistas-app-\" */ .artistas-app-wrapper { font-family: 'Inter', sans-serif; /* Certifique-se que a fonte Inter est√° carregada na sua p√°gina Hugo principal */ line-height: 1.6; color: #374151; margin-bottom: 40px; } .artistas-app-header { text-align: center; margin-bottom: 20px; } .artistas-app-header h2 { color: #c53030; margin-top: 0; margin-bottom: 5px; font-weight: 700; font-size: 1.8rem; } .artistas-app-header p { margin-bottom: 0; font-size: 1rem; color: #6b7280; } .artistas-app-search-container { display: flex; justify-content: center; align-items: stretch; /* Para alinhar altura dos bot√µes e input */ margin-bottom: 15px; gap: 8px; /* Espa√ßo entre os elementos */ } .artistas-app-search-container input[type=\"text\"] { padding: 10px 15px; width: clamp(220px, 50%, 300px); /* Ajustada largura do input */ border: 1px solid #d1d5db; border-radius: 8px; font-size: 0.95rem; box-shadow: 0 1px 2px rgba(0,0,0,0.05); } .artistas-app-search-container input[type=\"text\"]:focus { outline: none; border-color: #c53030; box-shadow: 0 0 0 3px rgba(197, 48, 48, 0.15); z-index: 1; } .artistas-app-search-container button#search-button-app { padding: 10px 20px; background-color: #c53030; color: white; border: none; border-radius: 8px; cursor: pointer; font-size: 0.95rem; font-weight: 600; white-space: nowrap; } .artistas-app-search-container button#search-button-app:hover { background-color: #a02828; } button.artistas-app-playlist-button { /* Estilo para o bot√£o de playlist, agora no mesmo container */ background-color: #2563eb; color: white; padding: 10px 18px; border: none; border-radius: 8px; font-size: 0.9rem; font-weight: 600; cursor: pointer; white-space: nowrap; transition: background-color 0.2s ease, opacity 0.2s ease; box-shadow: 0 1px 2px rgba(0,0,0,0.07); } button.artistas-app-playlist-button:hover { background-color: #1d4ed8; } button.artistas-app-playlist-button:disabled { background-color: #9ca3af; opacity: 0.7; cursor: not-allowed; } .artistas-app-feedback { text-align: center; margin: 8px 0; min-height: 18px; font-size: 0.9rem; color: #4b5563; } .artistas-app-feedback.error { color: #c53030; font-weight: 500; } .artistas-app-sankey-container { width: 100%; max-width: 100%; margin-top: 5px; background-color: #ffffff; border-radius: 12px; box-shadow: 0 6px 12px rgba(0,0,0,0.08); padding: 20px; box-sizing: border-box; overflow-x: auto; } #sankey-chart-app { /* Added this to ensure the div expands */ width: 100%; height: 100%; /* Or min-height based on dynamicHeight */ } .artistas-app-sankey-container svg { display: block; width: 100%; min-height: 800px; /* Aumentada altura m√≠nima para profundidade 4 */ } .sankey-node-group { cursor: pointer; } .sankey-node rect { fill-opacity: 1; shape-rendering: crispEdges; stroke: rgba(0,0,0,0.1); stroke-width: 0.5px; transition: all 0.2s ease; } .sankey-node-group:hover .sankey-node { stroke-width: 1.5px; stroke: rgba(0,0,0,0.3); fill-opacity: 0.85; } .sankey-link { fill: none; stroke-opacity: 0.55; transition: stroke-opacity 0.2s ease; } /* .sankey-link-group:hover .sankey-link { stroke-opacity: 0.8; } */ .sankey-node-label { pointer-events: none; font-size: 14px; font-weight: 500; fill: #1f2937; transition: all 0.2s ease; } .sankey-node-group:hover .sankey-node-label { font-size: 16px; font-weight: 700; fill: #000000; } .artistas-app-modal-overlay { position: fixed; top: 0; left: 0; width: 100%; height: 100%; background-color: rgba(0, 0, 0, 0.6); display: flex; justify-content: center; align-items: center; z-index: 2000; opacity: 0; visibility: hidden; transition: opacity 0.3s ease, visibility 0.3s ease; } .artistas-app-modal-overlay.active { opacity: 1; visibility: visible; } .artistas-app-modal-content { background-color: white; padding: 20px 25px; border-radius: 12px; box-shadow: 0 5px 15px rgba(0,0,0,0.3); width: 90%; max-width: 650px; max-height: 80vh; overflow-y: auto; position: relative; } .artistas-app-modal-content h2 { margin-top: 0; margin-bottom: 15px; font-size: 1.4rem; color: #c53030; } .artistas-app-modal-content ul { list-style: decimal; padding-left: 20px; } .artistas-app-modal-content li { margin-bottom: 8px; font-size: 0.9rem; } .artistas-app-modal-content li a { color: #2563eb; text-decoration: none; font-weight: 500; } .artistas-app-modal-content li a:hover { text-decoration: underline; } .artistas-app-modal-close-button { position: absolute; top: 10px; right: 15px; background: none; border: none; font-size: 1.7rem; cursor: pointer; color: #9ca3af; padding: 0; line-height: 1; } .artistas-app-modal-close-button:hover { color: #6b7280; } .artistas-app-modal-loading-spinner { display: flex; flex-direction: column; justify-content: center; align-items: center; min-height: 120px; } .artistas-app-modal-loading-spinner p { margin-bottom: 12px; font-size: 0.95rem; color: #4b5563; } .spinner { border: 4px solid rgba(0, 0, 0, 0.1); width: 32px; height: 32px; border-radius: 50%; border-left-color: #c53030; animation: spin 1s ease infinite; } @keyframes spin { 0% { transform: rotate(0deg); } 100% { transform: rotate(360deg); } } .artistas-app-footer { text-align: center; padding: 10px 0; font-size: 0.8rem; color: #6b7280; margin-top: 15px; } .artistas-app-footer a { color: #c53030; text-decoration: none; } .artistas-app-footer a:hover { text-decoration: underline; }     (function() { // Get references to DOM elements const artistInputApp = document.getElementById('artist-input-app'); // Early exit if the main input isn't found (e.g., if script is loaded on a page without the app) if (!artistInputApp) { return; } const searchButtonApp = document.getElementById('search-button-app'); const generateDiagramPlaylistBtnApp = document.getElementById('generate-diagram-playlist-btn-app'); const searchFeedbackMessageApp = document.getElementById('search-feedback-message-app'); const sankeyChartContainerApp = document.getElementById('sankey-chart-container-app'); const sankeyChartDivApp = document.getElementById('sankey-chart-app'); // Playlist Modal Elements const playlistModalOverlayApp = document.getElementById('playlist-modal-overlay-app'); const playlistModalTitleApp = document.getElementById('playlist-modal-title-app'); // Fixed typo here const playlistModalBodyApp = document.getElementById('playlist-modal-body-app'); const modalCloseBtnApp = document.getElementById('modal-close-btn-app'); // Configuration constants const MAX_DEPTH_APP = 4; // Max levels of similarity to explore const SIMILAR_ARTISTS_LIMIT_PER_CALL_APP = 3; // How many similar artists to fetch per API call // State variables let currentGraphNodesApp = []; // Stores nodes currently displayed in the diagram let cachedPlaylistDataApp = null; // Caches generated playlist to avoid re-fetching let cachedDiagramSignatureApp = null; // Signature of the current diagram to validate cache let currentSankeyDataApp = null; // Stores the current Sankey data for redraws // --- D3 Sankey Diagram Configuration --- // MODIFICATION: Reduced left and right margins to provide more horizontal space const marginApp = {top: 40, right: 20, bottom: 40, left: 20}; // Margins for the SVG const nodeWidthApp = 25; // Width of the Sankey nodes const nodePaddingVerticalApp = 50; // Vertical padding between nodes in the same column /** * Initializes the application by setting up event listeners. * It also triggers an initial search if an artist name is pre-filled. */ function initializePageApp() { searchButtonApp.addEventListener('click', handleSearchApp); artistInputApp.addEventListener('keypress', (event) = { if (event.key === 'Enter') handleSearchApp(); }); generateDiagramPlaylistBtnApp.addEventListener('click', handleGenerateDiagramPlaylistApp); modalCloseBtnApp.addEventListener('click', () = playlistModalOverlayApp.classList.remove('active')); // Close modal if user clicks outside the content area playlistModalOverlayApp.addEventListener('click', (event) = { if (event.target === playlistModalOverlayApp) playlistModalOverlayApp.classList.remove('active'); }); // MODIFICATION: Add responsive redraw on window resize window.addEventListener('resize', () = { if (currentSankeyDataApp) { drawSankeyD3App(currentSankeyDataApp); } }); handleSearchApp(); // Perform an initial search (e.g., for \"Radiohead\" if pre-filled) } /** * Displays a loading message and disables UI elements during data fetching. * @param {string} message - The message to display. */ function showLoadingApp(message = \"Procurando...\") { searchFeedbackMessageApp.textContent = message; searchFeedbackMessageApp.className = 'artistas-app-feedback'; // Reset class sankeyChartContainerApp.style.display = 'none'; // Hide diagram container generateDiagramPlaylistBtnApp.disabled = true; searchButtonApp.disabled = true; artistInputApp.disabled = true; } /** * Hides the loading state by re-enabling UI elements. */ function hideLoadingApp() { searchButtonApp.disabled = false; artistInputApp.disabled = false; // Playlist button is enabled separately when diagram is ready } /** * Displays an error message to the user. * @param {string} message - The error message. */ function showErrorApp(message) { console.error(\"Erro (Artistas App):\", message); searchFeedbackMessageApp.textContent = message; searchFeedbackMessageApp.className = 'artistas-app-feedback error'; // Add error class for styling sankeyChartContainerApp.style.display = 'none'; generateDiagramPlaylistBtnApp.disabled = true; hideLoadingApp(); // Re-enable search inputs } /** * Calls a Netlify serverless function which acts as a proxy to the Last.fm API. * This is used to hide the API key and manage requests. * @param {string} method - The Last.fm API method (e.g., 'artist.getinfo', 'artist.getsimilar'). * @param {string|null} artistName - The name of the artist for the query. * @param {number} limit - The number of results to limit for certain methods. * @returns {Promise} - A promise that resolves with the JSON data from the API. * @throws {Error} - If the API call fails or returns an error. */ async function callNetlifyProxy(method, artistName = null, limit = SIMILAR_ARTISTS_LIMIT_PER_CALL_APP) { const netlifyFunctionBaseUrl = \"https://afmartins.netlify.app/.netlify/functions/lastfm-proxy\"; let proxyUrl = `${netlifyFunctionBaseUrl}?method=${method}`; if (artistName) proxyUrl += `\u0026artist=${encodeURIComponent(artistName)}`; if (method === 'artist.getsimilar' || method === 'artist.gettoptracks') proxyUrl += `\u0026limit=${limit}`; try { const response = await fetch(proxyUrl); const contentType = response.headers.get(\"content-type\"); if (contentType \u0026\u0026 contentType.indexOf(\"application/json\") !== -1) { const data = await response.json(); if (!response.ok) { // Check for HTTP errors (4xx, 5xx) const errorMsg = data.error || data.details || `Erro ao chamar o proxy (Status: ${response.status})`; throw new Error(errorMsg); } // Check for Last.fm specific errors embedded in the JSON response if (data.error \u0026\u0026 typeof data.error === 'string' \u0026\u0026 data.message) throw new Error(data.message); // Last.fm error format 1 if (data.error \u0026\u0026 data.error.message) throw new Error(data.error.message); // Last.fm error format 2 return data; } else { // Handle non-JSON responses (e.g., HTML error pages from proxy) const textResponse = await response.text(); throw new Error(`Resposta inesperada do servidor proxy (n√£o JSON). Status: ${response.status}. Resposta: ${textResponse.substring(0,100)}...`); } } catch (error) { console.error(`Erro na callNetlifyProxy para ${method} (${artistName || ''}):`, error); throw error; // Re-throw to be caught by calling function } } /** * Fetches detailed information for a specific artist. * @param {string} artistName - The name of the artist. * @returns {Promise} - Artist data object. */ async function fetchArtistInfoAPIApp(artistName) { try { const data = await callNetlifyProxy('artist.getinfo', artistName); if (!data.artist) throw new Error (`Informa√ß√µes do artista \"${artistName}\" n√£o encontradas (via proxy).`); return data.artist; } catch (error) { throw error; } } /** * Fetches artists similar to a given artist. * @param {string} artistName - The name of the artist. * @returns {Promise} - An array of similar artist objects. */ async function fetchSimilarArtistsAPIApp(artistName) { try { const data = await callNetlifyProxy('artist.getsimilar', artistName, SIMILAR_ARTISTS_LIMIT_PER_CALL_APP); return (data.similarartists \u0026\u0026 Array.isArray(data.similarartists.artist)) ? data.similarartists.artist : []; } catch (error) { // Log a warning but don't let it break the entire diagram generation if one artist fails console.warn(`Falha ao buscar similares para \"${artistName}\" via proxy: ${error.message}`); return []; // Return empty array on failure } } /** * Fetches the top track for a given artist. * @param {string} artistName - The name of the artist. * @returns {Promise} - The top track object or null if not found. */ async function fetchArtistTopTrackAPIApp(artistName) { try { const data = await callNetlifyProxy('artist.gettoptracks', artistName, 1); // Fetch only 1 top track if (!data.toptracks || !data.toptracks.track || data.toptracks.track.length === 0) { console.warn(`Nenhuma top track encontrada para \"${artistName}\" via proxy.`); return null; } return data.toptracks.track[0]; // Return the first track } catch (error) { console.warn(`Erro ao buscar top track para \"${artistName}\" via proxy: ${error.message}`); return null; } } /** * Generates a unique signature for a set of diagram nodes. * Used to check if the playlist cache is still valid for the current diagram. * @param {Array} nodes - Array of node objects from the diagram. * @returns {string|null} - A sorted string of node names or null. */ function generateDiagramSignatureApp(nodes) { if (!nodes || nodes.length === 0) return null; return nodes.map(n = n.name).sort().join('||'); // Simple signature: sorted names joined } /** * Recursively fetches similar artists up to a max depth and prepares data for the Sankey diagram. * This function now explicitly tracks and assigns an 'explicitDepth' to each node * based on its level in the BFS traversal from the initial artist. * @param {string} initialArtistName - The starting artist for the similarity search. * @param {number} maxDepth - The maximum depth of similarity links to explore. * @returns {Promise} - An object containing nodes, links, and the initial artist name. */ async function generateSankeyDataApp(initialArtistName, maxDepth) { const rawLinks = []; // Stores link objects {source, target, value} const fetchedArtists = new Set(); // Keeps track of artists already processed to avoid redundant API calls and cycles const allNodesData = new Map(); // Stores node data {name, url, explicitDepth} keyed by artist name let initialArtistData; try { // Fetch info for the initial artist to ensure it's valid and get its URL initialArtistData = await fetchArtistInfoAPIApp(initialArtistName); // Assign initial explicit depth allNodesData.set(initialArtistData.name, { name: initialArtistData.name, url: initialArtistData.url, explicitDepth: 0 }); } catch (error) { // If the initial artist can't be fetched, throw error to stop processing throw error; } // Use a queue for a Breadth-First Search (BFS) to correctly assign explicit depths const queue = [{ artistName: initialArtistData.name, depth: 0 }]; fetchedArtists.add(initialArtistData.name.toLowerCase()); // Mark initial artist as fetched let head = 0; while (head = maxDepth) continue; // Stop exploring if max depth reached const similarArtists = await fetchSimilarArtistsAPIApp(currentArtist); similarArtists.forEach(targetArtistInfo = { // Ensure the similar artist data is valid if (targetArtistInfo \u0026\u0026 targetArtistInfo.name \u0026\u0026 targetArtistInfo.match \u0026\u0026 targetArtistInfo.url) { const targetArtistName = targetArtistInfo.name; const normalizedTargetArtist = targetArtistName.toLowerCase(); // Only process if not already fetched at an earlier or equal depth if (!fetchedArtists.has(normalizedTargetArtist)) { fetchedArtists.add(normalizedTargetArtist); // Assign explicit depth to the new node allNodesData.set(targetArtistName, { name: targetArtistName, url: targetArtistInfo.url, explicitDepth: currentDepth + 1 }); queue.push({ artistName: targetArtistName, depth: currentDepth + 1 }); } // Add link if similarity is above threshold AND it doesn't create a circular reference // by ensuring the target node's explicitDepth is greater than the source node's. const weight = parseFloat(targetArtistInfo.match) * 100; // 'match' is similarity score (0-1) if (weight  0.01) { // Only include links with a minimal similarity const sourceNode = allNodesData.get(currentArtist); const targetNode = allNodesData.get(targetArtistName); // Prevent circular links: only add if target depth is greater than source depth if (sourceNode \u0026\u0026 targetNode \u0026\u0026 targetNode.explicitDepth  sourceNode.explicitDepth) { rawLinks.push({ source: currentArtist, target: targetArtistName, value: Math.max(0.01, weight) }); // Sankey value } } } }); } const nodes = Array.from(allNodesData.values()); // Convert Map to array of node objects // Filter out any links where source or target might have been removed or failed to add const links = rawLinks.filter(link = allNodesData.has(link.source) \u0026\u0026 allNodesData.has(link.target)); // Ensure all nodes involved in links actually exist in `nodes` and have an explicitDepth. // This is a safeguard for any edge cases where a node might be linked but not fully processed. links.forEach(link = { if (!allNodesData.has(link.source)) { allNodesData.set(link.source, { name: link.source, url: `https://www.last.fm/music/${encodeURIComponent(link.source.replace(/\\s+/g, '+'))}`, explicitDepth: 0 }); // Fallback depth } if (!allNodesData.has(link.target)) { allNodesData.set(link.target, { name: link.target, url: `https://www.last.fm/music/${encodeURIComponent(link.target.replace(/\\s+/g, '+'))}`, explicitDepth: 0 }); // Fallback depth } }); // Re-filter nodes to ensure consistency after potential fallback additions const finalNodes = Array.from(allNodesData.values()); return { nodes: finalNodes, links, initialArtistName: initialArtistData.name }; } /** * Displays the generated playlist in a modal window. * @param {object} playlistData - Object containing playlistName and an array of tracks. */ function displayPlaylistInModalApp(playlistData) { playlistModalTitleApp.textContent = `üé∂ ${playlistData.playlistName}`; let playlistHtml = \"\"; playlistData.tracks.forEach(track = { playlistHtml += `${track.trackName} - ${track.artistName}`; }); playlistHtml += \"\"; playlistModalBodyApp.innerHTML = playlistHtml; playlistModalOverlayApp.classList.add('active'); // Show the modal generateDiagramPlaylistBtnApp.disabled = false; // Re-enable button } /** * Draws the Sankey diagram using D3.js. * @param {object} sankeyData - Data object containing nodes and links. */ function drawSankeyD3App(sankeyData) { searchFeedbackMessageApp.textContent = ''; // Clear any previous messages const { nodes, links, initialArtistName } = sankeyData; currentGraphNodesApp = []; // Reset current graph nodes currentSankeyDataApp = sankeyData; // Store the data for responsive redraws // Handle cases with no data or only a single node if (!nodes || nodes.length === 0) { showErrorApp(`Nenhum dado encontrado para \"${initialArtistName}\".`); generateDiagramPlaylistBtnApp.disabled = true; return; } // Special display for a single artist with no similar links found if (nodes.length === 1 \u0026\u0026 (!links || links.length === 0)) { sankeyChartDivApp.innerHTML = ''; // Clear previous diagram const singleNode = nodes[0]; currentGraphNodesApp = [singleNode]; // Store for playlist const svgSingle = d3.select(sankeyChartDivApp).append(\"svg\") .attr(\"width\", \"100%\") .attr(\"height\", 120) .append(\"g\") .attr(\"transform\", `translate(20, 30)`); svgSingle.append(\"text\").attr(\"x\", 0).attr(\"y\", 20).attr(\"class\", \"sankey-node-label\").style(\"font-size\", \"16px\") .text(`Artista: `) .append(\"a\") // Make artist name a link .attr(\"xlink:href\", singleNode.url) .attr(\"target\", \"_blank\") .style(\"fill\", \"#c53030\") // Style link .style(\"text-decoration\", \"underline\") .text(singleNode.name); svgSingle.append(\"text\").attr(\"x\", 0).attr(\"y\", 45).attr(\"class\", \"sankey-node-label\") .text(\"(Nenhum artista similar direto encontrado na Last.fm)\"); sankeyChartContainerApp.style.display = 'block'; generateDiagramPlaylistBtnBtnApp.disabled = false; // Can still generate playlist for single artist hideLoadingApp(); return; } // If there are nodes but no links (e.g., initial artist + others but no connections made) if ((!links || links.length === 0) \u0026\u0026 nodes.length  1) { showErrorApp(`Nenhum artista similar encontrado para \"${initialArtistName}\" para gerar o diagrama.`); generateDiagramPlaylistBtnApp.disabled = true; return; } // --- Sankey Diagram Setup --- // MODIFICATION: Removed Math.max(900, ...) to allow full horizontal utilization const containerWidth = sankeyChartDivApp.clientWidth; // Dynamic height based on number of nodes and links to prevent squashing const dynamicHeight = Math.max(800, nodes.length * 50 + links.length * 20); const width = containerWidth - marginApp.left - marginApp.right; const height = dynamicHeight - marginApp.top - marginApp.bottom; sankeyChartDivApp.innerHTML = ''; // MODIFICATION: Clear previous diagram before drawing new one const svg = d3.select(sankeyChartDivApp).append(\"svg\") .attr(\"width\", containerWidth) .attr(\"height\", dynamicHeight) .append(\"g\") .attr(\"transform\", `translate(${marginApp.left},${marginApp.top})`); // MODIFICATION: Reverted nodeAlign to use explicitDepth as per the original fix const sankey = d3.sankey() .nodeId(d = d.name) // Accessor for node ID (artist name) .nodeAlign(function(node) { // Use the 'explicitDepth' property assigned during graph generation // to align nodes to columns. This ensures nodes stay in their // natural depth position, even if they have no outgoing links. return node.explicitDepth; }) .nodeWidth(nodeWidthApp) .nodePadding(nodePaddingVerticalApp) .extent([[0, 5], [width, height - 5]]) // Diagram bounds [[x0, y0], [x1, y1]] .iterations(32); // Number of layout iterations let graph; try { // Compute the Sankey layout. D3 modifies the nodes and links objects in place. // It will also add its own 'depth' property, but our nodeAlign uses 'explicitDepth'. graph = sankey({ nodes: JSON.parse(JSON.stringify(nodes)), // Deep copy to avoid modifying original data links: JSON.parse(JSON.stringify(links)) }); } catch (error) { showErrorApp(`Erro no layout do Sankey: ${error.message}.`); generateDiagramPlaylistBtnApp.disabled = true; return; } if (!graph || !graph.nodes || !graph.links || graph.nodes.length === 0) { showErrorApp('Falha ao gerar o gr√°fico Sankey com os dados processados.'); generateDiagramPlaylistBtnApp.disabled = true; return; } currentGraphNodesApp = graph.nodes; // Store processed nodes for playlist generation generateDiagramPlaylistBtnApp.disabled = false; // Enable playlist button // --- Color Scheme \u0026 Gradients for Links --- const simpleColors = [\"#66c2a5\", \"#fc8d62\", \"#8da0cb\", \"#e78ac3\", \"#a6d854\", \"#ffd92f\", \"#e5c494\", \"#b3b3b3\"]; let maxNodeDepth = 0; // MODIFICATION: Ensure node.explicitDepth is used for color if available graph.nodes.forEach(node = { const depthToUse = typeof node.explicitDepth === 'number' ? node.explicitDepth : node.depth; if (typeof depthToUse !== 'number' || isNaN(depthToUse)) node.depth = 0; // Fallback to 0 if neither is valid if (depthToUse  maxNodeDepth) maxNodeDepth = depthToUse; }); // Color nodes based on their explicit depth (or D3's depth as fallback) const nodeColorFunc = (node) = { const depthToUse = typeof node.explicitDepth === 'number' ? node.explicitDepth : node.depth; if (typeof depthToUse !== 'number' || isNaN(depthToUse)) return \"#cccccc\"; // Fallback color return simpleColors[depthToUse % simpleColors.length]; }; const defs = svg.append(\"defs\"); // Container for SVG definitions (like gradients) // Create a gradient for each link graph.links.forEach((link, i) = { const gradientID = `linkGradient-${i}`; // Unique ID for each gradient const gradient = defs.append(\"linearGradient\") .attr(\"id\", gradientID) .attr(\"gradientUnits\", \"userSpaceOnUse\") // Gradient coordinates relative to the link path .attr(\"x1\", link.source.x1) // Start gradient at the end of the source node .attr(\"x2\", link.target.x0); // End gradient at the start of the target node const sourceColor = nodeColorFunc(link.source); const targetColor = nodeColorFunc(link.target); gradient.append(\"stop\").attr(\"offset\", \"0%\").attr(\"stop-color\", sourceColor); gradient.append(\"stop\").attr(\"offset\", \"100%\").attr(\"stop-color\", targetColor); }); // --- Draw Links --- const linkGroups = svg.append(\"g\") .attr(\"fill\", \"none\") // Links are typically strokes, not fills .selectAll(\"g.sankey-link-group\") .data(graph.links) .join(\"g\") .attr(\"class\", \"sankey-link-group\"); linkGroups.append(\"path\") .attr(\"class\", \"sankey-link\") .attr(\"d\", d3.sankeyLinkHorizontal()) // Path generator for Sankey links .attr(\"stroke\", (d, i) = `url(#${`linkGradient-${i}`.replace(/\\s/g, '-')})`) // Apply gradient .attr(\"stroke-width\", d = Math.max(1, d.width)); // Stroke width based on link value // --- Draw Nodes --- const nodeLinkGroups = svg.append(\"g\") // Group for nodes, wrapped in links .selectAll(\"a.sankey-node-link\") .data(graph.nodes) .join(\"a\") // Each node is a link to the artist's Last.fm page .attr(\"class\", \"sankey-node-link\") .attr(\"xlink:href\", d = d.url) .attr(\"target\", \"_blank\") // Open in new tab .append(\"g\") // Group for rect and text within the link .attr(\"class\", \"sankey-node-group\") .attr(\"transform\", d = `translate(${d.x0},${d.y0})`); // Position node group nodeLinkGroups.append(\"rect\") // The visual node rectangle .attr(\"class\", \"sankey-node\") .attr(\"height\", d = Math.max(0.5, d.y1 - d.y0)) // Node height .attr(\"width\", d = d.x1 - d.x0) // Node width (calculated by Sankey layout) .attr(\"fill\", d = nodeColorFunc(d)); // Color by depth // --- Add Node Labels --- nodeLinkGroups.append(\"text\") .attr(\"class\", \"sankey-node-label\") .each(function(d) { // `each` allows using `this` to refer to the text element const isInitialArtist = d.name === initialArtistName; const text = d3.select(this); const nodeWidth = d.x1 - d.x0; const nodeHeight = d.y1 - d.y0; // MODIFICATION: Adjusted label positioning logic if (isInitialArtist \u0026\u0026 nodeHeight  20) { // Centered for initial artist if tall enough text.attr(\"x\", nodeWidth / 2).attr(\"y\", nodeHeight / 2).attr(\"text-anchor\", \"middle\"); } else if (d.x0 15 ) { // Text to the right for nodes on the far left text.attr(\"x\", nodeWidth + 6).attr(\"y\", nodeHeight / 2).attr(\"text-anchor\", \"start\"); } else if (d.x1  width * 0.85 \u0026\u0026 nodeHeight  15) { // Text to the left for nodes on the far right text.attr(\"x\", -6).attr(\"y\", nodeHeight / 2).attr(\"text-anchor\", \"end\"); } else { // Default: above node, or centered if very thin text.attr(\"x\", nodeWidth / 2).attr(\"y\", nodeHeight d.name) .style(\"display\", d = (d.y1 - d.y0)  10 ? \"inline\" : \"none\"); // Hide label if node is too short sankeyChartContainerApp.style.display = 'block'; // Show the diagram container hideLoadingApp(); } /** * Handles the generation of a playlist from the artists in the current Sankey diagram. * Fetches the top track for each artist and displays them in a modal. */ async function handleGenerateDiagramPlaylistApp() { if (!currentGraphNodesApp || currentGraphNodesApp.length === 0) { showErrorApp(\"Nenhum artista no diagrama para gerar playlist.\"); return; } // Check cache first const currentDiagramSignature = generateDiagramSignatureApp(currentGraphNodesApp); if (cachedPlaylistDataApp \u0026\u0026 cachedDiagramSignatureApp === currentDiagramSignature) { displayPlaylistInModalApp(cachedPlaylistDataApp); return; } // Show loading state in modal playlistModalTitleApp.textContent = `üé∂ Gerando Playlist...`; playlistModalBodyApp.innerHTML = 'Procurando as m√∫sicas mais famosas...\n'; playlistModalOverlayApp.classList.add('active'); generateDiagramPlaylistBtnApp.disabled = true; // Disable button while fetching // Fetch top track for each artist in the diagram const trackPromises = currentGraphNodesApp.map(node = fetchArtistTopTrackAPIApp(node.name)); try { const topTracksResponses = await Promise.all(trackPromises); const validTracks = topTracksResponses.filter(track = track !== null); // Filter out nulls (failed fetches) if (validTracks.length === 0) { throw new Error(\"N√£o foi poss√≠vel encontrar as m√∫sicas mais famosas para os artistas do diagrama.\"); } // Prepare playlist data const tracksForPlaylist = validTracks.map(track = ({ artistName: track.artist.name, trackName: track.name, trackUrl: track.url })); const playlistData = { playlistName: \"Sankey Playlist\", tracks: tracksForPlaylist }; // Cache and display cachedPlaylistDataApp = playlistData; cachedDiagramSignatureApp = currentDiagramSignature; displayPlaylistInModalApp(playlistData); } catch (error) { console.error(\"Erro ao gerar playlist do diagrama:\", error); playlistModalTitleApp.textContent = \"Erro ao Gerar a Playlist\"; playlistModalBodyApp.innerHTML = `${error.message}\n`; } finally { generateDiagramPlaylistBtnApp.disabled = false; // Re-enable button } } /** * Handles the main search functionality when the user clicks \"Buscar\" or presses Enter. * Fetches Sankey data for the entered artist and triggers diagram drawing. */ async function handleSearchApp() { if (!artistInputApp) return; // Should not happen if initialized correctly const artistNameFromInput = artistInputApp.value.trim(); if (!artistNameFromInput) { showErrorApp('Por favor, digite o nome de um artista.'); return; } showLoadingApp(`Procurando por \"${artistNameFromInput}\"...`); if(sankeyChartDivApp) sankeyChartDivApp.innerHTML = ''; // Clear previous diagram currentGraphNodesApp = []; // Reset state if(generateDiagramPlaylistBtnApp) generateDiagramPlaylistBtnApp.disabled = true; cachedPlaylistDataApp = null; // Clear cache cachedDiagramSignatureApp = null; try { const sankeyData = await generateSankeyDataApp(artistNameFromInput, MAX_DEPTH_APP); if (sankeyData \u0026\u0026 sankeyData.nodes \u0026\u0026 sankeyData.nodes.length  0) { drawSankeyD3App(sankeyData); } else { // This case should ideally be caught by generateSankeyDataApp throwing an error // if initialArtistData fails, or by drawSankeyD3App if nodes array is empty after processing. showErrorApp(`Nenhuma informa√ß√£o encontrada para \"${artistNameFromInput}\".`); } } catch (error) { // Catch errors from generateSankeyDataApp (e.g., initial artist not found) showErrorApp(error.message || `Ocorreu um erro ao buscar dados para \"${artistNameFromInput}\".`); } } // --- App Initialization --- // Ensure the script runs only if the main container element exists on the page if (document.getElementById('artist-input-app')) { initializePageApp(); } })();  ","date":1747785600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1747785600,"objectID":"a5c1431637bfb5958da1d428623430c1","permalink":"https://alvarofrancomartins.com/post/sankey/","publishdate":"2025-05-21T00:00:00Z","relpermalink":"/post/sankey/","section":"post","summary":"asdasda.","tags":null,"title":"aasdasda","type":"post"},{"authors":null,"categories":null,"content":"","date":1746921600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1746921600,"objectID":"a59fd817c0a7ae85852685dbd0747a25","permalink":"https://alvarofrancomartins.com/post/buracos-rodovias/","publishdate":"2025-05-11T00:00:00Z","relpermalink":"/post/buracos-rodovias/","section":"post","summary":"","tags":null,"title":"Visualiza√ß√£o Interativa: Buracos em Rodovias do Brasil","type":"post"},{"authors":["Alvaro Franco Martins","Arthur A. B. Pessa","M√¥nica V. prates","Sebastian Gon√ßalves","Cristina Masoller","Matjaz Perc","Haroldo V. Ribeiro"],"categories":null,"content":"","date":1745366400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1745366400,"objectID":"f1c106bc29b4e933b51dbf3f3aeaa7ac","permalink":"https://alvarofrancomartins.com/publication/structural-roles-and-gender-disparities-in-corruption-networks/","publishdate":"2025-04-23T00:00:00Z","relpermalink":"/publication/structural-roles-and-gender-disparities-in-corruption-networks/","section":"publication","summary":"Women are underrepresented in corruption networks in Brazil and Spain, but play similar roles to men except at the top. Gender doesn't affect network resilience, and most differences are explained by their lower presence.","tags":["Corruption Networks","Gender","Network Science","Organized Crime"],"title":"Structural roles and gender disparities in corruption networks","type":"publication"},{"authors":["Alvaro Franco Martins"],"categories":["Data Science","Machine Learning","Estat√≠stica","Educa√ß√£o"],"content":"Descomplicando as m√©tricas de classifica√ß√£o Voc√™ j√° se viu diante do desafio de memorizar todas aquelas m√©tricas de classifica√ß√£o?\n \u0026ldquo;Era sensibilidade que priorizava acertar os positivos ou era especificidade? E a precis√£o\u0026hellip; se refere a qu√™ mesmo?\u0026quot;\n Se voc√™ j√° se fez essas perguntas, n√£o est√° sozinho. Essas m√©tricas s√£o confusas porque muitas vezes s√£o ensinadas apenas com f√≥rmulas matem√°ticas, sem uma compreens√£o visual ou pr√°tica do que realmente significam.\nNeste post, vamos transformar conceitos abstratos em intui√ß√µes visuais. Ao inv√©s de decorar f√≥rmulas, voc√™ vai entender o que cada m√©trica realmente representa e quando deve ser aplicada. Esta postagem inclui simula√ß√µes interativas, assim voc√™ poder√° observar como cada m√©trica se comporta em tempo real.\nO cen√°rio b√°sico: separando positivos e negativos No diagrama apresentado, utilizamos uma representa√ß√£o visual simplificada para facilitar a compreens√£o dos conceitos. O ret√¢ngulo √© dividido em duas se√ß√µes distintas:\n Lado esquerdo: representa casos negativos (exemplos: pessoas sem doen√ßa, transa√ß√£o leg√≠tima, etc\u0026hellip;); Lado direito: representa casos positivos (exemplos: pessoas com doen√ßa, transa√ß√£o fraudulenta, etc\u0026hellip;).       Para entender as m√©tricas de classifica√ß√£o, podemos visualizar o que um modelo est√° fazendo. Considere que nosso modelo (por exemplo, que determina se a pessoa possui ou n√£o determinada doen√ßa) √© representado por um c√≠rculo azul no centro desse ret√¢ngulo. O c√≠rculo, na verdade, √© a fronteira de decis√£o do modelo. Tudo o que est√° dentro deste c√≠rculo o modelo prev√™ que √© positivo. Portanto, tudo que est√° fora dele √© previsto como negativo.\nObservamos claramente que o modelo n√£o √© perfeito1. Ele comete dois tipos de erros:\n Classifica alguns negativos como positivos (dentro do c√≠rculo, √† esquerda); Classifica alguns positivos como negativos (fora do c√≠rculo, √† direita).       As quatro situa√ß√µes fundamentais Esses erros2 e acertos possuem nomes e s√£o representados nas quatro regi√µes da figura ao lado. Suas descri√ß√µes s√£o as seguintes:\n   Sigla Descri√ß√£o     TP Verdadeiro positivo, acerto   FN Falso negativo, erro de omiss√£o, subestima√ß√£o   FP Falso positivo, falso alarme, superestima√ß√£o   TN Verdadeiro negativo, rejei√ß√£o correta      Visualiza√ß√£o Interativa das M√©tricas de Classifica√ß√£o  .simulation_container { max-width: 600px; margin: 0 auto; font-family: Arial, sans-serif; } .visualization { position: relative; width: 400px; height: 400px; margin: 20px auto; border: 2px solid #000; background-color: #ffffff; } .divider { position: absolute; top: 0; left: 50%; width: 2px; height: 100%; background-color: #000; } .circle { position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); width: 65%; height: 65%; border: 3px solid blue; border-radius: 50%; background-color: rgba(0, 0, 255, 0.08); z-index: 1; } .dot { position: absolute; width: 7px; height: 7px; border-radius: 50%; margin: -3.5px 0 0 -3.5px; } .negative { background-color: red; } .positive { background-color: blue; } .label { position: absolute; font-size: 32px; font-weight: bold; z-index: 3; cursor: pointer; padding: 6px 12px; border-radius: 8px; transition: all 0.2s ease; text-shadow: 1px 1px 2px rgba(255, 255, 255, 1); color: #000; background-color: rgba(255, 255, 255, 0.9); border: 2px dashed rgba(0, 0, 0, 0.1); box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1); } .label:hover { transform: scale(1.1); background-color: rgba(255, 255, 255, 1); box-shadow: 0 4px 8px rgba(0, 0, 0, 1); border: 2px dashed rgba(0, 0, 0, 0.7); } /* Posicionamento correto baseado nas posi√ß√µes fornecidas */ .tn-label { top: 7%; left: 10%; color: #000; } .fn-label { top: 7%; right: 10%; color: #000; } .fp-label { bottom: 42%; left: 30%; color: #000; } .tp-label { bottom: 42%; right: 30%; color: #000; } .side-label { position: absolute; font-size: 24px; font-weight: bold; bottom: -40px; text-align: center; width: 45%; } .negative-label { left: 0; color: #ff0000; } .positive-label { right: 0; color: blue; } .info-box { position: absolute; top: 95%; left: 50%; transform: translate(-50%, -50%); background-color: rgba(255, 255, 255, 1); border: 2px solid #333; border-radius: 10px; padding: 7px; width: 100%; max-width: 400px; box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1); z-index: 10; display: none; } .info-title { font-size: 22px; font-weight: bold; margin-bottom: 15px; text-align: center; border-bottom: 1px solid #ddd; padding-bottom: 10px; } .info-description { font-size: 16px; margin-bottom: 15px; line-height: 1.5; white-space: pre-line; } .close-btn { background-color: #4a5568; color: white; border: none; padding: 8px 16px; border-radius: 4px; cursor: pointer; display: block; margin: 0 auto; font-weight: bold; transition: background-color 0.2s; } .close-btn:hover { background-color: #2d3748; } .instructions { text-align: center; margin-bottom: 20px; font-style: italic; color: #555; background-color: #f0f0f0; padding: 12px; border-radius: 8px; border-left: 6px solid #4a5568; font-size: 18px; } /* Responsividade para telas menores */ @media (max-width: 600px) { .visualization { width: 100%; height: 90vw; max-height: 500px; } .label { font-size: 18px; } .side-label { font-size: 18px; } } table { font-size: 1rem !important; width: 100%; } table td, table th { padding: 18px; font-size: 1rem !important; }      TN FN FP TP Negativos Positivos   Fechar     document.addEventListener('DOMContentLoaded', function() { const visualization = document.getElementById('classification-viz'); const infoBox = document.getElementById('info-box'); const infoTitle = document.getElementById('info-title'); const infoDescription = document.getElementById('info-description'); const closeBtn = document.getElementById('close-btn'); const circle = document.querySelector('.circle'); // Dados para cada quadrante - defini√ß√µes precisas const quadrantInfo = { tn: { title: 'TN - Verdadeiro Negativo', description: 'O modelo classificou como NEGATIVO, e realmente era NEGATIVO.\\n\\nEstes s√£o os pontos vermelhos (negativos) que est√£o FORA do c√≠rculo (classificados como negativos pelo modelo).' }, fn: { title: 'FN - Falso Negativo', description: 'O modelo classificou como NEGATIVO, mas na verdade era POSITIVO.\\n\\nEstes s√£o os pontos azuis (positivos) que est√£o FORA do c√≠rculo (classificados como negativos pelo modelo).' }, fp: { title: 'FP - Falso Positivo', description: 'O modelo classificou como POSITIVO, mas na verdade era NEGATIVO.\\n\\nEstes s√£o os pontos vermelhos (negativos) que est√£o DENTRO do c√≠rculo (classificados como positivos pelo modelo).' }, tp: { title: 'TP - Verdadeiro Positivo', description: 'O modelo classificou como POSITIVO, e realmente era POSITIVO.\\n\\nEstes s√£o os pontos azuis (positivos) que est√£o DENTRO do c√≠rculo (classificados como positivos pelo modelo).' } }; // Obter as dimens√µes do c√≠rculo e √°rea de visualiza√ß√£o function getCircleProperties() { const rect = circle.getBoundingClientRect(); const vizRect = visualization.getBoundingClientRect(); const centerX = rect.width / 2; const centerY = rect.height / 2; const radius = rect.width / 2; return { centerX, centerY, radius, vizWidth: vizRect.width, vizHeight: vizRect.height }; } // Verificar se um ponto est√° dentro do c√≠rculo function isInsideCircle(x, y) { const rect = circle.getBoundingClientRect(); const vizRect = visualization.getBoundingClientRect(); const circleX = rect.left + rect.width / 2 - vizRect.left; const circleY = rect.top + rect.height / 2 - vizRect.top; const radius = rect.width / 2; const dx = x - circleX; const dy = y - circleY; return dx * dx + dy * dy dot.remove()); const { vizWidth, vizHeight } = getCircleProperties(); const midX = vizWidth / 2; // Gerar novos pontos for (let i = 0; i = 250; dot.classList.add(isPositive ? 'positive' : 'negative'); // Posicionar os pontos respeitando a divis√£o central let x, y; if (isPositive) { // Pontos positivos (lado direito) x = Math.random() * (vizWidth / 2 - 10) + midX + 5; // 5px de margem da linha central } else { // Pontos negativos (lado esquerdo) x = Math.random() * (vizWidth / 2 - 10) + 5; // 5px de margem da borda } y = Math.random() * (vizHeight - 10) + 5; // 5px de margem da borda superior e inferior // Melhor distribui√ß√£o para TN, FP, FN, TP const insideCircle = isInsideCircle(x, y); // Queremos uma distribui√ß√£o de pontos que seja consistente com a visualiza√ß√£o // Se for FP (negativo dentro do c√≠rculo) ou FN (positivo fora do c√≠rculo) // reduzimos a probabilidade para ter mais TP e TN if ((!isPositive \u0026\u0026 insideCircle) || (isPositive \u0026\u0026 !insideCircle)) { if (Math.random()  0.6) { // Tentar novamente para obter mais TP e TN i--; continue; } } dot.style.left = x + 'px'; dot.style.top = y + 'px'; visualization.appendChild(dot); } } // Mostrar informa√ß√µes quando um r√≥tulo √© clicado const labels = document.querySelectorAll('.label'); labels.forEach(label = { label.addEventListener('click', function() { const type = this.getAttribute('data-type'); const info = quadrantInfo[type]; infoTitle.textContent = info.title; infoDescription.textContent = info.description; infoBox.style.display = 'block'; // Destacar o r√≥tulo clicado labels.forEach(l = l.style.backgroundColor = ''); this.style.backgroundColor = 'rgba(255, 255, 255, 0.8)'; }); }); // Fechar a caixa de informa√ß√µes closeBtn.addEventListener('click', function() { infoBox.style.display = 'none'; // Remover destaque de todos os r√≥tulos labels.forEach(l = l.style.backgroundColor = ''); }); // Fechar a caixa quando clicar fora dela visualization.addEventListener('click', function(e) { if (e.target === visualization || e.target === document.querySelector('.circle') || e.target === document.querySelector('.divider')) { infoBox.style.display = 'none'; // Remover destaque de todos os r√≥tulos labels.forEach(l = l.style.backgroundColor = ''); } }); // Inicializar a visualiza√ß√£o window.addEventListener('resize', generateDots); generateDots(); });    No painel acima, clique em cada r√≥tulo (TN, FP, FN, TP) para aprender mais sobre as quatro situa√ß√µes fundamentais.    Com base nessas quatro situa√ß√µes, podemos calcular m√©tricas que nos ajudam a avaliar o desempenho de um modelo.\nEntendendo Cada M√©trica Visualmente 1. Sensibilidade (Recall ou TPR) Pergunta-chave: \u0026ldquo;De todos os casos realmente positivos, quantos o modelo classificou como positivos?\u0026quot;\n$$\\text{Sensibilidade} = \\frac{TP}{TP + FN}$$  A sensibilidade indica quanto do lado direito foi coberto pelo c√≠rculo ‚Äî ou seja, a propor√ß√£o entre a parte azul dentro do c√≠rculo (TP) e todo o lado direito (TP + FN). O foco da sensibilidade √© n√£o deixar passar casos positivos.\n     2. Taxa de Falsos Negativos (FNR) Pergunta-chave: \u0026ldquo;De todos os casos realmente positivos, quantos o modelo classificou como negativos?\u0026quot;\n$$\\text{FNR} = \\frac{FN}{TP + FN} = 1 - \\text{Sensibilidade}$$  √â a propor√ß√£o entre o que o c√≠rculo n√£o cobriu do lado direito (FN) em rela√ß√£o ao lado direito inteiro (TP + FN).\n     3. Especificidade (TNR) Pergunta-chave: \u0026ldquo;De todos os casos realmente negativos, quantos o modelo classificou como negativos?\u0026quot;\n$$\\text{Especificidade} = \\frac{TN}{TN + FP}$$  A especificidade representa a propor√ß√£o do lado esquerdo que o c√≠rculo n√£o cobriu (TN) em rela√ß√£o ao lado esquerdo inteiro (TN + FP).\n     4. Taxa de Falsos Positivos (FPR) Pergunta-chave: \u0026ldquo;De todos os casos realmente negativos, quantos o modelo classificou como positivos?\u0026quot;\n$$\\text{FPR} = \\frac{FP}{TN + FP} = 1 - \\text{Especificidade}$$  √â a propor√ß√£o entre o que o c√≠rculo cobriu do lado esquerdo (FP) e o lado esquerdo inteiro (TN + FP). √â o complemento da especificidade.\n     5. Precis√£o (Precision ou PPV) Pergunta-chave: \u0026ldquo;Quando o modelo diz \u0026lsquo;positivo\u0026rsquo;, com que frequ√™ncia ele est√° correto?\u0026quot;\n$$\\text{Precis√£o} = \\frac{TP}{TP + FP}$$  Considerando a regi√£o interna do c√≠rculo (tudo o que o modelo classificou como positivo), a precis√£o representa a propor√ß√£o da √°rea √† direita (TP) em rela√ß√£o √† √°rea total do c√≠rculo (TP + FP). O foco da precis√£o √© n√£o dar falsos alarmes.\n     6. Acur√°cia Pergunta-chave: \u0026ldquo;Qual a porcentagem total de previs√µes corretas?\u0026quot;\n$$\\text{Acur√°cia} = \\frac{TP + TN}{TP + TN + FP + FN}$$  A acur√°cia representa a propor√ß√£o da √°rea coberta pelo c√≠rculo √† direita (TP) mais a √°rea n√£o coberta pelo c√≠rculo √† esquerda (TN) em rela√ß√£o √† √°rea total.\n     Simula√ß√µes interativas Para realmente compreender esses conceitos, nada melhor que ver como eles se comportam em tempo real.\nM√©tricas de classifica√ß√£o A simula√ß√£o abaixo ilustra interativamente os conceitos fundamentais de m√©tricas de classifica√ß√£o. Pontos s√£o uniformemente e aleatoriamente gerados, separados igualmente entre as classes positiva (direita) e negativa (esquerda). Voc√™ pode alterar o tamanho do c√≠culo, bem como mov√™-lo e assim observar como se comportam as m√©tricas discutidas acima.\n    .simulation-container { max-width: 1200px; } /* Novo cont√™iner flex√≠vel para layout lado a lado */ .flex-container { display: flex; flex-direction: row; flex-wrap: wrap; } .visualization-area { flex: 3; min-width: 300px; } .metrics-area { flex: 2; min-width: 300px; display: flex; flex-direction: column; justify-content: flex-start; } .control-panel { width: 100%; max-width: 800px; /* Match visualization area width */ margin: 0 auto 20px; /* Center horizontally with bottom margin */ justify-content: flex-start; /* Left-align slider */ } /* Improved Slider Styles */ .slider-container { display: flex; align-items: center; gap: 10px; flex-wrap: wrap; margin-bottom: 10px; position: relative; width: 100%; max-width: 350px; } .slider-container label { font-weight: bold; min-width: 100px; color: #333; margin-bottom: 8px; } .range-slider { width: 100%; position: relative; } .range-slider-track { height: 8px; width: 100%; background-color: #ddd; border-radius: 4px; position: relative; } .range-slider-fill { height: 100%; background-color: #3b82f6; border-radius: 4px; position: absolute; top: 0; left: 0; pointer-events: none; transition: width 0.1s ease; } input[type=\"range\"] { -webkit-appearance: none; appearance: none; width: 100%; height: 8px; background: transparent; position: absolute; top: 0; left: 0; margin: 0; z-index: 10; } input[type=\"range\"]::-webkit-slider-thumb { -webkit-appearance: none; appearance: none; width: 22px; height: 22px; background: #3b82f6; border-radius: 50%; cursor: pointer; border: 2px solid white; box-shadow: 0 2px 4px rgba(0,0,0,0.2); transition: all 0.2s ease; } input[type=\"range\"]::-webkit-slider-thumb:hover { background: #2563eb; transform: scale(1.1); } input[type=\"range\"]::-moz-range-thumb { width: 22px; height: 22px; background: #3b82f6; border-radius: 50%; cursor: pointer; border: 2px solid white; box-shadow: 0 2px 4px rgba(0,0,0,0.2); transition: all 0.2s ease; } input[type=\"range\"]::-moz-range-thumb:hover { background: #2563eb; transform: scale(1.1); } .slider-value { min-width: 50px; text-align: center; font-weight: bold; color: #3b82f6; background-color: #f0f4ff; padding: 4px 8px; border-radius: 12px; margin-left: 10px; border: 1px solid #d1d5db; } .canvas-container { position: relative; width: 100%; padding-bottom: 70%; /* Ajustado para uma propor√ß√£o diferente */ border: 0px solid black; overflow: hidden; background-color: white; margin-bottom: 10px; } #canvas { position: absolute; top: 0; left: 0; width: 100%; height: 100%; cursor: move; } .quadrant-label { position: absolute; /* font-weight: bold;*/ font-size: 17px; text-align: center; color: #fff; background-color: rgba(0, 0, 0, 1); padding: 1px 5px; border-radius: 10px; z-index: 10; pointer-events: none; transition: all 0.3s ease; } .metrics-container { display: flex; flex-direction: column; gap: 15px; height: 100%; } .metric-buttons { display: flex; flex-wrap: wrap; gap: 10px; justify-content: center; } .metric-btn { padding: 8px 12px; font-size: 24px; cursor: pointer; background-color: #f8f8f8; border: 1px solid #ccc; border-radius: 6px; font-weight: bold; text-align: center; line-height: 1.2; } .metric-btn.active { background-color: #e6f0ff; border-color: #99c2ff; } /* Updated Metric Display Styles */ .metric-display { min-height: 0px; max-height: 440px; flex-grow: 1; display: flex; flex-direction: column; overflow: hidden; align-items: center; justify-content: flex-start; padding-top: 20px; } .metric-title { margin-bottom: 0; font-size: 30px; color: #000; text-align: center; } .metric-formula { font-size: 30px; text-align: center; flex-grow: 1; display: flex; flex-direction: column; align-items: center; justify-content: flex-start; max-width: 100%; overflow: auto; margin-bottom: 0px; margin-top: 0px; overflow: hidden; /* Remove scrollbar */ } .metric-formula .equation { font-size: 22px; margin-bottom: 10px; } .metric-formula .result { font-size: 20px; color: #007bff; font-weight: bold; } .instruction { text-align: center; margin: 10px 0; color: #666; font-style: italic; } /* Responsividade para telas menores */ @media (max-width: 768px) { .flex-container { flex-direction: column; } .visualization-area, .metrics-area { width: 100%; } .metric-btn { padding: 10px 15px; font-size: 16px; } .canvas-container { padding-bottom: 60%; } } table { max-width: 100%; overflow-x: hidden; table-layout: fixed; }    Raio do c√≠rculo       False\nPositives True\nPositives True\nNegatives False\nNegatives  Negatives Positives   Recall\nSensitivity FPR Specificity FNR Precision Accuracy F1 Score  Recall/Sensitivity (TPR): Recall = TP/(TP + FN) = 0/0 = 0       // DOM Elements const canvas = document.getElementById('canvas'); const ctx = canvas.getContext('2d'); const circleSizeSlider = document.getElementById('circleSize'); const circleSizeFill = document.getElementById('circleSizeFill'); // Quadrant labels const quadrantLabels = [ document.getElementById('quadrant0'), document.getElementById('quadrant1'), document.getElementById('quadrant2'), document.getElementById('quadrant3') ]; // Metric buttons const btnRecall = document.getElementById('btnRecall'); const btnFPR = document.getElementById('btnFPR'); const btnSpecificity = document.getElementById('btnSpecificity'); const btnFNR = document.getElementById('btnFNR'); const btnPrecision = document.getElementById('btnPrecision'); const btnAccuracy = document.getElementById('btnAccuracy'); const btnF1 = document.getElementById('btnF1'); // Metric displays const metricTitle = document.getElementById('metricTitle'); const metricFormula = document.getElementById('metricFormula'); // Variables let isDragging = false; let truePositives = 0; let falsePositives = 0; let trueNegatives = 0; let falseNegatives = 0; let totalPoints = 0; let points = []; let currentMetric = 'recall'; // Circle properties let circleRadius; let centerX; let centerY; let circleCenter = { x: 0.5, y: 0.5 }; // Normalized position (0-1) let circleSizePercent = 30; // Percentage of min dimension let dragStartPos = { x: 0, y: 0 }; let dragStartCenter = { x: 0, y: 0 }; // Update slider fill function updateSliderFill() { const percent = (circleSizeSlider.value - circleSizeSlider.min) / (circleSizeSlider.max - circleSizeSlider.min) * 100; circleSizeFill.style.width = percent + '%'; } // Initial slider fill update updateSliderFill(); // Update slider values circleSizeSlider.addEventListener('input', function() { circleSizePercent = parseInt(this.value); updateSliderFill(); calculateDimensions(); redrawCanvas(); recalculateMetrics(); updateLabels(); }); // Resize canvas to fit container function resizeCanvas() { const container = canvas.parentElement; canvas.width = container.clientWidth; canvas.height = container.clientHeight; calculateDimensions(); redrawCanvas(); updateLabels(); } // Calculate circle dimensions based on canvas size and current settings function calculateDimensions() { centerX = canvas.width * circleCenter.x; centerY = canvas.height * circleCenter.y; const minDimension = Math.min(canvas.width, canvas.height); circleRadius = minDimension * (circleSizePercent / 100); } // Generate points once at startup function generatePoints(count) { points = []; // Generate half the points on the left side and half on the right for (let i = 0; i { const isRight = point.x = canvas.width / 2; const isPredictedPositive = isInsideCircle(point.x, point.y); if (isRight \u0026\u0026 isPredictedPositive) truePositives++; else if (!isRight \u0026\u0026 isPredictedPositive) falsePositives++; else if (!isRight \u0026\u0026 !isPredictedPositive) trueNegatives++; else if (isRight \u0026\u0026 !isPredictedPositive) falseNegatives++; }); totalPoints = points.length; // Update the current metric display updateMetricDisplay(); } // Redraw canvas with all points and current circle position function redrawCanvas() { ctx.clearRect(0, 0, canvas.width, canvas.height); drawPoints(); drawBase(); } // Update quadrant labels dynamically based on circle position function updateLabels() { // Get vertical dividing line position const midX = canvas.width / 2; // Check if circle overlaps with left or right half const leftEdge = centerX - circleRadius; const rightEdge = centerX + circleRadius; const overlapsLeft = leftEdge midX; // Padding to ensure labels stay within canvas const padding = 20; const labelWidth = 70; const labelHeight = 40; // Label safety margin (extra distance from circle) const safetyMargin = 15; // 1. False Positives (inside circle, left side) if (overlapsLeft \u0026\u0026 circleRadius  1) { // Position inside circle on left side const fpX = Math.max(padding, Math.min(midX - labelWidth - padding, centerX - 10)); const fpY = centerY; quadrantLabels[0].style.display = 'block'; quadrantLabels[0].style.left = fpX + 'px'; quadrantLabels[0].style.top = fpY + 'px'; quadrantLabels[0].style.right = 'auto'; quadrantLabels[0].innerHTML = \"False\nPositives\"; quadrantLabels[0].style.backgroundColor = 'rgba(0, 0, 0, 1)'; } else { quadrantLabels[0].style.display = 'none'; } // 2. True Positives (inside circle, right side) if (overlapsRight \u0026\u0026 circleRadius  1) { // Position inside circle on right side const tpX = Math.min(canvas.width - labelWidth - padding, Math.max(midX + padding, centerX + 10)); const tpY = centerY; quadrantLabels[1].style.display = 'block'; quadrantLabels[1].style.left = tpX + 'px'; quadrantLabels[1].style.top = tpY + 'px'; quadrantLabels[1].style.right = 'auto'; quadrantLabels[1].innerHTML = \"True\nPositives\"; quadrantLabels[1].style.backgroundColor = 'rgba(0, 0, 0, 1)'; } else { quadrantLabels[1].style.display = 'none'; } // 3. True Negatives (outside circle, left side) let tnX, tnY; // Try different positions for True Negatives to ensure it's outside the circle // Option 1: Far top left let tnPosition1 = { x: padding, y: padding }; // Option 2: Far bottom left let tnPosition2 = { x: padding, y: canvas.height - labelHeight - padding }; // Option 3: Default position but adjusted let tnPosition3 = { x: Math.min(midX / 2, leftEdge - labelWidth - safetyMargin), y: canvas.height * 0.2 }; // Check which position is furthest from circle let tnDistances = [ distanceToCircle(tnPosition1.x, tnPosition1.y), distanceToCircle(tnPosition2.x, tnPosition2.y), distanceToCircle(tnPosition3.x, tnPosition3.y) ]; // Select the position with the maximum distance from circle let tnMaxDistanceIndex = tnDistances.indexOf(Math.max(...tnDistances)); if (tnMaxDistanceIndex === 0) { tnX = tnPosition1.x; tnY = tnPosition1.y; } else if (tnMaxDistanceIndex === 1) { tnX = tnPosition2.x; tnY = tnPosition2.y; } else { tnX = tnPosition3.x; tnY = tnPosition3.y; } // Ensure it's within bounds and outside the circle tnX = Math.max(padding, Math.min(midX - labelWidth - padding, tnX))-15; tnY = Math.max(padding, Math.min(canvas.height - labelHeight - padding, tnY)); // Additional check to ensure the label is outside the circle while (isInsideCircle(tnX + labelWidth / 2, tnY + labelHeight / 2)) { tnX -= 10; // Move left tnY -= 10; // Move up } quadrantLabels[2].style.display = 'block'; quadrantLabels[2].style.left = tnX + 'px'; quadrantLabels[2].style.top = tnY + 'px'; quadrantLabels[2].style.right = 'auto'; quadrantLabels[2].innerHTML = \"True\nNegatives\"; quadrantLabels[2].style.backgroundColor = 'rgba(0, 0, 0, 1)'; // 4. False Negatives (outside circle, right side) let fnX, fnY; // Try different positions for False Negatives to ensure it's outside the circle // Option 1: Far top right let fnPosition1 = { x: canvas.width - labelWidth - padding, y: padding }; // Option 2: Far bottom right let fnPosition2 = { x: canvas.width - labelWidth - padding, y: canvas.height - labelHeight - padding }; // Option 3: Default position but adjusted let fnPosition3 = { x: Math.max(midX + (canvas.width - midX) / 2, rightEdge + safetyMargin), y: canvas.height * 0.2}; // Check which position is furthest from circle let fnDistances = [ distanceToCircle(fnPosition1.x, fnPosition1.y), distanceToCircle(fnPosition2.x, fnPosition2.y), distanceToCircle(fnPosition3.x, fnPosition3.y) ]; // Select the position with the maximum distance from circle let fnMaxDistanceIndex = fnDistances.indexOf(Math.max(...fnDistances)); if (fnMaxDistanceIndex === 0) { fnX = fnPosition1.x; fnY = fnPosition1.y; } else if (fnMaxDistanceIndex === 1) { fnX = fnPosition2.x; fnY = fnPosition2.y; } else { fnX = fnPosition3.x; fnY = fnPosition3.y; } // Ensure it's within bounds and outside the circle fnX = Math.max(midX + padding, Math.min(canvas.width - labelWidth - padding, fnX)); fnY = Math.max(padding, Math.min(canvas.height - labelHeight - padding, fnY)); // Additional check to ensure the label is outside the circle while (isInsideCircle(fnX + labelWidth / 2, fnY + labelHeight / 2)) { fnX += 10; // Move right fnY -= 10; // Move up } quadrantLabels[3].style.display = 'block'; quadrantLabels[3].style.left = fnX + 'px'; quadrantLabels[3].style.top = fnY + 'px'; quadrantLabels[3].style.right = 'auto'; quadrantLabels[3].innerHTML = \"False\nNegatives\"; quadrantLabels[3].style.backgroundColor = 'rgba(0, 0, 0,1)'; } // Calculate distance from a point to the circle function distanceToCircle(x, y) { const dx = x - centerX; const dy = y - centerY; const distance = Math.sqrt(dx * dx + dy * dy); return Math.max(0, distance - circleRadius); } // Draw base canvas with vertical line and circle function drawBase() { // Draw dividing line ctx.beginPath(); ctx.moveTo(canvas.width / 2, 0); ctx.lineTo(canvas.width / 2, canvas.height); ctx.strokeStyle = 'black'; ctx.lineWidth = 2; ctx.stroke(); // Draw circle ctx.beginPath(); ctx.arc(centerX, centerY, circleRadius, 0, Math.PI * 2); ctx.fillStyle = 'rgba(0, 0, 255, 0.15)'; ctx.fill(); ctx.strokeStyle = 'dark'; ctx.lineWidth = 3; ctx.stroke(); // Draw border ctx.strokeStyle = '#ddd'; ctx.lineWidth = 2; ctx.strokeRect(0, 0, canvas.width, canvas.height); // Add coordinate text ctx.fillStyle = 'rgba(0, 0, 0, 0.7)'; ctx.font = '12px Arial'; // ctx.fillText(`Center: (${Math.round(circleCenter.x * 100)}%, ${Math.round(circleCenter.y * 100)}%)`, 10, 20); } // Draw all points function drawPoints() { ctx.save(); points.forEach(point = { const isRight = point.x = canvas.width / 2; // Choose color based on actual class (left/right side) if (isRight) { ctx.fillStyle = 'blue'; // Actual Positive (right side) } else { ctx.fillStyle = 'red'; // Actual Negative (left side) } ctx.beginPath(); ctx.arc(point.x, point.y, 3, 0, Math.PI * 2); ctx.fill(); }); ctx.restore(); } // Check if a point is inside the classification circle function isInsideCircle(x, y) { const dx = x - centerX; const dy = y - centerY; return (dx * dx + dy * dy) { btn.classList.remove('active'); }); selectedButton.classList.add('active'); } btnRecall.addEventListener('click', function() { currentMetric = 'recall'; updateButtonStyles(btnRecall); metricTitle.textContent = 'Recall/Sensitivity (TPR):'; updateMetricDisplay(); }); btnFPR.addEventListener('click', function() { currentMetric = 'fpr'; updateButtonStyles(btnFPR); metricTitle.textContent = 'False Positive Rate (FPR):'; updateMetricDisplay(); }); btnSpecificity.addEventListener('click', function() { currentMetric = 'specificity'; updateButtonStyles(btnSpecificity); metricTitle.textContent = 'Specificity (TNR):'; updateMetricDisplay(); }); btnFNR.addEventListener('click', function() { currentMetric = 'fnr'; updateButtonStyles(btnFNR); metricTitle.textContent = 'False Negative Rate (FNR):'; updateMetricDisplay(); }); btnPrecision.addEventListener('click', function() { currentMetric = 'precision'; updateButtonStyles(btnPrecision); metricTitle.textContent = 'Precision (PPV):'; updateMetricDisplay(); }); btnAccuracy.addEventListener('click', function() { currentMetric = 'accuracy'; updateButtonStyles(btnAccuracy); metricTitle.textContent = 'Accuracy (ACC):'; updateMetricDisplay(); }); btnF1.addEventListener('click', function() { currentMetric = 'f1'; updateButtonStyles(btnF1); metricTitle.textContent = 'F1 Score:'; updateMetricDisplay(); }); } // Mouse events for dragging the circle function setupDragEvents() { canvas.addEventListener('mousedown', function(e) { const rect = canvas.getBoundingClientRect(); const mouseX = e.clientX - rect.left; const mouseY = e.clientY - rect.top; // Check if click is near the circle center const dx = mouseX - centerX; const dy = mouseY - centerY; const distance = Math.sqrt(dx * dx + dy * dy); if (distance   Ao interagir com a simula√ß√£o3, voc√™ poder√° observar alguns casos interessantes:\n Precis√£o 50%: Ocorre quando o c√≠rculo est√° exatamente no centro. Baixo recall mas precis√£o de 100%: Um c√≠rculo pequeno est√° inteiramente no lado direito. Recall m√°ximo com FPR m√°ximo: O c√≠rculo cobre toda a √°rea de simula√ß√£o, e portanto o modelo classifica tudo como positivo. Obtemos apenas TP e FP; recall m√°ximo, FPR m√°ximo e nenhuma especificidade. Sem recall nem precis√£o: Se reduzirmos o tamanho do c√≠rculo a zero, o modelo classificar√° tudo como negativo, resultando em aus√™ncia de recall, precis√£o e FPR. Mesmo assim, temos uma acur√°cia de 50% e especificidade de 100%. O cen√°rio ideal: Um grande c√≠rculo que tenta cobrir todo o lado direito e, ao mesmo tempo, possuir a menor √°rea poss√≠vel no lado esquerdo.  Essa visualiza√ß√£o interativa √© √∫til porque permite relacionar conceitos abstratos com representa√ß√µes visuais concretas. Por exemplo, quando algu√©m diz que ‚Äúo modelo tem alta precis√£o, mas baixo recall‚Äù, voc√™ pode visualizar isso como um c√≠rculo pequeno, posicionado quase totalmente no lado direito. J√° no caso de ‚Äúalta especificidade, mas baixa sensibilidade‚Äù, uma poss√≠vel representa√ß√£o seria um c√≠rculo centralizado, dividido igualmente entre os dois lados.\nEntendendo a curva ROC Modelos de classifica√ß√£o, como a regress√£o log√≠stica, geralmente n√£o retornam apenas uma resposta bin√°ria (sim/n√£o), mas sim uma probabilidade associada a cada classe. Ou seja, ao inv√©s de dizer diretamente \u0026ldquo;positivo\u0026rdquo; ou \u0026ldquo;negativo\u0026rdquo;, o modelo indica qu√£o confiante est√° de que determinada observa√ß√£o pertence √† classe positiva ‚Äî atribuindo um valor entre 0 e 1.\nPara transformar essa probabilidade em uma decis√£o bin√°ria, √© necess√°rio definir um limiar (threshold). Por exemplo: se a probabilidade for maior que 0,5, classificamos como positivo; caso contr√°rio, como negativo. Mas o que acontece se alterarmos esse valor de 0,5? Como o desempenho do modelo muda com diferentes limiares? √â justamente a√≠ que entra a curva ROC4. Em vez de avaliar o modelo com base em um √∫nico ponto de corte, a curva ROC mostra como o modelo equilibra acertos e erros √† medida que o limiar varia. Para constru√≠-la, plotamos TPR (eixo y) versus FPR (eixo x) para todos os limiares de 0 a 1.\nO cen√°rio baseline Para entender melhor a curva ROC, vamos considerar a simula√ß√£o anterior mas com um c√≠rculo est√°tico que cresce exatamente do centro. Uma vez que os pontos est√£o uniformemente distribuidos no plano, para qualquer limiar, o modelo classifica corretamente os positivos (TPR) na mesma propor√ß√£o que classifica incorretamente os negativos (FPR).\nQuando plotamos a curva ROC para este modelo, obtemos uma reta diagonal do tipo $y = x$. Em outras palavras, se o modelo identifica 60% dos positivos corretamente, ele tamb√©m classifica erroneamente 60% dos negativos como positivos. Varie o tamanho do c√≠rculo na simula√ß√£o abaixo para observar esse comportamento.\n    // Ensure KaTeX is fully loaded before page initialization document.addEventListener('DOMContentLoaded', function() { if (typeof katex !== 'undefined') { console.log(\"KaTeX loaded successfully\"); } else { console.error(\"KaTeX failed to load\"); } });   .roc_simulation-container { max-width: 1200px; margin: 0 auto; } .roc_control-panel { width: 100%; max-width: 80%; margin: 0 auto 20px; } .roc_slider-container { display: flex; align-items: center; gap: 10px; flex-wrap: wrap; margin-bottom: 10px; position: relative; width: 100%; max-width: 350px; } .roc_slider-container label { font-weight: bold; min-width: 100px; color: #333; margin-bottom: 1px; } .roc_range-slider { width: 100%; position: relative; } .roc_range-slider-track { height: 8px; width: 100%; background-color: #ddd; border-radius: 4px; position: relative; } .roc_range-slider-fill { height: 100%; background-color: #3b82f6; border-radius: 4px; position: absolute; top: 0; left: 0; pointer-events: none; transition: width 0.1s ease; } input[type=\"range\"] { -webkit-appearance: none; appearance: none; width: 100%; height: 8px; background: transparent; position: absolute; top: 0; left: 0; margin: 0; z-index: 10; } input[type=\"range\"]::-webkit-slider-thumb { -webkit-appearance: none; appearance: none; width: 22px; height: 22px; background: #3b82f6; border-radius: 50%; cursor: pointer; border: 2px solid white; box-shadow: 0 2px 4px rgba(0,0,0,0.2); transition: all 0.2s ease; } input[type=\"range\"]::-webkit-slider-thumb:hover { background: #2563eb; transform: scale(1.1); } input[type=\"range\"]::-moz-range-thumb { width: 22px; height: 22px; background: #3b82f6; border-radius: 50%; cursor: pointer; border: 2px solid white; box-shadow: 0 2px 4px rgba(0,0,0,0.2); transition: all 0.2s ease; } input[type=\"range\"]::-moz-range-thumb:hover { background: #2563eb; transform: scale(1.1); } .roc_slider-value { min-width: 50px; text-align: center; font-weight: bold; color: #3b82f6; background-color: #f0f4ff; padding: 4px 8px; border-radius: 12px; margin-left: 10px; border: 1px solid #d1d5db; } .roc_flex-container { display: flex; flex-direction: row; flex-wrap: wrap; gap: 3%; /* Increased from 20px */ } .roc_visualization-area { flex: 1; min-width: 300px; } .roc_roc-area { flex: 1; min-width: 300px; } .roc_canvas-container { position: relative; width: 100%; padding-bottom: 85%; border: 1px solid #ddd; overflow: hidden; background-color: white; } #roc_canvas, #roc_rocCanvas { position: absolute; top: 0; left: 0; width: 100%; height: 100%; cursor: move; } .roc_quadrant-label { position: absolute; white-space: nowrap; font-size: 17px; text-align: center; color: #fff; background-color: rgba(0, 0, 0, 1); padding: 1px 5px; border-radius: 10px; z-index: 10; pointer-events: none; transition: all 0.3s ease; } .roc_metrics-display { margin-top: 20px; padding: 15px; border: 1px solid #ddd; border-radius: 8px; background-color: #f8f9fa; } .roc_metrics-title { font-size: 18px; font-weight: bold; margin-bottom: 15px; color: #333; text-align: center; } .roc_metrics-grid { display: grid; grid-template-columns: 1fr 1fr; gap: 20px; } .roc_metric-card { background-color: white; border: 1px solid #ddd; border-radius: 8px; padding: 15px; } .roc_metric-name { font-weight: bold; font-size: 16px; margin-bottom: 10px; color: #333; } .roc_metric-formula { text-align: center; min-height: 80px; display: flex; align-items: center; justify-content: center; } .roc_metric-value { text-align: center; font-weight: bold; font-size: 18px; color: #3b82f6; margin-top: 10px; } @media (max-width: 768px) { .roc_flex-container { flex-direction: column; } .roc_metrics-grid { grid-template-columns: 1fr; } }    Tamanho do c√≠rculo       False\nPositives True\nPositives True\nNegatives False\nNegatives  Negatives Positives   1.0 TPR    0.0 FPR 1.0    TPR (True Positive Rate) Loading... = 0.000  FPR (False Positive Rate) Loading... = 0.000        // Wait for all resources to load, including KaTeX window.addEventListener('load', function() { // Initialize simulation roc_init(); }); function roc_init() { // DOM Elements const roc_canvas = document.getElementById('roc_canvas'); const roc_ctx = roc_canvas.getContext('2d'); const roc_rocCanvas = document.getElementById('roc_rocCanvas'); const roc_rocCtx = roc_rocCanvas.getContext('2d'); const roc_circleSizeSlider = document.getElementById('roc_circleSize'); const roc_circleSizeFill = document.getElementById('roc_circleSizeFill'); const roc_sizeValue = document.getElementById('roc_sizeValue'); // Quadrant labels const roc_quadrantLabels = [ document.getElementById('roc_quadrant0'), document.getElementById('roc_quadrant1'), document.getElementById('roc_quadrant2'), document.getElementById('roc_quadrant3') ]; // Metric displays const roc_tprFormula = document.getElementById('roc_tprFormula'); const roc_tprValue = document.getElementById('roc_tprValue'); const roc_fprFormula = document.getElementById('roc_fprFormula'); const roc_fprValue = document.getElementById('roc_fprValue'); // Variables let roc_isDragging = false; let roc_truePositives = 0; let roc_falsePositives = 0; let roc_trueNegatives = 0; let roc_falseNegatives = 0; let roc_totalPoints = 0; let roc_points = []; let roc_rocPoints = []; let roc_currentSize = 0; // Track current circle size // Circle properties let roc_circleRadius; let roc_centerX; let roc_centerY; let roc_circleCenter = { x: 0.5, y: 0.5 }; // Normalized position (0-1) let roc_circleSizePercent = 0; // Percentage of min dimension let roc_dragStartPos = { x: 0, y: 0 }; let roc_dragStartCenter = { x: 0, y: 0 }; // Update slider fill function roc_updateSliderFill() { const percent = (roc_circleSizeSlider.value - roc_circleSizeSlider.min) / (roc_circleSizeSlider.max - roc_circleSizeSlider.min) * 100; roc_circleSizeFill.style.width = percent + '%'; } // Initial slider fill update roc_updateSliderFill(); // Setup slider events for changing circle size only function roc_setupSliderEvents() { // Update slider fill and add event listener roc_updateSliderFill(); roc_circleSizeSlider.addEventListener('input', function() { // Store previous and current size for ROC curve updating const prevSize = roc_circleSizePercent; roc_circleSizePercent = parseInt(this.value); roc_currentSize = roc_circleSizePercent; roc_updateSliderFill(); roc_calculateDimensions(); roc_redrawCanvas(); roc_recalculateMetrics(); roc_updateLabels(); // Update ROC curve based on whether size increased or decreased if (roc_circleSizePercent  prevSize) { roc_addROCPoint(); } else if (roc_circleSizePercent { const isRight = point.x = roc_canvas.width / 2; const isPredictedPositive = roc_isInsideCircle(point.x, point.y); if (isRight \u0026\u0026 isPredictedPositive) roc_truePositives++; else if (!isRight \u0026\u0026 isPredictedPositive) roc_falsePositives++; else if (!isRight \u0026\u0026 !isPredictedPositive) roc_trueNegatives++; else if (isRight \u0026\u0026 !isPredictedPositive) roc_falseNegatives++; }); roc_totalPoints = roc_points.length; // Update the metric displays roc_updateMetricDisplay(); } // Update metric display function roc_updateMetricDisplay() { // Calculate TPR and FPR const tpr = roc_truePositives / (roc_truePositives + roc_falseNegatives) || 0; const fpr = roc_falsePositives / (roc_falsePositives + roc_trueNegatives) || 0; // Update display values with equal sign roc_tprValue.textContent = \"= \" + tpr.toFixed(3); roc_fprValue.textContent = \"= \" + fpr.toFixed(3); // Properly format the equations for KaTeX const tprFormulaText = `\\\\frac{TP}{TP + FN} = \\\\frac{${roc_truePositives}}{${roc_truePositives} + ${roc_falseNegatives}}`; const fprFormulaText = `\\\\frac{FP}{FP + TN} = \\\\frac{${roc_falsePositives}}{${roc_falsePositives} + ${roc_trueNegatives}}`; // Set the text content for later rendering roc_tprFormula.setAttribute('data-formula', tprFormulaText); roc_fprFormula.setAttribute('data-formula', fprFormulaText); // Render with KaTeX roc_renderFormulas(); } // Properly format the equations for KaTeX with larger font function roc_renderFormulas() { try { if (typeof katex !== 'undefined') { const tprFormulaText = roc_tprFormula.getAttribute('data-formula'); const fprFormulaText = roc_fprFormula.getAttribute('data-formula'); katex.render(tprFormulaText, roc_tprFormula, { displayMode: true, throwOnError: false, fontSize: '1.2em' // Larger font size }); katex.render(fprFormulaText, roc_fprFormula, { displayMode: true, throwOnError: false, fontSize: '1.2em' // Larger font size }); } else { console.error(\"KaTeX not available for rendering\"); // Fallback to plain text if rendering fails roc_tprFormula.textContent = roc_tprFormula.getAttribute('data-formula'); roc_fprFormula.textContent = roc_fprFormula.getAttribute('data-formula'); } } catch (error) { console.error(\"KaTeX rendering error:\", error); } } // Draw all points function roc_drawPoints() { roc_points.forEach(point = { const isRight = point.x = roc_canvas.width / 2; // Choose color based on actual class (left/right side) if (isRight) { roc_ctx.fillStyle = 'blue'; // Actual Positive (right side) } else { roc_ctx.fillStyle = 'red'; // Actual Negative (left side) } roc_ctx.beginPath(); roc_ctx.arc(point.x, point.y, 3, 0, Math.PI * 2); roc_ctx.fill(); }); } // Redraw canvas with all points and current circle position function roc_redrawCanvas() { roc_ctx.clearRect(0, 0, roc_canvas.width, roc_canvas.height); // Draw points roc_drawPoints(); // Draw dividing line roc_ctx.beginPath(); roc_ctx.moveTo(roc_canvas.width / 2, 0); roc_ctx.lineTo(roc_canvas.width / 2, roc_canvas.height); roc_ctx.strokeStyle = 'black'; roc_ctx.lineWidth = 2; roc_ctx.stroke(); // Draw circle roc_ctx.beginPath(); roc_ctx.arc(roc_centerX, roc_centerY, roc_circleRadius, 0, Math.PI * 2); roc_ctx.fillStyle = 'rgba(0, 0, 255, 0.15)'; roc_ctx.fill(); roc_ctx.strokeStyle = 'black'; // Changed to black for better visibility roc_ctx.lineWidth = 3; roc_ctx.stroke(); // Draw border roc_ctx.strokeStyle = '#ddd'; roc_ctx.lineWidth = 1; roc_ctx.strokeRect(0, 0, roc_canvas.width, roc_canvas.height); } // Draw the ROC curve function roc_drawROCCurve() { roc_rocCtx.clearRect(0, 0, roc_rocCanvas.width, roc_rocCanvas.height); // Draw axes roc_rocCtx.beginPath(); // Y-axis (left) roc_rocCtx.moveTo(0, roc_rocCanvas.height); roc_rocCtx.lineTo(0, 0); // X-axis (bottom) roc_rocCtx.moveTo(0, roc_rocCanvas.height); roc_rocCtx.lineTo(roc_rocCanvas.width, roc_rocCanvas.height); roc_rocCtx.stroke(); // Y-axis label roc_rocCtx.save(); roc_rocCtx.translate(20, roc_rocCanvas.height/2); // Adjust left position roc_rocCtx.rotate(-Math.PI/2); roc_rocCtx.restore(); // Y-ticks (only 0 and 1) [0, 1].forEach(t = { const y = roc_rocCanvas.height - (t * roc_rocCanvas.height); // Tick roc_rocCtx.beginPath(); roc_rocCtx.moveTo(0, y); roc_rocCtx.lineTo(5, y); roc_rocCtx.stroke(); // Label roc_rocCtx.textAlign = \"right\"; roc_rocCtx.fillText(t.toFixed(0), -8, y + 4); }); // X-ticks (only 0 and 1) [0, 1].forEach(t = { const x = t * roc_rocCanvas.width; // Tick roc_rocCtx.beginPath(); roc_rocCtx.moveTo(x, roc_rocCanvas.height); roc_rocCtx.lineTo(x, roc_rocCanvas.height - 5); roc_rocCtx.stroke(); // Label roc_rocCtx.textAlign = \"center\"; roc_rocCtx.fillText(t.toFixed(0), x, roc_rocCanvas.height + 20); }); // X-axis label // Draw reference line (random classifier) roc_rocCtx.beginPath(); roc_rocCtx.moveTo(0, roc_rocCanvas.height); roc_rocCtx.lineTo(roc_rocCanvas.width, 0); roc_rocCtx.strokeStyle = 'gray'; roc_rocCtx.lineWidth = 1; roc_rocCtx.setLineDash([5, 5]); roc_rocCtx.stroke(); roc_rocCtx.setLineDash([]); // Draw ROC curve points if we have any if (roc_rocPoints.length  0) { // Only draw line if there are multiple points (after user has moved the slider) if (roc_rocPoints.length  1) { // Draw the curve connecting the points roc_rocCtx.beginPath(); roc_rocCtx.moveTo(0, roc_rocCanvas.height); // Start at origin (0,1) // Sort points to ensure proper curve const sortedPoints = [...roc_rocPoints].sort((a, b) = a.fpr - b.fpr); sortedPoints.forEach(point = { const x = point.fpr * roc_rocCanvas.width; const y = roc_rocCanvas.height - (point.tpr * roc_rocCanvas.height); roc_rocCtx.lineTo(x, y); }); roc_rocCtx.strokeStyle = 'gray'; // Changed from blue to gray roc_rocCtx.lineWidth = 2; roc_rocCtx.stroke(); // Draw points sortedPoints.forEach(point = { const x = point.fpr * roc_rocCanvas.width; const y = roc_rocCanvas.height - (point.tpr * roc_rocCanvas.height); roc_rocCtx.beginPath(); roc_rocCtx.arc(x, y, 3, 0, Math.PI * 2); roc_rocCtx.fillStyle = 'gray'; // Changed from blue to gray roc_rocCtx.fill(); }); } // Draw current operating point const tpr = roc_truePositives / (roc_truePositives + roc_falseNegatives) || 0; const fpr = roc_falsePositives / (roc_falsePositives + roc_trueNegatives) || 0; const currentX = fpr * roc_rocCanvas.width; const currentY = roc_rocCanvas.height - (tpr * roc_rocCanvas.height); roc_rocCtx.beginPath(); roc_rocCtx.arc(currentX, currentY, 6, 0, Math.PI * 2); roc_rocCtx.fillStyle = 'gray'; // Changed from red to gray roc_rocCtx.fill(); roc_rocCtx.strokeStyle = 'black'; roc_rocCtx.lineWidth = 1; roc_rocCtx.stroke(); } } // Add a new ROC point for current size function roc_addROCPoint() { const tpr = roc_truePositives / (roc_truePositives + roc_falseNegatives) || 0; const fpr = roc_falsePositives / (roc_falsePositives + roc_trueNegatives) || 0; // Check if we already have a point with the exact same size const existingPoint = roc_rocPoints.find(p = p.size === roc_circleSizePercent); if (existingPoint) { // Update existing point existingPoint.tpr = tpr; existingPoint.fpr = fpr; } else { // Add new point roc_rocPoints.push({ tpr, fpr, size: roc_circleSizePercent }); } // Sort points by size roc_rocPoints.sort((a, b) = a.size - b.size); } // Remove ROC points above a certain size function roc_removeROCPointsAboveSize(size) { roc_rocPoints = roc_rocPoints.filter(point = point.size midX; // Padding to ensure labels stay within canvas const padding = 20; const labelWidth = 70; const labelHeight = 40; // 1. False Positives (inside circle, left side) if (overlapsLeft \u0026\u0026 roc_falsePositives  0) { const fpX = Math.max(padding, Math.min(midX - labelWidth - padding, roc_centerX - roc_circleRadius / 2)); const fpY = roc_centerY; roc_quadrantLabels[0].style.display = 'block'; roc_quadrantLabels[0].style.left = fpX + 'px'; roc_quadrantLabels[0].style.top = fpY + 'px'; } else { roc_quadrantLabels[0].style.display = 'none'; } // 2. True Positives (inside circle, right side) if (overlapsRight \u0026\u0026 roc_truePositives  0) { const tpX = Math.min(roc_canvas.width - labelWidth - padding, Math.max(midX + padding, roc_centerX + roc_circleRadius / 3)); const tpY = roc_centerY; roc_quadrantLabels[1].style.display = 'block'; roc_quadrantLabels[1].style.left = tpX + 'px'; roc_quadrantLabels[1].style.top = tpY + 'px'; } else { roc_quadrantLabels[1].style.display = 'none'; } // 3. True Negatives (outside circle, left side) // Only show if there's sufficient space between the circle and the edge const safeDistanceFromCircle = 50; // Minimum distance needed const distanceLeftEdge = leftEdge; if (roc_trueNegatives  0 \u0026\u0026 distanceLeftEdge  safeDistanceFromCircle) { const tnX = padding; const tnY = padding; roc_quadrantLabels[2].style.display = 'block'; roc_quadrantLabels[2].style.left = tnX + 'px'; roc_quadrantLabels[2].style.top = tnY + 'px'; } else { // Hide when circle gets too close roc_quadrantLabels[2].style.display = 'none'; } // 4. False Negatives (outside circle, right side) // Only show if there's sufficient space between the circle and right edge const distanceRightEdge = roc_canvas.width - rightEdge; if (roc_falseNegatives  0 \u0026\u0026 distanceRightEdge  safeDistanceFromCircle) { const fnX = roc_canvas.width - labelWidth - padding; const fnY = padding; roc_quadrantLabels[3].style.display = 'block'; roc_quadrantLabels[3].style.left = fnX + 'px'; roc_quadrantLabels[3].style.top = fnY + 'px'; } else { // Hide when circle gets too close roc_quadrantLabels[3].style.display = 'none'; } } // Check if a point is inside the circle function roc_isInsideCircle(x, y) { const dx = x - roc_centerX; const dy = y - roc_centerY; return (dx * dx + dy * dy)   Isso seria equivalente a um modelo que faz previs√µes aleat√≥rias, como jogar uma moeda para decidir entre positivo e negativo. Ou seja, um modelo sem poder preditivo.\nUm modelo melhor que o baseline Um bom modelo de classifica√ß√£o consegue obter uma sensibilidade alta sem produzir muitos falsos positivos. Utilizando a mesma simula√ß√£o, uma possibilidade seria um c√≠rculo que cresce com in√≠cio inteiramente no lado direito (captando mais positivos inicialmente). Aumente o tamanho do c√≠rculo na visualiza√ß√£o abaixo e observe o que acontece.\n    // Ensure KaTeX is fully loaded before page initialization document.addEventListener('DOMContentLoaded', function() { if (typeof katex !== 'undefined') { console.log(\"KaTeX loaded successfully\"); } else { console.error(\"KaTeX failed to load\"); } });   .roc2_simulation-container { max-width: 1200px; margin: 0 auto; } .roc2_control-panel { width: 100%; max-width: 80%; margin: 0 auto 20px; } .roc2_slider-container { display: flex; align-items: center; gap: 10px; flex-wrap: wrap; margin-bottom: 10px; position: relative; width: 100%; max-width: 350px; } .roc2_slider-container label { font-weight: bold; min-width: 100px; color: #333; margin-bottom: 1px; } .roc2_range-slider { width: 100%; position: relative; } .roc2_range-slider-track { height: 8px; width: 100%; background-color: #ddd; border-radius: 4px; position: relative; } .roc2_range-slider-fill { height: 100%; background-color: #3b82f6; border-radius: 4px; position: absolute; top: 0; left: 0; pointer-events: none; transition: width 0.1s ease; } input[type=\"range\"] { -webkit-appearance: none; appearance: none; width: 100%; height: 8px; background: transparent; position: absolute; top: 0; left: 0; margin: 0; z-index: 10; } input[type=\"range\"]::-webkit-slider-thumb { -webkit-appearance: none; appearance: none; width: 22px; height: 22px; background: #3b82f6; border-radius: 50%; cursor: pointer; border: 2px solid white; box-shadow: 0 2px 4px rgba(0,0,0,0.2); transition: all 0.2s ease; } input[type=\"range\"]::-webkit-slider-thumb:hover { background: #2563eb; transform: scale(1.1); } input[type=\"range\"]::-moz-range-thumb { width: 22px; height: 22px; background: #3b82f6; border-radius: 50%; cursor: pointer; border: 2px solid white; box-shadow: 0 2px 4px rgba(0,0,0,0.2); transition: all 0.2s ease; } input[type=\"range\"]::-moz-range-thumb:hover { background: #2563eb; transform: scale(1.1); } .roc2_slider-value { min-width: 50px; text-align: center; font-weight: bold; color: #3b82f6; background-color: #f0f4ff; padding: 4px 8px; border-radius: 12px; margin-left: 10px; border: 1px solid #d1d5db; } .roc2_flex-container { display: flex; flex-direction: row; flex-wrap: wrap; gap: 3%; /* Increased from 20px */ } .roc2_visualization-area { flex: 1; min-width: 300px; } .roc2_roc-area { flex: 1; min-width: 300px; } .roc2_canvas-container { position: relative; width: 100%; padding-bottom: 85%; border: 1px solid #ddd; overflow: hidden; background-color: white; } #roc2_canvas, #roc2_rocCanvas { position: absolute; top: 0; left: 0; width: 100%; height: 100%; cursor: move; } .roc2_quadrant-label { position: absolute; white-space: nowrap; font-size: 17px; text-align: center; color: #fff; background-color: rgba(0, 0, 0, 1); padding: 1px 5px; border-radius: 10px; z-index: 10; pointer-events: none; transition: all 0.3s ease; } .roc2_metrics-display { margin-top: 20px; padding: 15px; border: 1px solid #ddd; border-radius: 8px; background-color: #f8f9fa; } .roc2_metrics-title { font-size: 18px; font-weight: bold; margin-bottom: 15px; color: #333; text-align: center; } .roc2_metrics-grid { display: grid; grid-template-columns: 1fr 1fr; gap: 20px; } .roc2_metric-card { background-color: white; border: 1px solid #ddd; border-radius: 8px; padding: 15px; } .roc2_metric-name { font-weight: bold; font-size: 16px; margin-bottom: 10px; color: #333; } .roc2_metric-formula { text-align: center; min-height: 80px; display: flex; align-items: center; justify-content: center; } .roc2_metric-value { text-align: center; font-weight: bold; font-size: 18px; color: #3b82f6; margin-top: 10px; } @media (max-width: 768px) { .roc2_flex-container { flex-direction: column; } .roc2_metrics-grid { grid-template-columns: 1fr; } }    Tamanho do c√≠rculo       False\nPositives True\nPositives True\nNegatives False\nNegatives  Negatives Positives   1.0 TPR    0.0 FPR 1.0    TPR (True Positive Rate) Loading... = 0.000  FPR (False Positive Rate) Loading... = 0.000        // Wait for all resources to load, including KaTeX window.addEventListener('load', function() { // Initialize simulation roc2_init(); }); function roc2_init() { // DOM Elements const roc2_canvas = document.getElementById('roc2_canvas'); const roc2_ctx = roc2_canvas.getContext('2d'); const roc2_rocCanvas = document.getElementById('roc2_rocCanvas'); const roc2_rocCtx = roc2_rocCanvas.getContext('2d'); const roc2_circleSizeSlider = document.getElementById('roc2_circleSize'); const roc2_circleSizeFill = document.getElementById('roc2_circleSizeFill'); const roc2_sizeValue = document.getElementById('roc2_sizeValue'); // Quadrant labels const roc2_quadrantLabels = [ document.getElementById('roc2_quadrant0'), document.getElementById('roc2_quadrant1'), document.getElementById('roc2_quadrant2'), document.getElementById('roc2_quadrant3') ]; // Metric displays const roc2_tprFormula = document.getElementById('roc2_tprFormula'); const roc2_tprValue = document.getElementById('roc2_tprValue'); const roc2_fprFormula = document.getElementById('roc2_fprFormula'); const roc2_fprValue = document.getElementById('roc2_fprValue'); // Variables let roc2_isDragging = false; let roc2_truePositives = 0; let roc2_falsePositives = 0; let roc2_trueNegatives = 0; let roc2_falseNegatives = 0; let roc2_totalPoints = 0; let roc2_points = []; let roc2_rocPoints = []; let roc2_currentSize = 0; // Track current circle size // Circle properties let roc2_circleRadius; let roc2_centerX; let roc2_centerY; let roc2_circleCenter = { x: 0.65, y: 0.5 }; // Normalized position (0-1) - CHANGED X FROM 0.5 TO 0.65 let roc2_circleSizePercent = 0; // Percentage of min dimension let roc2_dragStartPos = { x: 0, y: 0 }; let roc2_dragStartCenter = { x: 0, y: 0 }; // Update slider fill function roc2_updateSliderFill() { const percent = (roc2_circleSizeSlider.value - roc2_circleSizeSlider.min) / (roc2_circleSizeSlider.max - roc2_circleSizeSlider.min) * 100; roc2_circleSizeFill.style.width = percent + '%'; } // Initial slider fill update roc2_updateSliderFill(); // Setup slider events for changing circle size only function roc2_setupSliderEvents() { // Update slider fill and add event listener roc2_updateSliderFill(); roc2_circleSizeSlider.addEventListener('input', function() { // Store previous and current size for ROC curve updating const prevSize = roc2_circleSizePercent; roc2_circleSizePercent = parseInt(this.value); roc2_currentSize = roc2_circleSizePercent; roc2_updateSliderFill(); roc2_calculateDimensions(); roc2_redrawCanvas(); roc2_recalculateMetrics(); roc2_updateLabels(); // Update ROC curve based on whether size increased or decreased if (roc2_circleSizePercent  prevSize) { roc2_addROCPoint(); } else if (roc2_circleSizePercent { const isRight = point.x = roc2_canvas.width / 2; const isPredictedPositive = roc2_isInsideCircle(point.x, point.y); if (isRight \u0026\u0026 isPredictedPositive) roc2_truePositives++; else if (!isRight \u0026\u0026 isPredictedPositive) roc2_falsePositives++; else if (!isRight \u0026\u0026 !isPredictedPositive) roc2_trueNegatives++; else if (isRight \u0026\u0026 !isPredictedPositive) roc2_falseNegatives++; }); roc2_totalPoints = roc2_points.length; // Update the metric displays roc2_updateMetricDisplay(); } // Update metric display function roc2_updateMetricDisplay() { // Calculate TPR and FPR const tpr = roc2_truePositives / (roc2_truePositives + roc2_falseNegatives) || 0; const fpr = roc2_falsePositives / (roc2_falsePositives + roc2_trueNegatives) || 0; // Update display values with equal sign roc2_tprValue.textContent = \"= \" + tpr.toFixed(3); roc2_fprValue.textContent = \"= \" + fpr.toFixed(3); // Properly format the equations for KaTeX const tprFormulaText = `\\\\frac{TP}{TP + FN} = \\\\frac{${roc2_truePositives}}{${roc2_truePositives} + ${roc2_falseNegatives}}`; const fprFormulaText = `\\\\frac{FP}{FP + TN} = \\\\frac{${roc2_falsePositives}}{${roc2_falsePositives} + ${roc2_trueNegatives}}`; // Set the text content for later rendering roc2_tprFormula.setAttribute('data-formula', tprFormulaText); roc2_fprFormula.setAttribute('data-formula', fprFormulaText); // Render with KaTeX roc2_renderFormulas(); } // Properly format the equations for KaTeX with larger font function roc2_renderFormulas() { try { if (typeof katex !== 'undefined') { const tprFormulaText = roc2_tprFormula.getAttribute('data-formula'); const fprFormulaText = roc2_fprFormula.getAttribute('data-formula'); katex.render(tprFormulaText, roc2_tprFormula, { displayMode: true, throwOnError: false, fontSize: '1.2em' // Larger font size }); katex.render(fprFormulaText, roc2_fprFormula, { displayMode: true, throwOnError: false, fontSize: '1.2em' // Larger font size }); } else { console.error(\"KaTeX not available for rendering\"); // Fallback to plain text if rendering fails roc2_tprFormula.textContent = roc2_tprFormula.getAttribute('data-formula'); roc2_fprFormula.textContent = roc2_fprFormula.getAttribute('data-formula'); } } catch (error) { console.error(\"KaTeX rendering error:\", error); } } // Draw all points function roc2_drawPoints() { roc2_points.forEach(point = { const isRight = point.x = roc2_canvas.width / 2; // Choose color based on actual class (left/right side) if (isRight) { roc2_ctx.fillStyle = 'blue'; // Actual Positive (right side) } else { roc2_ctx.fillStyle = 'red'; // Actual Negative (left side) } roc2_ctx.beginPath(); roc2_ctx.arc(point.x, point.y, 3, 0, Math.PI * 2); roc2_ctx.fill(); }); } // Redraw canvas with all points and current circle position function roc2_redrawCanvas() { roc2_ctx.clearRect(0, 0, roc2_canvas.width, roc2_canvas.height); // Draw points roc2_drawPoints(); // Draw dividing line roc2_ctx.beginPath(); roc2_ctx.moveTo(roc2_canvas.width / 2, 0); roc2_ctx.lineTo(roc2_canvas.width / 2, roc2_canvas.height); roc2_ctx.strokeStyle = 'black'; roc2_ctx.lineWidth = 2; roc2_ctx.stroke(); // Draw circle roc2_ctx.beginPath(); roc2_ctx.arc(roc2_centerX, roc2_centerY, roc2_circleRadius, 0, Math.PI * 2); roc2_ctx.fillStyle = 'rgba(0, 0, 255, 0.15)'; roc2_ctx.fill(); roc2_ctx.strokeStyle = 'black'; // Changed to black for better visibility roc2_ctx.lineWidth = 3; roc2_ctx.stroke(); // Draw border roc2_ctx.strokeStyle = '#ddd'; roc2_ctx.lineWidth = 1; roc2_ctx.strokeRect(0, 0, roc2_canvas.width, roc2_canvas.height); } // Draw the ROC curve function roc2_drawROCCurve() { roc2_rocCtx.clearRect(0, 0, roc2_rocCanvas.width, roc2_rocCanvas.height); // Draw axes roc2_rocCtx.beginPath(); // Y-axis (left) roc2_rocCtx.moveTo(0, roc2_rocCanvas.height); roc2_rocCtx.lineTo(0, 0); // X-axis (bottom) roc2_rocCtx.moveTo(0, roc2_rocCanvas.height); roc2_rocCtx.lineTo(roc2_rocCanvas.width, roc2_rocCanvas.height); roc2_rocCtx.stroke(); // Y-axis label roc2_rocCtx.save(); roc2_rocCtx.translate(20, roc2_rocCanvas.height/2); // Adjust left position roc2_rocCtx.rotate(-Math.PI/2); roc2_rocCtx.restore(); // Y-ticks (only 0 and 1) [0, 1].forEach(t = { const y = roc2_rocCanvas.height - (t * roc2_rocCanvas.height); // Tick roc2_rocCtx.beginPath(); roc2_rocCtx.moveTo(0, y); roc2_rocCtx.lineTo(5, y); roc2_rocCtx.stroke(); // Label roc2_rocCtx.textAlign = \"right\"; roc2_rocCtx.fillText(t.toFixed(0), -8, y + 4); }); // X-ticks (only 0 and 1) [0, 1].forEach(t = { const x = t * roc2_rocCanvas.width; // Tick roc2_rocCtx.beginPath(); roc2_rocCtx.moveTo(x, roc2_rocCanvas.height); roc2_rocCtx.lineTo(x, roc2_rocCanvas.height - 5); roc2_rocCtx.stroke(); // Label roc2_rocCtx.textAlign = \"center\"; roc2_rocCtx.fillText(t.toFixed(0), x, roc2_rocCanvas.height + 20); }); // X-axis label // Draw reference line (random classifier) roc2_rocCtx.beginPath(); roc2_rocCtx.moveTo(0, roc2_rocCanvas.height); roc2_rocCtx.lineTo(roc2_rocCanvas.width, 0); roc2_rocCtx.strokeStyle = 'gray'; roc2_rocCtx.lineWidth = 1; roc2_rocCtx.setLineDash([5, 5]); roc2_rocCtx.stroke(); roc2_rocCtx.setLineDash([]); // Draw ROC curve points if we have any if (roc2_rocPoints.length  0) { // Only draw line if there are multiple points (after user has moved the slider) if (roc2_rocPoints.length  1) { // Draw the curve connecting the points roc2_rocCtx.beginPath(); roc2_rocCtx.moveTo(0, roc2_rocCanvas.height); // Start at origin (0,1) // Sort points to ensure proper curve const sortedPoints = [...roc2_rocPoints].sort((a, b) = a.fpr - b.fpr); sortedPoints.forEach(point = { const x = point.fpr * roc2_rocCanvas.width; const y = roc2_rocCanvas.height - (point.tpr * roc2_rocCanvas.height); roc2_rocCtx.lineTo(x, y); }); roc2_rocCtx.strokeStyle = 'gray'; // Changed from blue to gray roc2_rocCtx.lineWidth = 2; roc2_rocCtx.stroke(); // Draw points sortedPoints.forEach(point = { const x = point.fpr * roc2_rocCanvas.width; const y = roc2_rocCanvas.height - (point.tpr * roc2_rocCanvas.height); roc2_rocCtx.beginPath(); roc2_rocCtx.arc(x, y, 3, 0, Math.PI * 2); roc2_rocCtx.fillStyle = 'gray'; // Changed from blue to gray roc2_rocCtx.fill(); }); } // Draw current operating point const tpr = roc2_truePositives / (roc2_truePositives + roc2_falseNegatives) || 0; const fpr = roc2_falsePositives / (roc2_falsePositives + roc2_trueNegatives) || 0; const currentX = fpr * roc2_rocCanvas.width; const currentY = roc2_rocCanvas.height - (tpr * roc2_rocCanvas.height); roc2_rocCtx.beginPath(); roc2_rocCtx.arc(currentX, currentY, 6, 0, Math.PI * 2); roc2_rocCtx.fillStyle = 'gray'; // Changed from red to gray roc2_rocCtx.fill(); roc2_rocCtx.strokeStyle = 'black'; roc2_rocCtx.lineWidth = 1; roc2_rocCtx.stroke(); } } // Add a new ROC point for current size function roc2_addROCPoint() { const tpr = roc2_truePositives / (roc2_truePositives + roc2_falseNegatives) || 0; const fpr = roc2_falsePositives / (roc2_falsePositives + roc2_trueNegatives) || 0; // Check if we already have a point with the exact same size const existingPoint = roc2_rocPoints.find(p = p.size === roc2_circleSizePercent); if (existingPoint) { // Update existing point existingPoint.tpr = tpr; existingPoint.fpr = fpr; } else { // Add new point roc2_rocPoints.push({ tpr, fpr, size: roc2_circleSizePercent }); } // Sort points by size roc2_rocPoints.sort((a, b) = a.size - b.size); } // Remove ROC points above a certain size function roc2_removeROCPointsAboveSize(size) { roc2_rocPoints = roc2_rocPoints.filter(point = point.size midX; // Padding to ensure labels stay within canvas const padding = 20; const labelWidth = 70; const labelHeight = 40; // 1. False Positives (inside circle, left side) if (overlapsLeft \u0026\u0026 roc2_falsePositives  0) { const fpX = Math.max(padding, Math.min(midX - labelWidth - padding, roc2_centerX - roc2_circleRadius / 2)); const fpY = roc2_centerY; roc2_quadrantLabels[0].style.display = 'block'; roc2_quadrantLabels[0].style.left = fpX + 'px'; roc2_quadrantLabels[0].style.top = fpY + 'px'; } else { roc2_quadrantLabels[0].style.display = 'none'; } // 2. True Positives (inside circle, right side) if (overlapsRight \u0026\u0026 roc2_truePositives  0) { const tpX = Math.min(roc2_canvas.width - labelWidth - padding, Math.max(midX + padding, roc2_centerX + roc2_circleRadius / 3)); const tpY = roc2_centerY; roc2_quadrantLabels[1].style.display = 'block'; roc2_quadrantLabels[1].style.left = tpX + 'px'; roc2_quadrantLabels[1].style.top = tpY + 'px'; } else { roc2_quadrantLabels[1].style.display = 'none'; } // 3. True Negatives (outside circle, left side) // Only show if there's sufficient space between the circle and the edge const safeDistanceFromCircle = 5; // Minimum distance needed const distanceLeftEdge = leftEdge; if (roc2_trueNegatives  0 \u0026\u0026 distanceLeftEdge  safeDistanceFromCircle) { const tnX = padding; const tnY = padding; roc2_quadrantLabels[2].style.display = 'block'; roc2_quadrantLabels[2].style.left = tnX + 'px'; roc2_quadrantLabels[2].style.top = tnY + 'px'; } else { // Hide when circle gets too close roc2_quadrantLabels[2].style.display = 'none'; } // 4. False Negatives (outside circle, right side) // Only show if there's sufficient space between the circle and right edge const distanceRightEdge = roc2_canvas.width - rightEdge; if (roc2_falseNegatives  0 \u0026\u0026 distanceRightEdge  safeDistanceFromCircle) { const fnX = roc2_canvas.width - labelWidth - padding; const fnY = padding; roc2_quadrantLabels[3].style.display = 'block'; roc2_quadrantLabels[3].style.left = fnX + 'px'; roc2_quadrantLabels[3].style.top = fnY + 'px'; } else { // Hide when circle gets too close roc2_quadrantLabels[3].style.display = 'none'; } } // Check if a point is inside the circle function roc2_isInsideCircle(x, y) { const dx = x - roc2_centerX; const dy = y - roc2_centerY; return (dx * dx + dy * dy)   Como observamos, ap√≥s certa medida, o c√≠rculo come√ßa a captar parte do lado esquerdo, gerando falsos positivos. Quando plotamos a curva ROC nesse caso, obtemos uma curva que se arqueia para o canto superior esquerdo do gr√°fico5.\nVale a pena destacar que a curva ROC pode ser enganosa para conjuntos de dados muito desbalanceados. Como um √∫ltimo exemplo, vamos observar o que acontece com a curva nesse cen√°rio.\nDados Desbalanceados Quando os dados s√£o altamente desbalanceados (por exemplo, fraude banc√°ria onde menos de 0,1% das transa√ß√µes s√£o fraudulentas), a curva ROC pode mascarar problemas de desempenho. Na curva ROC, os falsos positivos s√£o medidos em rela√ß√£o ao n√∫mero total de negativos (FPR = FP/N). Com muitos exemplos negativos, cada falso positivo tem um impacto pequeno na taxa de falsos positivos. Isso pode fazer com que um modelo pare√ßa melhor do que realmente √©. Para dados desbalanceados, considere usar a curva Precis√£o-Recall (PR).\nA simula√ß√£o abaixo mostra na pr√°tica a diferen√ßa entre as curvas ROC e PR. √â poss√≠vel alterar tanto o tamanho do c√≠rculo quanto a porcentagem da classe positiva no conjunto de dados. Varie primeiramente o tamanho do c√≠rculo e veja as duas curvas surgindo.\n  .dual_simulation-container { max-width: 1200px; margin: 0 auto; /* You can adjust this min-height to increase simulation height */ min-height: 600px; } .dual_dataset-info { background-color: #f8f9fa; border: 1px solid #ddd; border-radius: 5px; padding: 10px; margin-bottom: 15px; text-align: center; font-weight: bold; } .dual_flex-container { display: flex; flex-direction: row; flex-wrap: wrap; gap: 3%; } .dual_side { flex: 1; min-width: 300px; display: flex; flex-direction: column; } .dual_slider-container { display: flex; align-items: center; gap: 10px; flex-wrap: wrap; margin-bottom: 10px; position: relative; width: 100%; margin-bottom: 20px; } .dual_slider-container label { font-weight: bold; min-width: 120px; color: #333; margin-bottom: 1px; } .dual_range-slider { flex: 1; position: relative; } .dual_range-slider-track { height: 8px; width: 100%; background-color: #ddd; border-radius: 4px; position: relative; } .dual_range-slider-fill { height: 100%; background-color: #3b82f6; border-radius: 4px; position: absolute; top: 0; left: 0; pointer-events: none; transition: width 0.1s ease; } input[type=\"range\"] { -webkit-appearance: none; appearance: none; width: 100%; height: 8px; background: transparent; position: absolute; top: 0; left: 0; margin: 0; z-index: 10; } input[type=\"range\"]::-webkit-slider-thumb { -webkit-appearance: none; appearance: none; width: 22px; height: 22px; background: #3b82f6; border-radius: 50%; cursor: pointer; border: 2px solid white; box-shadow: 0 2px 4px rgba(0,0,0,0.2); transition: all 0.2s ease; } input[type=\"range\"]::-webkit-slider-thumb:hover { background: #2563eb; transform: scale(1.1); } input[type=\"range\"]::-moz-range-thumb { width: 22px; height: 22px; background: #3b82f6; border-radius: 50%; cursor: pointer; border: 2px solid white; box-shadow: 0 2px 4px rgba(0,0,0,0.2); transition: all 0.2s ease; } input[type=\"range\"]::-moz-range-thumb:hover { background: #2563eb; transform: scale(1.1); } .dual_value-display { min-width: 60px; text-align: center; font-weight: bold; color: #3b82f6; background-color: #f0f4ff; padding: 4px 8px; border-radius: 12px; border: 1px solid #d1d5db; margin-left: 10px; } .dual_canvas-container { position: relative; width: 100%; padding-bottom: 100%; border: 1px solid #ddd; overflow: hidden; background-color: white; } .dual_curves-area { display: flex; flex-direction: column; } .dual_curve-container { position: relative; width: 100%; padding-bottom: 40%; border: 1px solid #ddd; background-color: white; } #dual_canvas, #dual_rocCanvas, #dual_prCanvas { position: absolute; top: 0; left: 0; width: 100%; height: 100%; } .dual_quadrant-label { position: absolute; white-space: nowrap; font-size: 17px; text-align: center; color: #fff; background-color: rgba(0, 0, 0, 1); padding: 1px 5px; border-radius: 10px; z-index: 10; pointer-events: none; transition: all 0.3s ease; } .dual_curve-title { font-weight: bold; text-align: center; margin-bottom: 5px; } .dual_instructions { background-color: #e9f5ff; border: 1px solid #b8daff; border-radius: 5px; padding: 10px; margin-top: 15px; font-size: 14px; } .dual_axis-container { display: flex; align-items: stretch; position: relative; margin-bottom: 5px; } .dual_y-axis-label { width: 30px; display: flex; flex-direction: column; justify-content: center; font-weight: bold; font-size: 14px; margin-right: 5px; text-align: center; } .dual_y-axis-label span { transform: rotate(-90deg); white-space: nowrap; display: block; width: 40px; font-size: 18px; position: absolute; left: -10px; } .dual_graph-container { flex-grow: 1; position: relative; } .dual_tick-label { position: absolute; font-size: 18px; font-weight: bold; } @media (max-width: 768px) { .dual_flex-container { flex-direction: column; } }    Classe positiva:    1%   False\nPositives True\nPositives True\nNegatives False\nNegatives  Negatives (99%) Positives (1%)   Tamanho do c√≠rculo    0   ROC Curve TPR   1.0 0.0 1.0  FPR      Precision-Recall Curve Precision   1.0 0.0 1.0  Recall          // Wait for all resources to load window.addEventListener('load', function() { // Initialize simulation dual_init(); }); function dual_init() { // DOM Elements const dual_canvas = document.getElementById('dual_canvas'); const dual_ctx = dual_canvas.getContext('2d'); const dual_rocCanvas = document.getElementById('dual_rocCanvas'); const dual_rocCtx = dual_rocCanvas.getContext('2d'); const dual_prCanvas = document.getElementById('dual_prCanvas'); const dual_prCtx = dual_prCanvas.getContext('2d'); const dual_circleSizeSlider = document.getElementById('dual_circleSize'); const dual_circleSizeFill = document.getElementById('dual_circleSizeFill'); const dual_circleSizeValue = document.getElementById('dual_circleSizeValue'); const dual_positiveRatioSlider = document.getElementById('dual_positiveRatio'); const dual_positiveRatioFill = document.getElementById('dual_positiveRatioFill'); const dual_positiveRatioValue = document.getElementById('dual_positiveRatioValue'); const dual_positiveLabel = document.getElementById('dual_positiveLabel'); const dual_negativeLabel = document.getElementById('dual_negativeLabel'); // Quadrant labels const dual_quadrantLabels = [ document.getElementById('dual_quadrant0'), document.getElementById('dual_quadrant1'), document.getElementById('dual_quadrant2'), document.getElementById('dual_quadrant3') ]; // Variables let dual_truePositives = 0; let dual_falsePositives = 0; let dual_trueNegatives = 0; let dual_falseNegatives = 0; let dual_totalPoints = 0; let dual_points = []; let dual_rocPoints = []; let dual_prPoints = []; let dual_currentSize = 0; // Track current circle size let dual_positiveClassRatio = 0.01; // Starting point: 1% // Set extra space above y=1 for visibility (expressed as a fraction of canvas height) const dual_extraSpace = 0.05; // 5% extra space above y=1.0 // Circle properties - fixed center at 0.65, 0.5 let dual_circleRadius; let dual_centerX; let dual_centerY; let dual_circleCenter = { x: 0.65, y: 0.5 }; // Fixed position let dual_circleSizePercent = 0; // Percentage of min dimension // Update positive ratio slider fill and label function dual_updatePositiveRatioSlider() { const percent = (dual_positiveRatioSlider.value - dual_positiveRatioSlider.min) / (dual_positiveRatioSlider.max - dual_positiveRatioSlider.min) * 100; dual_positiveRatioFill.style.width = percent + '%'; // Update the display value const ratioValue = parseInt(dual_positiveRatioSlider.value); dual_positiveRatioValue.textContent = ratioValue + '%'; // Convert to decimal dual_positiveClassRatio = ratioValue / 100; // Update dataset info text and labels dual_positiveLabel.textContent = `Positives (${ratioValue}%)`; dual_negativeLabel.textContent = `Negatives (${100-ratioValue}%)`; } // Update circle size slider fill and value function dual_updateCircleSizeSlider() { const percent = (dual_circleSizeSlider.value - dual_circleSizeSlider.min) / (dual_circleSizeSlider.max - dual_circleSizeSlider.min) * 100; dual_circleSizeFill.style.width = percent; dual_circleSizeValue.textContent = dual_circleSizeSlider.value; } // Initial slider fill updates dual_updateCircleSizeSlider(); dual_updatePositiveRatioSlider(); // Setup slider events function dual_setupSliderEvents() { // Circle size slider dual_circleSizeSlider.addEventListener('input', function() { // Store previous and current size for curve updating const prevSize = dual_circleSizePercent; dual_circleSizePercent = parseInt(this.value); dual_currentSize = dual_circleSizePercent; dual_updateCircleSizeSlider(); dual_calculateDimensions(); dual_redrawCanvas(); dual_recalculateMetrics(); dual_updateQuadrantLabels(); // Update curve points based on whether size increased or decreased if (dual_circleSizePercent  prevSize) { dual_addCurvePoints(); } else if (dual_circleSizePercent { const isRight = point.x = dual_canvas.width / 2; const isPredictedPositive = dual_isInsideCircle(point.x, point.y); if (isRight \u0026\u0026 isPredictedPositive) dual_truePositives++; else if (!isRight \u0026\u0026 isPredictedPositive) dual_falsePositives++; else if (!isRight \u0026\u0026 !isPredictedPositive) dual_trueNegatives++; else if (isRight \u0026\u0026 !isPredictedPositive) dual_falseNegatives++; }); dual_totalPoints = dual_points.length; } // Draw all points function dual_drawPoints() { dual_points.forEach(point = { const isRight = point.x = dual_canvas.width / 2; // Choose color based on actual class (left/right side) if (isRight) { dual_ctx.fillStyle = 'blue'; // Actual Positive (right side) } else { dual_ctx.fillStyle = 'red'; // Actual Negative (left side) } dual_ctx.beginPath(); dual_ctx.arc(point.x, point.y, 3, 0, Math.PI * 2); dual_ctx.fill(); }); } // Redraw canvas with all points and current circle position function dual_redrawCanvas() { dual_ctx.clearRect(0, 0, dual_canvas.width, dual_canvas.height); // Draw points dual_drawPoints(); // Draw dividing line dual_ctx.beginPath(); dual_ctx.moveTo(dual_canvas.width / 2, 0); dual_ctx.lineTo(dual_canvas.width / 2, dual_canvas.height); dual_ctx.strokeStyle = 'black'; dual_ctx.lineWidth = 2; dual_ctx.stroke(); // Draw circle dual_ctx.beginPath(); dual_ctx.arc(dual_centerX, dual_centerY, dual_circleRadius, 0, Math.PI * 2); dual_ctx.fillStyle = 'rgba(0, 0, 255, 0.15)'; dual_ctx.fill(); dual_ctx.strokeStyle = 'black'; dual_ctx.lineWidth = 3; dual_ctx.stroke(); // Draw border dual_ctx.strokeStyle = '#ddd'; dual_ctx.lineWidth = 1; dual_ctx.strokeRect(0, 0, dual_canvas.width, dual_canvas.height); } // Draw the ROC curve with corrected y-coordinate calculation function dual_drawROCCurve() { dual_rocCtx.clearRect(0, 0, dual_rocCanvas.width, dual_rocCanvas.height); // Calculate the actual data area height (reduced to make room for the extra space) const dataAreaHeight = dual_rocCanvas.height / (1 + dual_extraSpace); // Draw axes dual_rocCtx.beginPath(); // Y-axis (left) dual_rocCtx.moveTo(0, dual_rocCanvas.height); dual_rocCtx.lineTo(0, 0); // X-axis (bottom) dual_rocCtx.moveTo(0, dual_rocCanvas.height); dual_rocCtx.lineTo(dual_rocCanvas.width, dual_rocCanvas.height); dual_rocCtx.stroke(); // Draw reference line (random classifier) dual_rocCtx.beginPath(); dual_rocCtx.moveTo(0, dual_rocCanvas.height); // (0,0) in canvas coordinates dual_rocCtx.lineTo(dual_rocCanvas.width, dual_rocCanvas.height - dataAreaHeight); // (1,1) in canvas coordinates dual_rocCtx.strokeStyle = 'gray'; dual_rocCtx.lineWidth = 1; dual_rocCtx.setLineDash([5, 5]); dual_rocCtx.stroke(); dual_rocCtx.setLineDash([]); // Draw ROC curve points if we have any if (dual_rocPoints.length  0) { // Only draw line if there are multiple points if (dual_rocPoints.length  1) { // Draw the curve connecting the points dual_rocCtx.beginPath(); dual_rocCtx.moveTo(0, dual_rocCanvas.height); // Start at origin (0,0) // Sort points to ensure proper curve const sortedPoints = [...dual_rocPoints].sort((a, b) = a.fpr - b.fpr); sortedPoints.forEach(point = { const x = point.fpr * dual_rocCanvas.width; // Corrected y-coordinate calculation const y = dual_rocCanvas.height - (point.tpr * dataAreaHeight); dual_rocCtx.lineTo(x, y); }); dual_rocCtx.strokeStyle = 'grey'; dual_rocCtx.lineWidth = 2; dual_rocCtx.stroke(); // Draw points sortedPoints.forEach(point = { const x = point.fpr * dual_rocCanvas.width; // Corrected y-coordinate calculation const y = dual_rocCanvas.height - (point.tpr * dataAreaHeight); dual_rocCtx.beginPath(); dual_rocCtx.arc(x, y, 3, 0, Math.PI * 2); dual_rocCtx.fillStyle = 'grey'; dual_rocCtx.fill(); }); } // Draw current operating point const tpr = dual_truePositives / (dual_truePositives + dual_falseNegatives) || 0; const fpr = dual_falsePositives / (dual_falsePositives + dual_trueNegatives) || 0; const currentX = fpr * dual_rocCanvas.width; // Corrected y-coordinate calculation const currentY = dual_rocCanvas.height - (tpr * dataAreaHeight); dual_rocCtx.beginPath(); dual_rocCtx.arc(currentX, currentY, 6, 0, Math.PI * 2); dual_rocCtx.fillStyle = 'red'; dual_rocCtx.fill(); dual_rocCtx.strokeStyle = 'black'; dual_rocCtx.lineWidth = 1; dual_rocCtx.stroke(); } } // Draw the PR curve with corrected y-coordinate calculation function dual_drawPRCurve() { dual_prCtx.clearRect(0, 0, dual_prCanvas.width, dual_prCanvas.height); // Calculate the actual data area height (reduced to make room for the extra space) const dataAreaHeight = dual_prCanvas.height / (1 + dual_extraSpace); // Draw axes dual_prCtx.beginPath(); // Y-axis (left) dual_prCtx.moveTo(0, dual_prCanvas.height); dual_prCtx.lineTo(0, 0); // X-axis (bottom) dual_prCtx.moveTo(0, dual_prCanvas.height); dual_prCtx.lineTo(dual_prCanvas.width, dual_prCanvas.height); dual_prCtx.stroke(); // Baseline removed as requested // Draw PR curve points if we have any if (dual_prPoints.length  0) { // Only draw line if there are multiple points if (dual_prPoints.length  1) { // Draw the curve connecting the points dual_prCtx.beginPath(); // Sort points to ensure proper curve - for PR curve, we sort by recall (x-axis) const sortedPoints = [...dual_prPoints].sort((a, b) = a.recall - b.recall); // Start point - unlike ROC, PR curves don't start at origin const firstPoint = sortedPoints[0]; const firstX = firstPoint.recall * dual_prCanvas.width; // Corrected y-coordinate calculation const firstY = dual_prCanvas.height - (firstPoint.precision * dataAreaHeight); dual_prCtx.moveTo(firstX, firstY); // Connect the rest of the points for (let i = 1; i { const x = point.recall * dual_prCanvas.width; // Corrected y-coordinate calculation const y = dual_prCanvas.height - (point.precision * dataAreaHeight); dual_prCtx.beginPath(); dual_prCtx.arc(x, y, 3, 0, Math.PI * 2); dual_prCtx.fillStyle = 'grey'; dual_prCtx.fill(); }); } // Draw current operating point const precision = dual_truePositives / (dual_truePositives + dual_falsePositives) || 0; const recall = dual_truePositives / (dual_truePositives + dual_falseNegatives) || 0; const currentX = recall * dual_prCanvas.width; // Corrected y-coordinate calculation const currentY = dual_prCanvas.height - (precision * dataAreaHeight); dual_prCtx.beginPath(); dual_prCtx.arc(currentX, currentY, 6, 0, Math.PI * 2); dual_prCtx.fillStyle = 'red'; dual_prCtx.fill(); dual_prCtx.strokeStyle = 'black'; dual_prCtx.lineWidth = 1; dual_prCtx.stroke(); } } // Add new curve points for current size function dual_addCurvePoints() { const tpr = dual_truePositives / (dual_truePositives + dual_falseNegatives) || 0; const fpr = dual_falsePositives / (dual_falsePositives + dual_trueNegatives) || 0; const precision = dual_truePositives / (dual_truePositives + dual_falsePositives) || 0; const recall = tpr; // Recall is the same as TPR // Check if we already have points with the exact same size const existingRocPoint = dual_rocPoints.find(p = p.size === dual_circleSizePercent); const existingPrPoint = dual_prPoints.find(p = p.size === dual_circleSizePercent); // Update ROC point if (existingRocPoint) { existingRocPoint.tpr = tpr; existingRocPoint.fpr = fpr; } else { dual_rocPoints.push({ tpr, fpr, size: dual_circleSizePercent }); } // Update PR point if (existingPrPoint) { existingPrPoint.precision = precision; existingPrPoint.recall = recall; } else { dual_prPoints.push({ precision, recall, size: dual_circleSizePercent }); } // Sort points by size dual_rocPoints.sort((a, b) = a.size - b.size); dual_prPoints.sort((a, b) = a.size - b.size); } // Remove curve points above a certain size function dual_removeCurvePointsAboveSize(size) { dual_rocPoints = dual_rocPoints.filter(point = point.size point.size midX; // Padding to ensure labels stay within canvas const padding = 20; const labelWidth = 70; const labelHeight = 40; // 1. False Positives (inside circle, left side) if (overlapsLeft \u0026\u0026 dual_falsePositives  0) { const fpX = Math.max(padding, Math.min(midX - labelWidth - padding, dual_centerX - dual_circleRadius / 2)); const fpY = dual_centerY; dual_quadrantLabels[0].style.display = 'block'; dual_quadrantLabels[0].style.left = fpX + 'px'; dual_quadrantLabels[0].style.top = fpY + 'px'; } else { dual_quadrantLabels[0].style.display = 'none'; } // 2. True Positives (inside circle, right side) if (overlapsRight \u0026\u0026 dual_truePositives  0) { const tpX = Math.min(dual_canvas.width - labelWidth - padding, Math.max(midX + padding, dual_centerX + dual_circleRadius / 3)); const tpY = dual_centerY; dual_quadrantLabels[1].style.display = 'block'; dual_quadrantLabels[1].style.left = tpX + 'px'; dual_quadrantLabels[1].style.top = tpY + 'px'; } else { dual_quadrantLabels[1].style.display = 'none'; } // 3. True Negatives (outside circle, left side) // Only show if there's sufficient space between the circle and the edge const safeDistanceFromCircle = 5; // Minimum distance needed const distanceLeftEdge = leftEdge; if (dual_trueNegatives  0 \u0026\u0026 distanceLeftEdge  safeDistanceFromCircle) { const tnX = padding; const tnY = padding; dual_quadrantLabels[2].style.display = 'block'; dual_quadrantLabels[2].style.left = tnX + 'px'; dual_quadrantLabels[2].style.top = tnY + 'px'; } else { // Hide when circle gets too close dual_quadrantLabels[2].style.display = 'none'; } // 4. False Negatives (outside circle, right side) // Only show if there's sufficient space between the circle and right edge const distanceRightEdge = dual_canvas.width - rightEdge; if (dual_falseNegatives  0 \u0026\u0026 distanceRightEdge  safeDistanceFromCircle) { const fnX = dual_canvas.width - labelWidth - padding; const fnY = padding; dual_quadrantLabels[3].style.display = 'block'; dual_quadrantLabels[3].style.left = fnX + 'px'; dual_quadrantLabels[3].style.top = fnY + 'px'; } else { // Hide when circle gets too close dual_quadrantLabels[3].style.display = 'none'; } } // Check if a point is inside the circle function dual_isInsideCircle(x, y) { const dx = x - dual_centerX; const dy = y - dual_centerY; return (dx * dx + dy * dy)   Repare que, com apenas 1% de exemplos positivos, aumentar o tamanho do c√≠rculo faz com que a curva PR sofra uma queda acentuada na precis√£o ‚Äî j√° que o n√∫mero de falsos positivos aumenta muito mais do que o de verdadeiros positivos. Esse efeito, por√©m, n√£o √© capturado pela curva ROC, que permanece praticamente inalterada.\nOutro efeito interessante pode ser observado com a seguinte configura√ß√£o: defina o tamanho do c√≠rculo em 40 e varie a porcentagem da classe positiva de 1% at√© 100%, e depois retorne a 1%. Voc√™ notar√° que o ponto correspondente na curva ROC praticamente n√£o se move ‚Äî a taxa de falsos positivos (FPR) permanece quase constante. Por outro lado, na curva PR, a precis√£o cai drasticamente √† medida que a propor√ß√£o de positivos se torna menor.\n     Em geral, com precis√£o e recall estamos mais focados na classe minorit√°ria (positiva, nesse caso), o que torna essas m√©tricas mais informativas para dados desbalanceados. Um falso positivo n√£o tem muito peso na curva ROC se temos muitos exemplos negativos. Por√©m, o mesmo falso positivo ter√° um impacto maior na curva PR porque FP est√° no denominador da precis√£o.\n  Um modelo ideal seria representado por um ret√¢ngulo id√™ntico ao lado direito, posicionado exatamente sobre ele.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n Os dois tipos de erros possuem nomes conhecidos. Falsos positivos (FP) s√£o erros tipo I e falsos negativos (FN) s√£o erros tipo II.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n Nas simula√ß√µes desta postagem, os pontos est√£o distribu√≠dos uniformemente no plano. Essa escolha tem fins did√°ticos, pois facilita a explica√ß√£o dos conceitos. No entanto, vale lembrar que, na vida real, os dados n√£o necessariamente seguem essa distribui√ß√£o.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n A abordagem dessa postagem se aplica a casos bin√°rios (por exemplo, positivo/negativo). Para problemas multiclasse, ter√≠amos uma curva ROC para cada classe (one-vs-all).\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n Quanto mais pr√≥xima a curva ROC estiver do canto superior esquerdo, melhor √© o desempenho do modelo. Para quantificar o desempenho, calculamos a √°rea sob a curva (AUC), que representa a performance geral do modelo: AUC = 1,0: modelo perfeito. AUC = 0,5: modelo aleat√≥rio (sem poder preditivo). AUC \u0026lt; 0,5: pior que aleat√≥rio (inverta suas previs√µes).\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n   ","date":1742774400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1742774400,"objectID":"3227cdf648c7dd9f894f23e141854b36","permalink":"https://alvarofrancomartins.com/post/ml-metrics/","publishdate":"2025-03-24T00:00:00Z","relpermalink":"/post/ml-metrics/","section":"post","summary":"Aprenda as principais m√©tricas de classifica√ß√£o por meio de simula√ß√µes interativas.","tags":["Machine Learning","Data Science","M√©tricas","Classifica√ß√£o","Curvas ROC","DataViz","Data Visualization"],"title":"Sensibilidade, especificidade e curvas ROC: Um guia visual para n√£o se confundir mais!","type":"post"},{"authors":["Alvaro Franco Martins"],"categories":["deep_learning","criminal_networks"],"content":"  -- AI Talk   Transcript This was automatically transcripted by Youtube and then I used chatgpt for fine tuning the text. It\u0026rsquo;s not 100% correct.\n Do you ever get kind of sucked into those huge corruption cases in the news? Like, how does it even get that big, you know? Oh, it feels like a whole other world sometimes. It is kind of wild, right? But here\u0026rsquo;s the thing: there are actually patterns to it. Oh really? Yeah, it\u0026rsquo;s not just totally random chaos, which is kind of cool.\n  This PhD thesis we\u0026rsquo;re diving into today went deep, looking at scandals in Spain and Brazil‚Äîtwo totally different places. So, scandals across the globe, and get this: it turns out there are consistent patterns in how these corruption networks actually form. Even with different cultures and different continents, it\u0026rsquo;s like there\u0026rsquo;s an underlying structure. Whoa, that\u0026rsquo;s kind of mind-blowing.\n  So, was there one thing that really jumped out at you from all this research? Like, what surprised you the most? Honestly, it was the size‚Äîor maybe more like the smallness of it all. Smallness? Yeah, we think of these huge scandals, right? Like it\u0026rsquo;s got to be this massive conspiracy with tons of people involved. But this research found that the average scandal, both in Spain and Brazil, only involved about seven people. Seven people, seriously? That\u0026rsquo;s it? I figured it\u0026rsquo;d be way more to pull off something big enough to make the news. It is counterintuitive, isn\u0026rsquo;t it? Totally. But it seems like smaller groups are actually behind a lot of this stuff. Makes you think maybe going after these smaller networks would be smarter than chasing the idea of some giant complex web, which might not even exist the way we picture it, you know?\n  No, that\u0026rsquo;s a really good point. It\u0026rsquo;s like too many cooks in the kitchen, kind of thing. Totally. Maybe with corruption, smaller is actually more efficient and harder to catch. And it gets even more interesting because the thesis goes beyond just the size of these networks. Okay, so what else did they find? They started looking at the actual people involved and found a pattern there too. Oh, interesting! Like, what kind of people were they? Was there anything common about them?\n  So, get this: in both the Spanish and Brazilian cases, they found the same people popping up over and over again in multiple scandals. Wait, really? Yeah, and not just similar scandals in the same industry either. We\u0026rsquo;re talking totally different schemes in different sectors, but the same faces kept showing up. So it\u0026rsquo;s like, you know, those people who just seem to know everyone at a party, even if they\u0026rsquo;re from totally different walks of life? Exactly! The research actually calls these folks \u0026ldquo;recidivist agents.\u0026rdquo; Recidivist agents, huh? Sounds kind of ominous. It kind of is when you think about it‚Äîthey\u0026rsquo;re like the glue, the connective tissue that holds these corruption networks together. And they make the networks way more resilient and harder to dismantle because even if you manage to break up one corrupt group, these recidivists are already connected to other people. They\u0026rsquo;re ready to start a whole new scheme somewhere else. Exactly.\n  To figure out just how important these recidivists are, the researcher simulated the growth of these networks. Wait, hold on, how do you even simulate something like that? Yeah, it gets pretty wild. It involved a lot of complex math, computer modeling, all that. But basically, they created this system where they could create these virtual agents, right? And these agents could interact and make connections based on certain rules. So, like a corruption simulator, basically? Exactly. And one of the things they could control in the simulator was the rate of recidivism. Recidivism rate meaning like how likely these agents were to, I don‚Äôt know, go back to their corrupt ways? Exactly‚Äîhow likely they were to get involved in another scheme after the first one. Fascinating. So, what happened in this corruption simulator? What did they learn when they started messing with this recidivism rate?\n  Well, it turned out the higher the recidivism rate‚Äîmeaning the more likely these virtual agents were to get involved in corruption again‚Äîthe faster the whole network grew and the more resistant it became to any attempts to break it up. So, it\u0026rsquo;s kind of like the more people you have in a group who are constantly introducing their friends to everyone else, the faster that group is going to expand, right? Right, and these recidivist agents, they\u0026rsquo;re like the ultimate connectors. Oh, so they\u0026rsquo;re not just repeat offenders, they\u0026rsquo;re spreading it around too? Exactly, they\u0026rsquo;re like super-spreaders of corrupt behavior. Whoa, that\u0026rsquo;s huge.\n  So it\u0026rsquo;s not enough to just go after people involved in one specific scandal, right? You‚Äôve got to focus on these recidivists, these super-spreaders, to actually make a dent. That\u0026rsquo;s a key takeaway from all of this, for sure. That\u0026rsquo;s fascinating! And you know, you mentioned earlier that there were these really interesting visuals in the thesis, and we\u0026rsquo;ve been talking about networks this whole time, so I‚Äôve got to ask‚Äîwhat do these corruption networks actually look like? See, I knew this is where the math stuff would come in handy, right? And it\u0026rsquo;s not even boring math, I promise‚Äîno spreadsheets. No way! This is the fun part‚Äîthe researcher actually visualized these networks.\n  Okay, now that I‚Äôve got to see. They‚Äôre in the thesis‚Äîfigures 1.2 A and B. Figure A is the Spanish network, and it‚Äôs wild. It\u0026rsquo;s huge, this dense web, almost like a spiderweb‚Äîall these connections overlapping. So it\u0026rsquo;s literally like you\u0026rsquo;re seeing who\u0026rsquo;s connected to who? Exactly! Makes it way more real than just talking about it, you know? Totally. But why is the Spanish one so much bigger than the Brazilian one? So, the Spanish research covered a lot more scandals over a longer time period, so naturally, the network‚Äôs going to be bigger and messier. Makes sense. But the Brazilian one still has the same basic patterns we talked about, right? Exactly. Figure 1.2 B, the Brazilian network, is smaller, but you still see those clusters of recidivist agents. Right, like little hubs. Exactly, holding the whole thing together. And that\u0026rsquo;s what\u0026rsquo;s crazy‚Äîthese visuals prove the similarities are there no matter how big or small the network is. It\u0026rsquo;s kind of beautiful in a weird way, you know? Like, you can pack so much info into one image. They\u0026rsquo;re not just random scandals‚Äîit\u0026rsquo;s all connected, and those connections are key if we want to understand how to actually fight corruption.\n  Seeing the data like this helps us see the weak points, the patterns, in a way we couldn‚Äôt before. This has been wild, honestly. We started with these massive scandals seeming impossible to grasp, and now we\u0026rsquo;re seeing the patterns, the common threads, even across different countries. So, what\u0026rsquo;s the big takeaway here? What should we carry with us from all this?\n  I think first off, size isn‚Äôt everything. A big scandal doesn‚Äôt automatically equal a huge network. It could be these smaller, tighter groups that are even more effective at being corrupt. And we can‚Äôt forget those recidivists, man‚Äîthey\u0026rsquo;re like the VIPs of corruption, right? And maybe most importantly, this whole thing shows us how powerful these tools are‚Äînetwork science, data visualization‚Äîthey can help us untangle problems that seem impossible. Makes you think, something that starts with, what, seven people can snowball so fast, creating these whole networks of corruption that are way more resilient than you‚Äôd expect. But by understanding them, by actually seeing them, we can start to fight back more effectively. And that‚Äôs what this deep dive is all about, right? Absolutely‚Äîknowledge is power, even when it comes to something like corruption.\n ","date":1726790400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1726790400,"objectID":"f111d015dcad36b700fda78015638ca6","permalink":"https://alvarofrancomartins.com/post/ai-talk/","publishdate":"2024-09-20T00:00:00Z","relpermalink":"/post/ai-talk/","section":"post","summary":"Two AIs having a conversation","tags":["Deep learning","Criminal networks"],"title":"I let two AIs talk about my PhD thesis","type":"post"},{"authors":["Alvaro Franco Martins","Bruno R. da Cunha","Quentin S. Hanley","Sebastian Goncalves","Matja≈æ Perc","Haroldo V. Ribeiro"],"categories":null,"content":"","date":1685318400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1685318400,"objectID":"f404451aa6ab75d18679e8d6f72706af","permalink":"https://alvarofrancomartins.com/publication/deep-learning-criminal-networks/","publishdate":"2023-05-29T00:00:00Z","relpermalink":"/publication/deep-learning-criminal-networks/","section":"publication","summary":"Deep learning methods are used to predict properties of criminal networks.","tags":["Deep Learning","Machine Learning","GraphSAGE","Node2Vec","Neural Networks","Corruption Networks","Organized crime","Corruption","Criminal networks","Money laudering"],"title":"Deep learning criminal networks","type":"publication"},{"authors":["Diego Domingues Lopes","Bruno R. da Cunha","Alvaro Franco Martins","Sebastian Goncalves","Ervin K. Lenzi","Quentin S. Hanley","Matja≈æ Perc","Haroldo V. Ribeiro"],"categories":null,"content":"","date":1663718400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1663718400,"objectID":"e538df26bdce4dd348ade3c67b939e18","permalink":"https://alvarofrancomartins.com/publication/machine-learning-partners-in-criminal-networks/","publishdate":"2022-09-21T00:00:00Z","relpermalink":"/publication/machine-learning-partners-in-criminal-networks/","section":"publication","summary":"We have demonstrated how structural properties of criminal networks and machine learning methods can be used to predict links and link features among actors engaged in nefarious activities.","tags":["Criminal networks","Machine Learning","Corruption","Brazil","Spain","Federal crimes","Drugs and arms trafficking","Organized bank robbery","Environmental crimes","Crimes against elections","Financial systems","Money laundering"],"title":"Machine learning partners in criminal networks","type":"publication"},{"authors":["Alvaro Franco Martins"],"categories":["corruption_networks","criminal_networks"],"content":"In our latest paper, the findings of universal characteristics in political corruption networks allowed us to propose a model to simulate the growth of corruption networks. Among other results, our research revealed the prominent role of recidivist agents on corruption networks. For instance, we discover that recidivists act as bridges among minor corrupt groups and coordinate peripheral criminals to perform more extensive and often much more harmful corruption processes.\nMotivated by these insights, we have used the recidivism rate (i.e, the fraction of corrupt agents recurring in the criminal activity), as the main parameter of the model. The simulations not only produce networks with features very similar to those observed in the empirical data, but also indicates that corruption networks operate around a critical recidivism rate. More specifically, corruption networks simulated below this critical recidivism rate are completely fragmented, while networks generated above this critical value become overly connected.\nIn this post, I will\n Describe the model  Display an interactive demonstration  Present the algorithm of the model in Python   The model We have proposed the model based on two of our main findings about political corruption networks. In particular, we have found that the size distribution of scandals is roughly approximated by an exponential distribution with a characteristic number of people around seven people. This result shows that political corruption runs in small groups that rarely exceed more than ten people (only 20% and 17% of corruption cases in Spain and Brazil, respectively). The surprising similarity in the size distribution of scandals in both countries suggests a universal pattern related to political corruption processes.\nThe second finding came from investigating the dynamics of repeat offenders. We have found that the number of recidivist agents is linearly associated with the number of people in the network over the entire network growth process. The recidivism rates (number of repeat offenders divided by the total number of offenders) are 9% for Spain and 14.2% for Brazil. Therefore, the number of recidivists ($r$) can be modeled by the following equation.\n$$r(n) = \\alpha n + \\beta,$$\nwhere $n$ is the total number of people and the parameters are\n $\\alpha$: The recidivism rate (number of repeat offenders / total number of offenders). $\\in [0, 1]$. $\\beta$: The regression coefficient. It controls the minimal number of people necessary for the emergence of the first recidivist agents. $\\in [-\\infty, 0)$.  The model works as follows. It first starts with an empty network that grows by including complete graphs representing political scandals at each iteration. The size of these complete graphs ($s$) is randomly drawn from an exponential distribution ($P$) to mimic the empirical behavior given by $P(s)\\sim e^{-s/s_c}$, where $s_c$ represents the characteristic size of corruption scandals (empirically, $s_c\\approx 7$ people). We consider that part of the agents added to the network at each iteration are recidivists. We assume the number of recidivists to increase linearly according with the equation of $r(n)$. We keep track of the number of recidivists during the network growth process, and when new recidivists emerge, we randomly select nodes already present in the network to become recidivists and make them belong to the next scandal (complete graph) added to the network.\nIn addition, when selecting nodes for representing recidivist agents, we can select nodes that were already recidivists with a small probability $p$ or nodes that will become recidivists for the first time with probability $1-p$. This last procedure allows us to control the number of agents involved in more than two corruption scandals and reproduce the empirical behavior (about 2.5% of all agents of both Spanish and Brazilian networks fit this condition).\nInteract with the model simulations The application below allows you to interact with the network\u0026rsquo;s simulations and see how they evolve as you add new scandals. To play with it, first click in the Start new network button and then add as many scandals as you want using the Add new scandal button. Please note that, initially, only complete graphs will appear. After a while, however, the recidivists will show up and they will connect different parts of the network.\n Network Corruption Model  #mynetwork { display: inline-block; height: 620px; width: 100%; border: 1px solid #444444; background-color: #222222; } .input-group { width: 100%; padding: 0px; } .my_input { border: solid 1px #ccc; padding-left: 20px; border-radius: 5px; margin-bottom: 5px; } .btn-primary{ font-size: 20px; margin-left: 10px; margin-bottom: 5px; } .btn-outline-primary{ font-size: 20px; margin-left: 10px; margin-bottom: 5px; } .row { margin-left:2px; }      $\\alpha$ \u0026nbsp\u0026nbsp\u0026nbsp $\\beta$ \u0026nbspStart new network Add new scandal    var container = document.getElementById(\"mynetwork\"); proba = 0.024; lambda = 7.33; const options = { \"autoResize\": true, \"height\": '100%', \"width\": '100%', \"physics\": { \"enabled\": true, \"forceAtlas2Based\": { \"theta\": 0.9, \"gravitationalConstant\": -100, \"centralGravity\": 0.01, \"springConstant\": 0.08, \"springLength\": 100, \"damping\": 0.7, \"avoidOverlap\": 0 }, \"maxVelocity\": 50, \"minVelocity\": 0.1, \"solver\": 'forceAtlas2Based', \"stabilization\": { \"enabled\": false }, \"timestep\": 0.2, \"adaptiveTimestep\": true, }, \"edges\": { \"smooth\": false }, \"nodes\": { \"shape\": \"dot\", \"size\": 10, }, \"interaction\": { \"dragNodes\": false, \"dragView\": true } } function startNewNetwork() { a = parseFloat(document.getElementById(\"recidivism_rate\").value); b = parseFloat(document.getElementById(\"beta_parameter\").value); last_agent_index = 0; total_repeated_agents = 0; repeated_agent_names = []; agent_names = []; nodes = new vis.DataSet(); edges = new vis.DataSet(); data = { nodes: nodes, edges: edges, }; return network = new vis.Network(container, data, options); } function expoSampling(scale) { return Math.round(-scale * Math.log(1.0 - Math.random())); } function addCompleteGraph() { // calculate the size of the complete graph to enter the network var n_new_agents = expoSampling(lambda); while (n_new_agents 0) { var minimo = Math.min(new_repeated_agents, new_agent_names.length); for (let i = 0; i 0)) { id_old = repeated_agent_names[Math.floor(Math.random() * repeated_agent_names.length)]; } else { let difference = agent_names.filter(x = !repeated_agent_names.includes(x)); id_old = difference[Math.floor(Math.random() * difference.length)]; total_repeated_agents += 1; } new_agent_names[i] = id_old; repeated_agent_names.push(id_old); } } for (let i = 0; i { e.target.disabled = true setTimeout(() = { e.target.disabled = false }, numSeconds * 500) }) function enableAddGraph() { document.getElementById(\"add_new_scandal\").disabled = false; }    This interactive visualization was made using visjs, a browser based visualization library. The figures below show a visual comparison between simulated and empirical networks. Figure 1 is a simulation of the Brazilian corruption network using its recidivism rate, and Figure 2 shows the empirical network.\n Figure 1: A network simulation with $\\alpha = 0.142$.   Figure 2: The Brazilian corruption network.    For more comparisons (both visual and quantitative) between the model and the empirical networks, see the paper or take a look at my other post where I have summarized our results.\nThe algorithm In order to run the model, we first need to import the following packages:\nimport numpy as np import graph_tool.all as gt from itertools import combinations The function which generate the network links according to our model is written as follows.\nClick to view the code def generate_net_links(tmax = 100, lambda_ = 7.33, a = 0.09, b = -11.5, proba = 0.024): \u0026#34;\u0026#34;\u0026#34; Generate a corruption network based on our model. Parameters --------- tmax : int Number of iteration steps (default: 100). lambda_ : float Characteristic number of people per scandal (default: 7.33). a, b : float Parameters defining the number of repeated agents (nr) as a function of total number of agents (n): nr = a*n + b (default: 0.09, -11.5). proba : float Probability of selecting a repeated agent that was already involved in another scandal (default: 0.024). Returns ------- links_list : list A list of edge lists where each element correspond to a particular iteration step. \u0026#34;\u0026#34;\u0026#34; t = 0 links = [] links_list = [] agent_names = set() last_agent_index = 0 repeated_agent_names = set() total_repeated_agents = 0 while t \u0026lt; tmax: n_new_agents = int(np.round(np.random.exponential(lambda_))) if n_new_agents \u0026gt; 1: new_agent_names = [x for x in np.arange(last_agent_index, last_agent_index + n_new_agents)] last_agent_index += n_new_agents new_repeated_agents = int(np.round((a*(len(agent_names)) + b - total_repeated_agents))) if new_repeated_agents \u0026gt; 0: for i in range(min(new_repeated_agents, len(new_agent_names))): if (np.random.uniform() \u0026lt;= proba) \u0026amp; (len(repeated_agent_names) \u0026gt; 0): #select from repeated_agent_names repeated_agent = np.random.choice(list(repeated_agent_names)) else: #select from agent_names repeated_agent = np.random.choice(list(repeated_agent_names^agent_names)) total_repeated_agents += 1 new_agent_names[i] = repeated_agent repeated_agent_names.add(repeated_agent) for agent_ in new_agent_names: agent_names.add(agent_) new_links = list(combinations(new_agent_names, 2)) links_list += [new_links] t += 1 return links_list \n This function returns a list of edge lists, where each element correspond to a particular iteration step.\nedge_lists = generate_net_links(tmax = 100, a = 0.142) # e.g, [[(0, 1), (0, 3), ... (5, 6)], [(7, 8), (7, 9) ... (14, 15)], ... ] To create the network until step $t$ we need to concatenate these lists.\ndef network(t, edges_list): g = gt.Graph(directed = False) edge_list_t = np.concatenate(edges_list[:t]) g.add_edge_list(edge_list_t, hashed = True) # Self loops and parallel edges are not allowed.  gt.remove_self_loops(g) gt.remove_parallel_edges(g) return g Now we can generate the network until $t$ steps (100 in this case).\nfinal_network = network(100, edge_lists) final_network  \u0026lt;Graph object, undirected, with 767 vertices and 4805 edges, at 0x7f2789007d60\u0026gt;\n Closing thoughts The most important aspect of this model is that it highlights the relevance of recidivists in criminal contexts. Recidivists are able to connect different parts of networks and function as brokers. In other words, they represent the backbone of criminal networks, sustaining organized crime across time and space. In this sense, the recidivism rate plays an important role in the evolution, structure and dynamics of corruption networks.\nFrom a practical perspective, our model may have important implications for law enforcement and intelligence activities. In a scenario where we are able to estimate the number of recidivists, we could therefore approximate relevant features regarding the evolution and structure of the underlying network. Moreover, our model can even be used as a benchmark for related corruption network investigations, such as link prediction or efficiency in network dismantling.\n Do something   -- Main references:\n  Martins, A. F., da Cunha, B. R., Hanley, Q. S., Gon√ßalves, S., Perc, M., \u0026amp; Ribeiro, H. V. (2022). Universality of political corruption networks. Scientific Reports, 12(1), 1-10.\n  Ribeiro, H. V., Alves, L. G., Martins, A. F., Lenzi, E. K., \u0026amp; Perc, M. (2018). The dynamical structure of political corruption networks. Journal of Complex Networks, 6(6), 989-1003.\n  ","date":1651536000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1651536000,"objectID":"7147f3c8217ff551f455891882c4d951","permalink":"https://alvarofrancomartins.com/post/corruption-networks-model/","publishdate":"2022-05-03T00:00:00Z","relpermalink":"/post/corruption-networks-model/","section":"post","summary":"Interact with realistic simulations of corruption networks","tags":["organized crime","corruption networks","modelling corruption","mathematical model","corruption scandal","complex systems","criminal network","crime modelling","recidivism","recidivist","corruption","politics","scandals","Brazil","Spain","crime","model"],"title":"Computational model of political corruption networks","type":"post"},{"authors":["Alvaro Franco Martins","Bruno R. da Cunha","Quentin S. Hanley","Sebastian Goncalves","Matja≈æ Perc","Haroldo V. Ribeiro"],"categories":null,"content":"","date":1651017600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1651017600,"objectID":"239251361120f54541900154de079b61","permalink":"https://alvarofrancomartins.com/publication/universality-of-political-corruption-networks/","publishdate":"2022-04-27T00:00:00Z","relpermalink":"/publication/universality-of-political-corruption-networks/","section":"publication","summary":"Our results show that corruption networks share universal characteristics that are independent of social and cultural differences among countries.","tags":["Corruption Networks","Organized crime","Corruption","Criminal networks"],"title":"Universality of political corruption networks","type":"publication"},{"authors":["Alvaro Franco Martins"],"categories":["corruption_networks","criminal_networks"],"content":"Political corruption is an inherent problem in our societies. Corrupt behavior is a multifaceted phenomenon responsible for a variety of socioeconomic limitations. In general, isolated agents engaged in criminal acts rarely pose a major threat to society. However, this scenario changes completely when we consider, for example, multiple corruption scandals.\nAlthough the people involved in corruption obviously want to keep it in secrecy, they do not operate without leaving traces. A natural approach to consider this collective behavior can be taken from a combination of scientific fields, such as network science, complexity science, and data science.\nCriminal networks are not simply social networks operating in criminal contexts. The interactions within these systems go beyond social norms and are often shaped by trade-offs between concealment and efficiency. Political corruption networks represent an additional layer of complexity. Frequently involving high ranking individuals, a great deal of polarization and many controversies, political corruption weakens democracy, damages political stability and spreads mistrust in the rule of law.\nIn our recent paper Universality of political corruption networks, we used publicly available data from Brazil and Spain to reveal the underlying patterns of political corruption networks. Our work has revealed fascinating statistical similarities in the growth of these networks. This work include many results I obtained during my master\u0026rsquo;s degree and ongoing PhD. Here I summarize our main findings:\n We have found that, in both countries, the size of corruption scandals is approximately exponentially distributed. These distributions have, on average, roughly 7 people per scandal. Therefore, people tend to act in small groups when they are involved in corruption processes.   Figure 1: Complementary cumulative distribution of scandals sizes in (A) Spain and (B) Brazil.  The networks consist of nodes representing people listed in the scandals and links indicating that two people were involved in the same corruption scandal. These networks share surprising features, such as high clustering coefficients, moderately high assortativity coefficients, and low average shortest path length.   Figure 2: (A) Spanish and (B) Brazilian political corruption networks.  The networks' degree distributions are well approximated by exponential distributions. Moreover, the characteristic degrees evolved to a similar plateau, roughly with the same average number of connections.   Figure 3: Changes in the characteristic degree over the years for (A) Spanish and (B) Brazilian corruption networks. The insets show the cumulative distributions of the vertex degree (on a log-linear scale) for the last year of the networks.  The networks present community structures where the number of modules is linearly associated with the total number of scandals.   Figure 4: (A) Spanish and (B) Brazilian number of modules versus number of scandals.  The time evolution of the networks are characterized by abrupt changes in the size of the largest connected component, which is due to the coalescence (or connection) of different network components. This process is caused by recidivists (i.e., individuals involved in at least two scandals).   Figure 5: Coalescence processes observed in both political corruption networks.  The number of recidivists is linearly associated with the total number of people. The recidivism rates (number of repeat offenders / total number of offenders) are 9% in Spain and 14.2% in Brazil.   Figure 7: Linear relationships between the number of repeat offenders and the total number of people.  Recidivists are vertices that connect different parts of the network, functioning as brokers (they have the highest betweenness centrality values). In this sense, the recidivism rate plays an important role in the evolution, structure, and dynamics of corruption networks.   Figure 7: Spanish political corruption network showing recidivists nodes in red.  We have proposed a computational model to simulate corruption networks. The model takes into account two results: the recidivists linear pattern and the size distribution of scandals. We can see below that our model generate networks visually similar to the empirical corruption networks.   Figure 8: (A) Spanish and (B) Brazilian political corruption networks. Model simulations of the empirical networks using (C) Spanish and (D) Brazilian recidivism rates.   More importantly, we have verified that the model is capable of simulating networks with features very similar to those observed in the empirical data.   Figure 9: The model generates realistic networks that are able to reproduce the empirical network properties. The degree distributions of the model networks can be reasonably described by exponential degree distributions. Furthermore, the network simulations present a linear relationship between the number of modules and the number of complete graphs.   Overall, we have presented a comprehensive investigation of corruption networks related to political scandals in Spain and Brazil over nearly three decades. It is important to remember that these countries have a long history of political corruption and are known worldwide for having huge corruption scandals.\nOur results show that corruption networks share universal characteristics that are independent of social and cultural differences among countries. Ultimately, this work emphasizes the influence of recidivists on organized crime, indicating its susceptibility to interventions targeting these criminals.\nI believe that this work significantly improves the understanding of political corruption networks and organized crime. For more details, please do not hesitate to contact me. I would be happy to talk about my work.\n","date":1649980800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1649980800,"objectID":"7b4a1a1ff33f805bd3e010c90f3c0c68","permalink":"https://alvarofrancomartins.com/post/corruption-networks/","publishdate":"2022-04-15T00:00:00Z","relpermalink":"/post/corruption-networks/","section":"post","summary":"Deep dive into the inner workings of worldwide political corruption networks","tags":["Corruption networks","Organized crime","Corruption scandal","Complex systems","Network science","Data science","Recidivism","Recidivist","Politics","Network","Scandal","Crime","Brazil","Spain"],"title":"Unveiling the hidden patterns of corruption networks","type":"post"},{"authors":["Alvaro Franco Martins"],"categories":["criminal_networks"],"content":"  -- Criminal networks are a major and ubiquitous problem in modern societies. However, effective and general approaches to interrupt their functioning are still an open problem. In this post, I will apply a method of network dismantling to four cocaine smuggling networks. These networks are the result of operations from 2006 to 2009 and include countries such as Brazil, Colombia, Mexico, Spain, and Uruguay. Additionally, by the end of this post, I will suggest that these networks can be modeled using an extension of the Barab√°si-Albert model.\nThe United Nations Office on Drugs and Crime (UNODC) defines drug trafficking as \u0026ldquo;a global illicit trade involving the cultivation, manufacture, distribution and sale of substances which are subject to drug prohibition laws\u0026rdquo;. A 2021 report indicates that the amount of cocaine seized globally reached record levels in 2019, with the majority of cocaine continuing to be seized in the Americas. Despite immense and increasing efforts to interrupt these activities, counterdrug interdictions appear to be making the situation worse. Drug trafficking networks are flexible, fluid structures and can respond instantly to attacks. For example, it has been suggested that some networks can become even more efficient after targeted attacks.\n Figure 1: Main cocaine trafficking flows, 2015‚Äì2019. Source: UNODC, World Drug Report 2021.  In terms of network dismantling, a naive approach for attacking criminal networks is to target the most connected people (those with a high degree of centrality). But realistically, this does not work. It turns out that the cost of targeting these individuals can be substantially greater than attacking other criminals in the network. Moreover, in times of conflict, these central positions are often replaceable by other criminals. The resilience of a criminal network also depends on its level of redundancy, that is, how easily the individuals are replaceable. These characteristics make dismantling criminal networks an arduous task.\nSeveral approaches have been proposed for the purpose of dismantling networks. These approaches are divided into either link or node removal. Here you can see a comparative analysis of the main methods currently used in scientific research. In particular, I will be applying, on four Cocaine Smuggling Networks, a dismantling method proposed in a PNAS paper (Generalized Network Dismantling). The advantage of this method is that it takes into account the cost of attacking the vertices. The cost of removing a vertex is its degree centrality and the algorithm finds a set of nodes whose removal results in the fragmentation of the network at minimal overall cost.\nTo perform the dismantling analysis, I adapted Petter Holme\u0026rsquo;s implementation. Thanks to him, the method proposed in the paper was converted from C++ to Python 2. I then converted it to Python 3 and applied it to the networks.\nUltimately, my main goals in this post are\n Present the Generalized Network Dismantling (GND) method by examining its effectiveness and comparing the costs when the simplest dismantling approach (removing the highest degree vertices) is applied. Suggest that cocaine smuggling networks can be modeled via an extension of the Barab√°si-Albert model.  Cocaine trafficking groups The dataset contains information collected during police investigations of four groups involved in cocaine trafficking. These groups form networks in which the vertices represent the individuals and the links indicate their communications. The networks are shown below, with the size of each node proportional to its degree.\nOperation MAMBO: The investigation started in 2006 and involved Colombian citizens that were introducing 50 kg of cocaine to be adulterated and distributed in Madrid (Spain). Ultimately, the group was involved in smuggling cocaine from Colombia through Brazil and Uruguay to be distributed in Spain. This is a typical Spanish middle cocaine group acting as wholesale supplier between a South American importer group and retailers in Madrid.\n  Mambo network: 31 vertices and 58 edges.\nOperation ACERO: This investigation started in 2007 and involved a smaller family-based group. The group was composed mainly of members of a same family and was led by a female. They distributed cocaine in Madrid (Spain) that was provided to them by other groups based in a northwest region of the country, one of the most active areas in the provision of cocaine from the countries of origin. The group also had their own procedures to launder money.\n  Acero network: 25 vertices and 37 edges.\nOperation JAKE: In 2008, the group investigated was operating as a wholesale supplier and retail distributor of cocaine and heroin in a large distribution zone located in Madrid (Spain), where gypsy clans traditionally carry out similar activities. The group was in charge of acquiring, manipulating and selling the drugs in the gypsy quarter.\n  Jake network: 38 vertices and 50 edges.\nOperation JUANES: In 2009, the police investigation detected a group involved in the smuggling of cocaine from Mexico to be distributed in Madrid (Spain). In this case, the group operated in close cooperation with another organization that was laundering the illegal income from drug distribution from this and other groups. The cocaine traffickers earned an estimated EUR 60 million.\n  Juanes network: 51 vertices and 93 edges.In terms of network metrics, these networks exhibit low density (i.e, they are sparse), negative assortativity (which means that high degree nodes have a slight tendency to connect to low degree nodes), and relatively low average clustering. Since these networks are relatively small in size, an analysis of the degree distribution would not be so informative. However, a brief preliminary calculation using Powerlaw‚Äôs Python package showed that power law distributions were in better agreement compared to the exponential distributions. The community structure analysis was also not very helpful. Although I used Infomap to color the nodes according to each module, I was unable to find community structures using the Bayesian SBM. Below are some of the main metrics I calculated for these networks.\nClick to show the density smuggling_networks_density 0.125 # Mambo 0.123 # Acero 0.071 # Jake 0.073 # Juanes \n Click to show the assortativity smuggling_networks_assortativity -0.088 # Mambo -0.160 # Acero -0.173 # Jake  -0.081 # Juanes \n Click to show average clustering smuggling_networks_average_clustering 0.442 # Mambo 0.268 # Acero 0.110 # Jake 0.364 # Juanes \n Click to show network efficiency smuggling_networks_global_efficiency 0.473 # Mambo 0.481 # Acero 0.420 # Jake 0.373 # Juanes \n Click to show average shortest path smuggling_networks_average_shortest_path 2.473 # Mambo 2.413 # Acero 2.705 # Jake 3.308 # Juanes \n Click to show the pseudo network diameter smuggling_networks_global_efficiency 4.0 # Mambo 5.0 # Acero 4.0 # Jake 7.0 # Juanes \n Network dismantling The following video demonstrates a simple dismantling simulation of the Juanes network. For a better visualization, I have applied the basic approach based on degree. The purpose of this video is to show the network changing while the high degree nodes are being removed.\n  In the following figures, I show the (normalized) size of the largest connected component (LCC) as a function of the number of nodes removed. In each figure, pale pink represents the degree-based approach and pale blue represents the GND method1. Since Petter Holme\u0026rsquo;s implementation comes with a randomness to make the output independent of the labeling of nodes, I have used average values. Moreover, in order to have a baseline, the black line shows the average of a random node removal approach and the shaded region represents a standard deviation band. The insets present the cumulative cost (i.e, the sum of the degrees) of removing the vertices.\n Figure 2: Mambo network dismantling.   Figure 3: Acero network dismantling.   Figure 4: Jake network dismantling.   Figure 5: Juanes network dismantling.  While both methods are better than random node removal, the degree-based dismantling seems to work better. However, this comes at a greater cost. As we can see, although the degree-based dismantling outperforms the GND method, the cost is always higher. Interestingly, we have a slightly different scenario for the Juanes network (Figure 4). In this case, the GND cost is still lower, but both aproaches seem to perform equally well.\nOverall, these two aproaches can also be useful as baselines. Costs curves from other aproaches could be compared against these two and this comparison may present an additional analysis for further consideration between cost and effectiveness.\nNetwork modeling Network models represent useful frameworks in which we can study complex real-world networks. Some random graph models and their extensions have been capable of reproducing the evolution and function of real systems and some of their main features. See here a relatively old but essential review of developments in this field.\nLooking more closely at these cocaine smuggling networks, they seem to be based on preferential attachment. Some nodes have many connections to other nodes which, in turn, are not very well connected. This is an indication of preferential attachment, a core property of scale-free networks. Although I have not concluded that their distributions are adequately described by power laws, we could try to simulate these networks with a scale-free model.\nAs a first guess, we could try using the well-known Barab√°si‚ÄìAlbert model, since it is also able to generate networks with negative assortativity, low average clustering and low density. In this model, a network of size $n$ is grown by attaching new nodes each with $m$ edges that are preferentially attached to existing nodes with a high degree. However, if $m = 1$ the model networks have clustering coefficients equal to zero, but in the smuggling networks this coefficient is nonzero. We can try setting $m = 2$, but the graphs would (at least visually) clearly differ from the empirical networks. Click here to see an example of this model for three different values of $m$.\nAfter doing some research, I found a version of the barabasi model called dual Barab√°si‚ÄìAlbert model (DBA), implemented in NetworkX. This model has two parameters that control the attachment probabilities of new nodes, described as follows. A graph of $n$ nodes is grown by attaching new nodes each with either $m_1$ edges (with probability $p$) or $m_2$ edges (with probability $1-p$), which are preferentially attached to existing nodes with a high degree. Moreover, as the authors of the paper explain, \u0026ldquo;the DBA model is not guaranteed to (and will likely not) yield power-law degree distributions\u0026rdquo;. Therefore, our ignorance regarding the degree distributions of the empirical networks is not of great concern.\nThe network below is an example of a random network generated by this model. The visual similarity is surprising. If we look closely, we can see some of the connection patterns seen in the empirical networks.\n  Random network: A random network ($n = 38$, $m_1 = 1$, $m_2 = 5$ and $p = 0.7$) generated using the dual Barab√°si‚ÄìAlbert preferential attachment model. The resulting graph has 65 edges.\nOf course, this is just one example with specific parameters. We obviously have a lot of room for parameter tuning here. However, in order to obtain the similar pattern of a high degree node connecting to many other nodes that themselves have just one connection, either $m_1$ or $m_2$ must be set equal to 1. The other parameters ($m_2$ and $p$) were chosen arbitrarily.\nNaturally, we can examine whether the model networks also produce similar properties to those calculated for the empirical ones. The following values are averages, for every metric, of 1,000 networks grown using the model. Each one of these has the same size as the empirical smuggling networks. Also, in all calculations, I have set $m_1 = 1$, $m_2 = 5$ and $p = 0.7$ fixed. Ultimately, I could vary these parameters and possibly get better results by tuning them. However, as we can see below, the results are already pretty good.\nClick to show the density smuggling_networks_density 0.125 # Mambo  0.130 # Model 0.123 # Acero 0.156 # Model 0.071 # Jake 0.110 # Model 0.073 # Juanes 0.081 # Model \n Click to show the assortativity smuggling_networks_assortativity -0.088 # Mambo -0.090 # Model  -0.160 # Acero -0.108 # Model  -0.173 # Jake  -0.082 # Model  -0.081 # Juanes -0.067 # Model  \n Click to show average clustering smuggling_networks_average_clustering 0.442 # Mambo 0.207 # Model  0.268 # Acero 0.240 # Model  0.110 # Jake 0.180 # Model  0.364 # Juanes 0.151 # Model  \n Click to show network efficiency smuggling_networks_global_efficiency 0.473 # Mambo 0.473 # Model  0.481 # Acero 0.500 # Model  0.420 # Jake 0.425 # Model  0.373 # Juanes 0.424 # Model  \n Click to show average shortest path smuggling_networks_average_shortest_path 2.473 # Mambo 2.479 # Model  2.413 # Acero 2.372 # Model  2.705 # Jake 2.601 # Model  3.308 # Juanes 2.740 # Model  \n Click to show the pseudo network diameter smuggling_networks_global_efficiency 4.0 # Mambo 4.9 # Model  5.0 # Acero 4.7 # Model  4.0 # Jake 5.2 # Model  7.0 # Juanes 5.6 # Model  \n Obviously, even though the metrics are quite close, matching only six coefficients and a visual aspect is not enough to conclude that this model is an appropriate fit for smuggling networks. Also, we must remember that we only have four networks of this type. When more data of this type are available, we may be able to better support or refute this idea.\nWhat\u0026rsquo;s next? I also performed a link prediction analysis using Node2Vec and a Random Forest Classifier. Since there is no information about the evolution of these networks over time, I tried to recreate a graph that might have existed at a previous point in time. To do this, I removed some links that would not completely affect the structure of the graphs. This gave me two snapshots of the networks and allowed me to test the link prediction. In the end, I got an AUC score greater than $0.7$ for all networks. I have not completed this analysis yet, so I may post the details in the future.\n  The GND method uses a cascading approach for dismantling a network, meaning that measurements are updated after each deletion. For this reason, the same procedure was applied for the removal of the nodes with the highest degrees. The alternative approach, where the nodes to be removed are obtained only once, is known as simultaneous attack.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n   ","date":1638230400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1638230400,"objectID":"11fc5430ea3ecbf7e7ff57f1e3dc6281","permalink":"https://alvarofrancomartins.com/post/cocaine_smuggling_networks/","publishdate":"2021-11-30T00:00:00Z","relpermalink":"/post/cocaine_smuggling_networks/","section":"post","summary":"Data insights on four cocaine smuggling networks","tags":["Spain","Cocaine","Organized crime","Criminal networks"],"title":"Dismantling and modeling cocaine trafficking networks","type":"post"},{"authors":["Alvaro Franco Martins","Diego Domingues Lopes","Andre Seiji Sunahara"],"categories":["criminal_networks","redes_criminosas"],"content":"  -- Nessa postagem apresento uma perspectiva in√©dita para entender as rela√ß√µes entre os citados pela CPI da COVID-19. Essa comiss√£o parlamentar de inqu√©rito apresenta uma rede de supostos envolvidos em diversos crimes, entre eles corrup√ß√£o ativa, charlatanismo, prevarica√ß√£o e fraude. Todas as informa√ß√µes s√£o de p√∫blico acesso e foram coletadas do portal G1.\nNossa an√°lise ter√° o enfoque da ci√™ncia de redes. A representa√ß√£o de dados em grafos fornece uma abordagem poderosa, capaz de revelar padr√µes e estruturas n√£o triviais entre agentes que possuem alguma rela√ß√£o de conex√£o. A CPI da COVID apresenta 24 acusa√ß√µes e 78 nomes citados, resultando em um total de 695 conex√µes. Por meio de ferramentas advindas da teoria dos grafos, elaboramos uma visualiza√ß√£o dessa rede, calculamos algumas medidas de centralidade e mostramos que ela possui uma estrutura de comunidades.\nA rede da CPI da COVID Uma rede (ou grafo) √© composta por v√©rtices (pessoas, no nosso caso) e liga√ß√µes entre esses v√©rtices. Aqui, a liga√ß√£o entre duas pessoas ocorre se elas foram acusadas de um mesmo crime1. Abaixo voc√™ encontra uma visualiza√ß√£o interativa dessa rede, com 75 nomes2 e 695 conex√µes. Cada v√©rtice possui um tamanho proporcional ao seu n√∫mero de liga√ß√µes e, ao passar ao mouse sobre os v√©rtices, voc√™ pode ver suas quantidades de conex√µes e acusa√ß√µes.\n  Rede da CPI da COVID: 24 acusa√ß√µes, 75 v√©rtices e 695 conex√µes.\nO aspecto visual dessa rede oferece algumas pistas. Notamos que possuir muitas acusa√ß√µes nem sempre significa que o v√©rtice realiza um grande n√∫mero de conex√µes. Isto √©, determinados tipos de acusa√ß√£o englobam poucas pessoas, enquanto outros englobam mais pessoas. Por exemplo, existem diversos v√©rtices com v√°rias acusa√ß√µes e poucas conex√µes (Francisco Emerson Maximiano, Emanuela Medrades, etc) e diversos v√©rtices com poucas acusa√ß√µes e v√°rias conex√µes (Osmar Terra, Ernesto Ara√∫jo, etc). Por outro lado, os dois maiores v√©rtices da rede, Jair Bolsonaro com 49 conex√µes possui 9 acusa√ß√µes e Ricardo Barros com 43 conex√µes possui 4 acusa√ß√µes.\nPodemos ser mais quantitativos e calcular algumas medidas dessa rede a fim de caracteriz√°-la. Essa rede apresenta um coeficiente de agrupamento m√©dio alto (0,87), uma densidade consider√°vel (0,25) e um valor de di√¢metro relativamente baixo (4,0). Al√©m disso, o coeficiente de assortividade dessa rede possui um valor positivo (0,23), nos permitindo concluir que os indiv√≠duos possuem a tend√™ncia de se conectar com v√©rtices que possuem import√¢ncia (em termos de n√∫mero de conex√µes) similar. De forma geral, essas medidas sugerem que estamos tratando de uma rede bastante coesa.\nMedidas de Centralidade Grau A centralidade de grau oferece uma das grandezas mais b√°sicas de redes. O grau de um v√©rtice representa simplesmente seu n√∫mero de conex√µes. Valores mais altos dessa grandeza indicam indiv√≠duos populares e que possuem uma posi√ß√£o privilegiada na rede. A Figura 1 mostra os nomes dos v√©rtices da rede que possuem os maiores valores de grau. No nosso caso, um grau elevado indica que a pessoa est√° sendo acusada por crime(s) com grande n√∫mero de acusados, enquanto um grau reduzido indica que as acusa√ß√µes s√£o por crimes com baixo n√∫mero de acusados.\n  Figura 1: Dez nomes da rede que possuem os maiores valores de grau.\nIntermedia√ß√£o A intermedia√ß√£o quantifica o n√∫mero de vezes que um v√©rtice age como ponte de comunica√ß√£o entre dois v√©rtices quaisquer da rede. Mais especificamente, para um determinado v√©rtice, essa medida representa a quantidade de vezes que ele atua como intermedi√°rio das comunica√ß√µes. Pessoas com alto valor de intermedia√ß√£o conseguem transmitir informa√ß√µes com facilidade e tamb√©m t√™m tend√™ncia a serem bem informadas. No nosso caso, esses indiv√≠duos s√£o aqueles que atuam como pontes entre os acusados de diferentes crimes presentes na rede. A Figura 2 mostra os nomes dos v√©rtices da rede que possuem os maiores valores de intermedia√ß√£o.\n  Figura 2: Dez nomes da rede que possuem os maiores valores de intermedia√ß√£o.\nProximidade A proximidade de um v√©rtice quantifica sua dist√¢ncia m√©dia em rela√ß√£o a todos os outros v√©rtices. Dessa forma, pessoas com maiores valores de proximidade est√£o, em m√©dia, mais perto de todas as outras pessoas. Numa rede social, por exemplo, a pessoa com maior proximidade, assim como para intermedia√ß√£o, consegue disseminar melhor as informa√ß√µes. No nosso caso, pessoas com alta proximidade s√£o aquelas que, por compartilharem acusa√ß√µes com muitas outras, possuem uma dist√¢ncia pr√≥xima da maioria dos acusados. A Figura 3 mostra os nomes dos v√©rtices da rede que possuem os maiores valores de proximidade.\n  Figura 3: Dez nomes da rede que possuem os maiores valores de proximidade.\nDo ponto de vista t√©cnico, apesar de aparentarem ser medidas parecidas, a intermedia√ß√£o e a proximidade medem caracter√≠sticas diferentes: a intermedia√ß√£o fornece um quantitativo de quantos caminhos passam por determinado v√©rtice durante a comunica√ß√£o entre todos os v√©rtices da rede e a proximidade, por outro lado, quantifica a dist√¢ncia m√©dia de um v√©rtice em rela√ß√£o aos demais. Podemos dizer que pessoas com maior intermedia√ß√£o (ou proximidade) possuem influ√™ncia consider√°vel na rede por virtude de seu controle sobre a informa√ß√£o que circula.\nConsiderando os dados da CPI da COVID, a conex√£o entre duas pessoas significa simplesmente que a elas foi atribu√≠do o mesmo crime. Portanto, as medidas de centralidade acima devem ser interpretadas com cautela. No entanto, caso as acusa√ß√µes e suas conex√µes sejam comprovadas, as medidas ter√£o a interpreta√ß√£o usual e poderemos destacar com mais certeza os indiv√≠duos importantes na concretiza√ß√£o e articula√ß√£o dos crimes.\nEstrutura de Comunidades A estrutura de comunidades (ou m√≥dulos) √© uma propriedade encontrada em diversos tipos de redes. De forma simplificada, essas comunidades podem ser pensadas como grupos de v√©rtices mais densamente conectados entre si do que com outros grupos de v√©rtices da rede. A detec√ß√£o dessas estruturas pode fornecer informa√ß√µes importantes. Em geral, redes e organiza√ß√µes criminosas possuem a tend√™ncia de formar comunidades com a finalidade de reduzir o risco de vazamento de informa√ß√µes.\nCom o objetivo de encontrar a estrutura de comunidades da rede da CPI, utilizamos um algoritmo de detec√ß√£o de comunidades conhecido como infomap3. A visualiza√ß√£o abaixo apresenta a rede da CPI da COVID com destaque para sua estrutura modular, onde as cores representam as diferentes comunidades encontradas.\n  Rede da CPI da COVID: Destaque para 5 comunidades encontradas.\nNo total, nossa an√°lise retornou 5 comunidades4. Portanto, o n√∫mero de supostos crimes (24) √© quase cinco vezes esse valor. Esse resultado surpreende, uma vez que tende-se a imaginar que a maioria dos crimes configurariam suas pr√≥prias comunidades. No entanto, o resultado sugere que v√°rios desses supostos crimes podem ser considerados como um s√≥.\nPara se ter uma ideia quantitativa dessas comunidades, a Figura 6 mostra o n√∫mero de pessoas e supostos crimes dentro de cada um dos m√≥dulos. Os valores do eixo-x representam cada comunidade, de acordo com os √≠ndices mostrados na rede acima. Al√©m disso, as cores das barras tamb√©m s√£o correspondentes √†s cores de cada comunidade.\nN√∫mero de pessoas N√∫mero de crimes\n  Figura 6: N√∫mero de pessoas e seus supostos crimes dentro de cada comunidade.\nExistem outras in√∫meras informa√ß√µes desses dados que poder√≠amos explorar. A pr√≥xima an√°lise que, ao meu ver, seria interessante realizar, √© verificar se a distribui√ß√£o de grau da rede apresenta algum padr√£o. Ou ainda, explorar a informa√ß√£o sobre o n√∫mero de acusa√ß√µes dos citados: encontrar, por exemplo, se existe alguma rela√ß√£o entre o n√∫mero de acusa√ß√µes de cada pessoa e suas medidas de centralidade.\nPoder√≠amos ir al√©m e agregar outras informa√ß√µes n√£o contidas nesse conjunto de dados. Um exemplo seria considerar as fun√ß√µes (ou cargos) dos acusados. Isso nos possibilitaria verificar a exist√™ncia de cargos mais privilegiados na rede. As op√ß√µes s√£o in√∫meras. Entretanto, deixarei essas quest√µes em aberto para o caso de alguma colabora√ß√£o futura. Caso voc√™ tenha interesse em trabalhar com esses dados, n√£o hesite em me contatar. Tamb√©m fico √† disposi√ß√£o para quaisquer d√∫vidas.\nPor fim, agrade√ßo a contribui√ß√£o dos colegas Diego Domingues Lopes e Andre Seiji Sunahara na elabora√ß√£o dessa postagem.\nInforma√ß√µes gerais Abaixo voc√™ encontra quatro tabelas contendo os dados da rede da CPI. As duas primeiras oferecem uma checagem r√°pida dos acusados e de seus supostos crimes, e as duas √∫ltimas cont√©m essas informa√ß√µes5 para cada comunidade.\nAcusados e seus supostos crimes    * { box-sizing: border-box; } #myInput { padding: 12px 20px 12px 40px; border: 1px solid #ddd; display: block; margin-bottom: 12px; margin-left: 2.5%; } #myTable { border-collapse: collapse; width: 95%; max-height: 400px; overflow-x:auto; font-size: 18px; } #myTable th, #myTable td { text-align: left; margin: 0 auto; padding: 20px; } /* Table Striped */ table  tbody  tr:nth-child(odd)  td, table  tbody  tr:nth-child(odd)  th { background-color: #ffffff; } table  tbody  tr:hover  td, table  tbody  tr:hover  th { background-color: #f5f5f5; }    Nome Acusa√ß√µes   Roberto Dias Forma√ß√£o de Organiza√ß√£o Criminosa, Improbidade Administrativa, Corrup√ß√£o Passiva   Paolo Zanotto Epidemia com Resultado em Morte   Eduardo Bolsonaro Incita√ß√£o ao crime   Mayra Pinheiro Prevarica√ß√£o, Epidemia com Resultado em Morte, Crime Contra Humanidade   Bia Kicis Incita√ß√£o ao crime   Carlos Wizard Incita√ß√£o ao crime, Epidemia com Resultado em Morte   Regina C√©lia Oliveira Advocacia Administrativa   Rodrigo Esper Crime Contra Humanidade, Perigo Para a vida ou Sa√∫de de Outrem   Luiz Paulo Dominghetti Corrup√ß√£o Ativa   Osmar Terra Incita√ß√£o ao crime, Epidemia com Resultado em Morte   Marcelo Bento Pires Advocacia Administrativa   F√°bio Wajngarten Prevarica√ß√£o, Advocacia Administrativa   Fernando Parrillo Falsidade Ideol√≥gica, Crime Contra Humanidade, Perigo Para a vida ou Sa√∫de de Outrem, Omiss√£o de Notifica√ß√£o de Doen√ßa   Carla Guerra Crime Contra Humanidade, Perigo Para a vida ou Sa√∫de de Outrem   Marcelo Queiroga Prevarica√ß√£o, Epidemia com Resultado em Morte   Marcelo Blanco Corrup√ß√£o Ativa   Filipe Martins Incita√ß√£o ao crime   Wilson Lima Prevarica√ß√£o, Crimes de Responsabilidade   Roberto Jefferson Incita√ß√£o ao crime   Fl√°vio Adsuara Cadegiani Crime Contra Humanidade   Marcellus Jos√© Barroso Camp√™lo Prevarica√ß√£o   Bernardo Kuster Incita√ß√£o ao crime   Rafael Francisco Carmo Alves Corrup√ß√£o Ativa   Oswaldo Eust√°quio Incita√ß√£o ao crime   Jos√© Odilon Torres Corrup√ß√£o Ativa   Paola Werneck Perigo Para a vida ou Sa√∫de de Outrem   Carlos Jordy Incita√ß√£o ao crime   Mauro Luiz de Brito Ribeiro Epidemia com Resultado em Morte   Daniel Garrido Baena Falsidade Ideol√≥gica   Nise Yamaguchi Epidemia com Resultado em Morte   H√©lio Angotti Netto Incita√ß√£o ao crime, Epidemia com Resultado em Morte   Marcos Tolentino Forma√ß√£o de Organiza√ß√£o Criminosa, Improbidade Administrativa, Fraude em Contrato   Luis Carlos Heinze Incita√ß√£o ao crime   Fl√°vio Cadegiani Crime Contra Humanidade   Emanuela Medrades Forma√ß√£o de Organiza√ß√£o Criminosa, Improbidade Administrativa, Falsidade Ideol√≥gica, Fraude Processual, Uso de Documento Falso   Fl√°vio Bolsonaro Incita√ß√£o ao crime   Carlos Alberto de S√° Corrup√ß√£o Ativa, Improbidade Administrativa   Airton Soligo Usurpa√ß√£o de Fun√ß√£o P√∫blica   Leandro Ruschel Incita√ß√£o ao crime   Marconny Nunes Ribeiro Forma√ß√£o de Organiza√ß√£o Criminosa   Jo√£o Paulo F. Barros Falsidade Ideol√≥gica   Allan dos Santos Incita√ß√£o ao crime   Jos√© Alves Filho Epidemia com Resultado em Morte   Alex Lial Marinho Advocacia Administrativa   Eduardo Parrillo Falsidade Ideol√≥gica, Crime Contra Humanidade, Perigo Para a vida ou Sa√∫de de Outrem, Omiss√£o de Notifica√ß√£o de Doen√ßa   Jos√© Ricardo Santana Forma√ß√£o de Organiza√ß√£o Criminosa   Onyx Lorenzoni Incita√ß√£o ao crime, Crime Contra Humanidade   Luciano Hang Incita√ß√£o ao crime   Danilo Trento Forma√ß√£o de Organiza√ß√£o Criminosa, Improbidade Administrativa, Fraude em Contrato   Wagner Ros√°rio Prevarica√ß√£o   Arthur Weintraub Epidemia com Resultado em Morte   Paulo Eneas Incita√ß√£o ao crime   Teresa Cristina Reis de S√° Corrup√ß√£o Ativa, Improbidade Administrativa   Carla Zambelli Incita√ß√£o ao crime   Eduardo Pazuello Prevarica√ß√£o, Epidemia com Resultado em Morte, Crime Contra Humanidade, Emprego Irregular de Verbas P√∫blicas, Comunica√ß√£o Falsa de Crime   Raimundo Nonato Brasil Corrup√ß√£o Ativa, Improbidade Administrativa   Heitor Freire de Abreu Epidemia com Resultado em Morte   Francisco Emerson Maximiano Forma√ß√£o de Organiza√ß√£o Criminosa, Improbidade Administrativa, Fraude em Contrato, Falsidade Ideol√≥gica, Fraude Processual, Uso de Documento Falso   Richards Pozzer Incita√ß√£o ao crime   Ricardo Barros Incita√ß√£o ao crime, Advocacia Administrativa, Forma√ß√£o de Organiza√ß√£o Criminosa, Improbidade Administrativa   Ot√°vio Fakhoury Incita√ß√£o ao crime   Pedro Benedito Batista Junior Falsidade Ideol√≥gica, Crime Contra Humanidade, Perigo Para a vida ou Sa√∫de de Outrem, Omiss√£o de Notifica√ß√£o de Doen√ßa   Andreia da Silva Lima Corrup√ß√£o Ativa, Improbidade Administrativa   Thiago Fernandes da Costa Advocacia Administrativa   Ernesto Ara√∫jo Incita√ß√£o ao crime, Epidemia com Resultado em Morte   Fernando Oikawa Crime Contra Humanidade, Perigo Para a vida ou Sa√∫de de Outrem   Tercio Arnaud Tomaz Incita√ß√£o ao crime   Roberto Goidanich Incita√ß√£o ao crime   T√∫lio Silveira Improbidade Administrativa, Falsidade Ideol√≥gica, Uso de Documento Falso   Jair Bolsonaro Incita√ß√£o ao crime, Prevarica√ß√£o, Epidemia com Resultado em Morte, Crime Contra Humanidade, Emprego Irregular de Verbas P√∫blicas, Crimes de Responsabilidade, Charlatanismo, Infra√ß√£o a Medidas Sanit√°rias Preventivas, Falsifica√ß√£o de Documento Particular   Amilton Gomes de Paula Tr√°fico de Influ√™ncia   Carlos Bolsonaro Incita√ß√£o ao crime   Elcio Franco Improbidade Administrativa, Epidemia com Resultado em Morte   Cristiano Carvalho Corrup√ß√£o Ativa   Fernanda de Oliveira Igarashi Falsidade Ideol√≥gica   Daniella de Aguiar Moreira da Silva Tentativa de Homic√≠dio   Braga Netto Epidemia com Resultado em Morte   Luciano Dias Epidemia com Resultado em Morte    function myFunction() { var input, filter, table, tr, td, i, txtValue; input = document.getElementById(\"myInput\"); filter = input.value.toUpperCase(); table = document.getElementById(\"myTable\"); tr = table.getElementsByTagName(\"tr\"); for (i = 0; i -1) { tr[i].style.display = \"\"; } else { tr[i].style.display = \"none\"; } } } }    Acusados que compartilham as mesmas acusa√ß√µes    * { box-sizing: border-box; } #myInput2 { padding: 12px 20px 12px 40px; border: 1px solid #ddd; display: block; /*margin-right: auto;*/ /*margin-left: 25%; */ margin-bottom: 12px; margin-left: 2.5%; } #myTable2 { border-collapse: collapse; width: 95%; max-height: 470px; overflow-x:auto; font-size: 18px; } #myTable2 th, #myTable2 td { text-align: left; margin: 0 auto; padding: 20px; } #myTable2 th, #myTable2 td { text-align: left; margin: 0 auto; padding: 20px; }    Pessoa 1 Pessoa 2 Supostos crimes compartilhados   Elcio Franco Jair Bolsonaro Epidemia com Resultado em Morte   Allan dos Santos Paulo Eneas Incita√ß√£o ao crime   Raimundo Nonato Brasil Cristiano Carvalho Corrup√ß√£o Ativa   Oswaldo Eust√°quio Ot√°vio Fakhoury Incita√ß√£o ao crime   Nise Yamaguchi Ernesto Ara√∫jo Epidemia com Resultado em Morte   Carla Zambelli Fl√°vio Bolsonaro Incita√ß√£o ao crime   Arthur Weintraub Luciano Dias Epidemia com Resultado em Morte   Oswaldo Eust√°quio Onyx Lorenzoni Incita√ß√£o ao crime   Bia Kicis Eduardo Bolsonaro Incita√ß√£o ao crime   H√©lio Angotti Netto Carla Zambelli Incita√ß√£o ao crime   Carla Guerra Onyx Lorenzoni Crime Contra Humanidade   Mayra Pinheiro Fernando Oikawa Crime Contra Humanidade   Marcos Tolentino Roberto Dias Improbidade Administrativa, Forma√ß√£o de Organiza√ß√£o Criminosa   Oswaldo Eust√°quio Filipe Martins Incita√ß√£o ao crime   Ricardo Barros Richards Pozzer Incita√ß√£o ao crime   Carlos Wizard Roberto Goidanich Incita√ß√£o ao crime   Onyx Lorenzoni Carlos Jordy Incita√ß√£o ao crime   Carlos Wizard Eduardo Pazuello Epidemia com Resultado em Morte   Teresa Cristina Reis de S√° T√∫lio Silveira Improbidade Administrativa   F√°bio Wajngarten Jair Bolsonaro Prevarica√ß√£o   Paulo Eneas Ot√°vio Fakhoury Incita√ß√£o ao crime   Mauro Luiz de Brito Ribeiro Mayra Pinheiro Epidemia com Resultado em Morte   Roberto Jefferson Luis Carlos Heinze Incita√ß√£o ao crime   Jair Bolsonaro Arthur Weintraub Epidemia com Resultado em Morte   Elcio Franco Roberto Dias Improbidade Administrativa   Allan dos Santos Carla Zambelli Incita√ß√£o ao crime   Paulo Eneas Onyx Lorenzoni Incita√ß√£o ao crime   Ot√°vio Fakhoury Oswaldo Eust√°quio Incita√ß√£o ao crime   Ot√°vio Fakhoury Paulo Eneas Incita√ß√£o ao crime   Marcellus Jos√© Barroso Camp√™lo Wilson Lima Prevarica√ß√£o   Ricardo Barros Luis Carlos Heinze Incita√ß√£o ao crime   Luis Carlos Heinze Roberto Goidanich Incita√ß√£o ao crime   Onyx Lorenzoni Pedro Benedito Batista Junior Crime Contra Humanidade   H√©lio Angotti Netto Arthur Weintraub Epidemia com Resultado em Morte   Thiago Fernandes da Costa Ricardo Barros Advocacia Administrativa   Carlos Alberto de S√° Marcos Tolentino Improbidade Administrativa   Roberto Jefferson Carlos Bolsonaro Incita√ß√£o ao crime   Marcellus Jos√© Barroso Camp√™lo Wagner Ros√°rio Prevarica√ß√£o   T√∫lio Silveira Emanuela Medrades Uso de Documento Falso, Falsidade Ideol√≥gica, Improbidade Administrativa   Francisco Emerson Maximiano Teresa Cristina Reis de S√° Improbidade Administrativa   Danilo Trento Roberto Dias Improbidade Administrativa, Forma√ß√£o de Organiza√ß√£o Criminosa   Fernando Parrillo Fernando Oikawa Perigo Para a vida ou Sa√∫de de Outrem, Crime Contra Humanidade   Ot√°vio Fakhoury Carla Zambelli Incita√ß√£o ao crime   Luciano Dias Eduardo Pazuello Epidemia com Resultado em Morte   Richards Pozzer Jair Bolsonaro Incita√ß√£o ao crime   Jos√© Alves Filho Mayra Pinheiro Epidemia com Resultado em Morte   Elcio Franco Paolo Zanotto Epidemia com Resultado em Morte   Roberto Dias Marconny Nunes Ribeiro Forma√ß√£o de Organiza√ß√£o Criminosa   Filipe Martins Ernesto Ara√∫jo Incita√ß√£o ao crime   H√©lio Angotti Netto Luis Carlos Heinze Incita√ß√£o ao crime   Ricardo Barros Fl√°vio Bolsonaro Incita√ß√£o ao crime   Raimundo Nonato Brasil Luiz Paulo Dominghetti Corrup√ß√£o Ativa   Ricardo Barros Emanuela Medrades Improbidade Administrativa, Forma√ß√£o de Organiza√ß√£o Criminosa   T√∫lio Silveira Eduardo Parrillo Falsidade Ideol√≥gica   Ricardo Barros Carlos Bolsonaro Incita√ß√£o ao crime   Mauro Luiz de Brito Ribeiro Jos√© Alves Filho Epidemia com Resultado em Morte   Marcos Tolentino Elcio Franco Improbidade Administrativa   Thiago Fernandes da Costa Marcelo Bento Pires Advocacia Administrativa   Roberto Dias Danilo Trento Improbidade Administrativa, Forma√ß√£o de Organiza√ß√£o Criminosa   Allan dos Santos Luis Carlos Heinze Incita√ß√£o ao crime   Eduardo Bolsonaro Bernardo Kuster Incita√ß√£o ao crime   Rafael Francisco Carmo Alves Jos√© Odilon Torres Corrup√ß√£o Ativa   Nise Yamaguchi Braga Netto Epidemia com Resultado em Morte   Jair Bolsonaro Paolo Zanotto Epidemia com Resultado em Morte   Filipe Martins Ot√°vio Fakhoury Incita√ß√£o ao crime   Osmar Terra Mauro Luiz de Brito Ribeiro Epidemia com Resultado em Morte   Marcos Tolentino Carlos Alberto de S√° Improbidade Administrativa   H√©lio Angotti Netto Carlos Bolsonaro Incita√ß√£o ao crime   Heitor Freire de Abreu Luciano Dias Epidemia com Resultado em Morte   Luciano Hang Allan dos Santos Incita√ß√£o ao crime   Bia Kicis H√©lio Angotti Netto Incita√ß√£o ao crime   Filipe Martins Onyx Lorenzoni Incita√ß√£o ao crime   Fernando Parrillo T√∫lio Silveira Falsidade Ideol√≥gica   Osmar Terra Jair Bolsonaro Incita√ß√£o ao crime, Epidemia com Resultado em Morte   Carlos Jordy Oswaldo Eust√°quio Incita√ß√£o ao crime   Fl√°vio Adsuara Cadegiani Fernando Oikawa Crime Contra Humanidade   Eduardo Pazuello Arthur Weintraub Epidemia com Resultado em Morte   Heitor Freire de Abreu Nise Yamaguchi Epidemia com Resultado em Morte   Roberto Jefferson Bernardo Kuster Incita√ß√£o ao crime   Luciano Hang Roberto Jefferson Incita√ß√£o ao crime   Elcio Franco Carlos Alberto de S√° Improbidade Administrativa   Jair Bolsonaro Roberto Goidanich Incita√ß√£o ao crime   Carlos Jordy Paulo Eneas Incita√ß√£o ao crime   Jair Bolsonaro Eduardo Pazuello Prevarica√ß√£o, Crime Contra Humanidade, Emprego Irregular de Verbas P√∫blicas, Epidemia com Resultado em Morte   Allan dos Santos Carlos Bolsonaro Incita√ß√£o ao crime   Luiz Paulo Dominghetti Carlos Alberto de S√° Corrup√ß√£o Ativa   Ot√°vio Fakhoury Luis Carlos Heinze Incita√ß√£o ao crime   Tercio Arnaud Tomaz Bia Kicis Incita√ß√£o ao crime   Danilo Trento Elcio Franco Improbidade Administrativa   Alex Lial Marinho Regina C√©lia Oliveira Advocacia Administrativa   Osmar Terra Richards Pozzer Incita√ß√£o ao crime   Teresa Cristina Reis de S√° Jos√© Odilon Torres Corrup√ß√£o Ativa   Leandro Ruschel Ernesto Ara√∫jo Incita√ß√£o ao crime   Ernesto Ara√∫jo Tercio Arnaud Tomaz Incita√ß√£o ao crime   Raimundo Nonato Brasil Danilo Trento Improbidade Administrativa   Arthur Weintraub Mauro Luiz de Brito Ribeiro Epidemia com Resultado em Morte   Carlos Jordy Carla Zambelli Incita√ß√£o ao crime   Richards Pozzer Fl√°vio Bolsonaro Incita√ß√£o ao crime   Danilo Trento Carlos Alberto de S√° Improbidade Administrativa   Emanuela Medrades Roberto Dias Improbidade Administrativa, Forma√ß√£o de Organiza√ß√£o Criminosa   Carlos Wizard Leandro Ruschel Incita√ß√£o ao crime   Rodrigo Esper Jair Bolsonaro Crime Contra Humanidade   Ot√°vio Fakhoury Carlos Bolsonaro Incita√ß√£o ao crime   Leandro Ruschel Carlos Wizard Incita√ß√£o ao crime   Jair Bolsonaro Fl√°vio Adsuara Cadegiani Crime Contra Humanidade   Fl√°vio Bolsonaro Roberto Goidanich Incita√ß√£o ao crime   Paulo Eneas Roberto Jefferson Incita√ß√£o ao crime   Bia Kicis Osmar Terra Incita√ß√£o ao crime   Elcio Franco T√∫lio Silveira Improbidade Administrativa   Jair Bolsonaro Rodrigo Esper Crime Contra Humanidade   H√©lio Angotti Netto Bernardo Kuster Incita√ß√£o ao crime   Bernardo Kuster Tercio Arnaud Tomaz Incita√ß√£o ao crime   Leandro Ruschel Ot√°vio Fakhoury Incita√ß√£o ao crime   T√∫lio Silveira Francisco Emerson Maximiano Uso de Documento Falso, Falsidade Ideol√≥gica, Improbidade Administrativa   Leandro Ruschel Onyx Lorenzoni Incita√ß√£o ao crime   Mauro Luiz de Brito Ribeiro Heitor Freire de Abreu Epidemia com Resultado em Morte   Andreia da Silva Lima Teresa Cristina Reis de S√° Corrup√ß√£o Ativa, Improbidade Administrativa   Leandro Ruschel Filipe Martins Incita√ß√£o ao crime   Ricardo Barros Jos√© Ricardo Santana Forma√ß√£o de Organiza√ß√£o Criminosa   Oswaldo Eust√°quio Bia Kicis Incita√ß√£o ao crime   Allan dos Santos Bernardo Kuster Incita√ß√£o ao crime   Carlos Bolsonaro Eduardo Bolsonaro Incita√ß√£o ao crime   Ernesto Ara√∫jo Mayra Pinheiro Epidemia com Resultado em Morte   Eduardo Pazuello Eduardo Parrillo Crime Contra Humanidade   Teresa Cristina Reis de S√° Rafael Francisco Carmo Alves Corrup√ß√£o Ativa   Ricardo Barros Francisco Emerson Maximiano Improbidade Administrativa, Forma√ß√£o de Organiza√ß√£o Criminosa   Raimundo Nonato Brasil Teresa Cristina Reis de S√° Corrup√ß√£o Ativa, Improbidade Administrativa   Osmar Terra Fl√°vio Bolsonaro Incita√ß√£o ao crime   Carla Zambelli Eduardo Bolsonaro Incita√ß√£o ao crime   Bia Kicis Luciano Hang Incita√ß√£o ao crime   Marcelo Queiroga Ernesto Ara√∫jo Epidemia com Resultado em Morte   Danilo Trento T√∫lio Silveira Improbidade Administrativa   Eduardo Bolsonaro Leandro Ruschel Incita√ß√£o ao crime   Marcos Tolentino Raimundo Nonato Brasil Improbidade Administrativa   Carlos Alberto de S√° Roberto Dias Improbidade Administrativa   Paola Werneck Fernando Parrillo Perigo Para a vida ou Sa√∫de de Outrem   Osmar Terra Elcio Franco Epidemia com Resultado em Morte   Carlos Jordy Luis Carlos Heinze Incita√ß√£o ao crime   Marcelo Queiroga H√©lio Angotti Netto Epidemia com Resultado em Morte   Francisco Emerson Maximiano Marcos Tolentino Fraude em Contrato, Improbidade Administrativa, Forma√ß√£o de Organiza√ß√£o Criminosa   Marcelo Queiroga Carlos Wizard Epidemia com Resultado em Morte   Ot√°vio Fakhoury Bernardo Kuster Incita√ß√£o ao crime   Emanuela Medrades Elcio Franco Improbidade Administrativa   Braga Netto Mauro Luiz de Brito Ribeiro Epidemia com Resultado em Morte   Luiz Paulo Dominghetti Raimundo Nonato Brasil Corrup√ß√£o Ativa   Luis Carlos Heinze Tercio Arnaud Tomaz Incita√ß√£o ao crime   Onyx Lorenzoni Roberto Goidanich Incita√ß√£o ao crime   Jos√© Alves Filho Heitor Freire de Abreu Epidemia com Resultado em Morte   Onyx Lorenzoni Eduardo Pazuello Crime Contra Humanidade   Arthur Weintraub Paolo Zanotto Epidemia com Resultado em Morte   Braga Netto Jair Bolsonaro Epidemia com Resultado em Morte   Bia Kicis Allan dos Santos Incita√ß√£o ao crime   Pedro Benedito Batista Junior Carla Guerra Perigo Para a vida ou Sa√∫de de Outrem, Crime Contra Humanidade   Luciano Hang Oswaldo Eust√°quio Incita√ß√£o ao crime   Cristiano Carvalho Carlos Alberto de S√° Corrup√ß√£o Ativa   Carlos Jordy Carlos Bolsonaro Incita√ß√£o ao crime   Ernesto Ara√∫jo Jos√© Alves Filho Epidemia com Resultado em Morte   Luciano Hang Paulo Eneas Incita√ß√£o ao crime   Emanuela Medrades Carlos Alberto de S√° Improbidade Administrativa   Fernando Parrillo Fl√°vio Cadegiani Crime Contra Humanidade   Onyx Lorenzoni Bernardo Kuster Incita√ß√£o ao crime   Arthur Weintraub Eduardo Pazuello Epidemia com Resultado em Morte   Eduardo Parrillo Jair Bolsonaro Crime Contra Humanidade   Paulo Eneas Ricardo Barros Incita√ß√£o ao crime   Tercio Arnaud Tomaz Jair Bolsonaro Incita√ß√£o ao crime   Jair Bolsonaro Leandro Ruschel Incita√ß√£o ao crime   Heitor Freire de Abreu Arthur Weintraub Epidemia com Resultado em Morte   Francisco Emerson Maximiano Pedro Benedito Batista Junior Falsidade Ideol√≥gica   Fernando Parrillo Mayra Pinheiro Crime Contra Humanidade   Mayra Pinheiro H√©lio Angotti Netto Epidemia com Resultado em Morte   Ricardo Barros Eduardo Bolsonaro Incita√ß√£o ao crime   Onyx Lorenzoni Fl√°vio Adsuara Cadegiani Crime Contra Humanidade   Marcelo Queiroga Osmar Terra Epidemia com Resultado em Morte   Carlos Alberto de S√° Elcio Franco Improbidade Administrativa   Luciano Hang Carla Zambelli Incita√ß√£o ao crime   Jos√© Ricardo Santana Marconny Nunes Ribeiro Forma√ß√£o de Organiza√ß√£o Criminosa   Onyx Lorenzoni Rodrigo Esper Crime Contra Humanidade   Fernando Oikawa Jair Bolsonaro Crime Contra Humanidade   Filipe Martins Bia Kicis Incita√ß√£o ao crime   Carlos Bolsonaro H√©lio Angotti Netto Incita√ß√£o ao crime   Carlos Wizard Ot√°vio Fakhoury Incita√ß√£o ao crime   Luciano Dias Marcelo Queiroga Epidemia com Resultado em Morte   Jos√© Ricardo Santana Danilo Trento Forma√ß√£o de Organiza√ß√£o Criminosa   Carlos Bolsonaro Carlos Wizard Incita√ß√£o ao crime   Fl√°vio Cadegiani Fernando Oikawa Crime Contra Humanidade   Carlos Wizard Onyx Lorenzoni Incita√ß√£o ao crime   Emanuela Medrades T√∫lio Silveira Uso de Documento Falso, Falsidade Ideol√≥gica, Improbidade Administrativa   Carla Zambelli H√©lio Angotti Netto Incita√ß√£o ao crime   Jair Bolsonaro Wilson Lima Prevarica√ß√£o, Crimes de Responsabilidade   Fl√°vio Bolsonaro Leandro Ruschel Incita√ß√£o ao crime   Pedro Benedito Batista Junior Paola Werneck Perigo Para a vida ou Sa√∫de de Outrem   Eduardo Bolsonaro Ernesto Ara√∫jo Incita√ß√£o ao crime   Carlos Jordy Bernardo Kuster Incita√ß√£o ao crime   Luciano Dias Ernesto Ara√∫jo Epidemia com Resultado em Morte   Mayra Pinheiro Carla Guerra Crime Contra Humanidade   Braga Netto Paolo Zanotto Epidemia com Resultado em Morte   Fl√°vio Adsuara Cadegiani Mayra Pinheiro Crime Contra Humanidade   Oswaldo Eust√°quio Jair Bolsonaro Incita√ß√£o ao crime   Allan dos Santos Eduardo Bolsonaro Incita√ß√£o ao crime   Marcos Tolentino Marconny Nunes Ribeiro Forma√ß√£o de Organiza√ß√£o Criminosa   Carla Guerra Jair Bolsonaro Crime Contra Humanidade   Elcio Franco Mayra Pinheiro Epidemia com Resultado em Morte   Jair Bolsonaro Wagner Ros√°rio Prevarica√ß√£o   Roberto Goidanich Leandro Ruschel Incita√ß√£o ao crime   Bia Kicis Carlos Jordy Incita√ß√£o ao crime   T√∫lio Silveira Andreia da Silva Lima Improbidade Administrativa   Marcos Tolentino Danilo Trento Fraude em Contrato, Improbidade Administrativa, Forma√ß√£o de Organiza√ß√£o Criminosa   Roberto Jefferson Ernesto Ara√∫jo Incita√ß√£o ao crime   Braga Netto Elcio Franco Epidemia com Resultado em Morte   Paulo Eneas Jair Bolsonaro Incita√ß√£o ao crime   Ernesto Ara√∫jo Luciano Hang Incita√ß√£o ao crime   Eduardo Bolsonaro Ot√°vio Fakhoury Incita√ß√£o ao crime   Nise Yamaguchi Mauro Luiz de Brito Ribeiro Epidemia com Resultado em Morte   Luciano Hang Luis Carlos Heinze Incita√ß√£o ao crime   Ricardo Barros Andreia da Silva Lima Improbidade Administrativa   Andreia da Silva Lima Marcos Tolentino Improbidade Administrativa   F√°bio Wajngarten Mayra Pinheiro Prevarica√ß√£o   Roberto Dias Ricardo Barros Improbidade Administrativa, Forma√ß√£o de Organiza√ß√£o Criminosa   Carlos Bolsonaro Osmar Terra Incita√ß√£o ao crime   Eduardo Bolsonaro Onyx Lorenzoni Incita√ß√£o ao crime   Cristiano Carvalho Raimundo Nonato Brasil Corrup√ß√£o Ativa   Nise Yamaguchi Jair Bolsonaro Epidemia com Resultado em Morte   Elcio Franco Danilo Trento Improbidade Administrativa   Roberto Jefferson H√©lio Angotti Netto Incita√ß√£o ao crime   Richards Pozzer Tercio Arnaud Tomaz Incita√ß√£o ao crime   Ernesto Ara√∫jo Heitor Freire de Abreu Epidemia com Resultado em Morte   Fernanda de Oliveira Igarashi Daniel Garrido Baena Falsidade Ideol√≥gica   Eduardo Bolsonaro Filipe Martins Incita√ß√£o ao crime   Carlos Alberto de S√° T√∫lio Silveira Improbidade Administrativa   Roberto Jefferson Carlos Wizard Incita√ß√£o ao crime   Wagner Ros√°rio Marcelo Queiroga Prevarica√ß√£o   Jo√£o Paulo F. Barros T√∫lio Silveira Falsidade Ideol√≥gica   Carlos Wizard Braga Netto Epidemia com Resultado em Morte   Tercio Arnaud Tomaz Roberto Goidanich Incita√ß√£o ao crime   Leandro Ruschel Bia Kicis Incita√ß√£o ao crime   Wilson Lima Marcellus Jos√© Barroso Camp√™lo Prevarica√ß√£o   Heitor Freire de Abreu Eduardo Pazuello Epidemia com Resultado em Morte   Bernardo Kuster Luciano Hang Incita√ß√£o ao crime   Fernando Parrillo Carla Guerra Perigo Para a vida ou Sa√∫de de Outrem, Crime Contra Humanidade   Paulo Eneas Richards Pozzer Incita√ß√£o ao crime   Roberto Goidanich Tercio Arnaud Tomaz Incita√ß√£o ao crime   H√©lio Angotti Netto Marcelo Queiroga Epidemia com Resultado em Morte   Danilo Trento Marconny Nunes Ribeiro Forma√ß√£o de Organiza√ß√£o Criminosa   Ricardo Barros H√©lio Angotti Netto Incita√ß√£o ao crime   Mayra Pinheiro Heitor Freire de Abreu Epidemia com Resultado em Morte   Onyx Lorenzoni Leandro Ruschel Incita√ß√£o ao crime   Bia Kicis Oswaldo Eust√°quio Incita√ß√£o ao crime   Luciano Hang Carlos Bolsonaro Incita√ß√£o ao crime   Mayra Pinheiro Fernando Parrillo Crime Contra Humanidade   Ricardo Barros Carlos Wizard Incita√ß√£o ao crime   Roberto Jefferson Filipe Martins Incita√ß√£o ao crime   Bia Kicis Paulo Eneas Incita√ß√£o ao crime   Elcio Franco Jos√© Alves Filho Epidemia com Resultado em Morte   Carlos Alberto de S√° Cristiano Carvalho Corrup√ß√£o Ativa   Francisco Emerson Maximiano Roberto Dias Improbidade Administrativa, Forma√ß√£o de Organiza√ß√£o Criminosa   Ernesto Ara√∫jo Roberto Jefferson Incita√ß√£o ao crime   Eduardo Parrillo Fernando Oikawa Perigo Para a vida ou Sa√∫de de Outrem, Crime Contra Humanidade   H√©lio Angotti Netto Ernesto Ara√∫jo Incita√ß√£o ao crime, Epidemia com Resultado em Morte   Carla Zambelli Luciano Hang Incita√ß√£o ao crime   Jair Bolsonaro Ot√°vio Fakhoury Incita√ß√£o ao crime   Jo√£o Paulo F. Barros Fernanda de Oliveira Igarashi Falsidade Ideol√≥gica   Osmar Terra Tercio Arnaud Tomaz Incita√ß√£o ao crime   Marcelo Queiroga Luciano Dias Epidemia com Resultado em Morte   T√∫lio Silveira Teresa Cristina Reis de S√° Improbidade Administrativa   Bernardo Kuster Allan dos Santos Incita√ß√£o ao crime   Jair Bolsonaro Onyx Lorenzoni Crime Contra Humanidade, Incita√ß√£o ao crime   Carlos Alberto de S√° Raimundo Nonato Brasil Corrup√ß√£o Ativa, Improbidade Administrativa   Allan dos Santos Ernesto Ara√∫jo Incita√ß√£o ao crime   Marcellus Jos√© Barroso Camp√™lo F√°bio Wajngarten Prevarica√ß√£o   Luciano Dias Braga Netto Epidemia com Resultado em Morte   Roberto Jefferson Osmar Terra Incita√ß√£o ao crime   H√©lio Angotti Netto Carlos Wizard Incita√ß√£o ao crime, Epidemia com Resultado em Morte   Marcelo Queiroga Nise Yamaguchi Epidemia com Resultado em Morte   Bia Kicis Carla Zambelli Incita√ß√£o ao crime   Bernardo Kuster Roberto Jefferson Incita√ß√£o ao crime   Oswaldo Eust√°quio Roberto Goidanich Incita√ß√£o ao crime   Fl√°vio Adsuara Cadegiani Carla Guerra Crime Contra Humanidade   F√°bio Wajngarten Alex Lial Marinho Advocacia Administrativa   Carlos Bolsonaro Allan dos Santos Incita√ß√£o ao crime   Marcelo Queiroga Marcellus Jos√© Barroso Camp√™lo Prevarica√ß√£o   Allan dos Santos H√©lio Angotti Netto Incita√ß√£o ao crime   Filipe Martins Jair Bolsonaro Incita√ß√£o ao crime   Luis Carlos Heinze Luciano Hang Incita√ß√£o ao crime   Paulo Eneas Fl√°vio Bolsonaro Incita√ß√£o ao crime   Marconny Nunes Ribeiro Francisco Emerson Maximiano Forma√ß√£o de Organiza√ß√£o Criminosa   Nise Yamaguchi Paolo Zanotto Epidemia com Resultado em Morte   Allan dos Santos Carlos Wizard Incita√ß√£o ao crime   Ricardo Barros Osmar Terra Incita√ß√£o ao crime   Carla Zambelli Allan dos Santos Incita√ß√£o ao crime   H√©lio Angotti Netto Filipe Martins Incita√ß√£o ao crime   Fernando Parrillo Paola Werneck Perigo Para a vida ou Sa√∫de de Outrem   Eduardo Parrillo T√∫lio Silveira Falsidade Ideol√≥gica   Eduardo Pazuello Marcelo Queiroga Prevarica√ß√£o, Epidemia com Resultado em Morte   Fl√°vio Bolsonaro Ot√°vio Fakhoury Incita√ß√£o ao crime   Luciano Hang Bernardo Kuster Incita√ß√£o ao crime   Osmar Terra Mayra Pinheiro Epidemia com Resultado em Morte   Marcellus Jos√© Barroso Camp√™lo Jair Bolsonaro Prevarica√ß√£o   Ot√°vio Fakhoury Ernesto Ara√∫jo Incita√ß√£o ao crime   Carla Guerra Fernando Oikawa Perigo Para a vida ou Sa√∫de de Outrem, Crime Contra Humanidade   Fl√°vio Bolsonaro Onyx Lorenzoni Incita√ß√£o ao crime   Allan dos Santos Filipe Martins Incita√ß√£o ao crime   Nise Yamaguchi Elcio Franco Epidemia com Resultado em Morte   Teresa Cristina Reis de S√° Ricardo Barros Improbidade Administrativa   Eduardo Pazuello Ernesto Ara√∫jo Epidemia com Resultado em Morte   Roberto Goidanich Ot√°vio Fakhoury Incita√ß√£o ao crime   Mayra Pinheiro Nise Yamaguchi Epidemia com Resultado em Morte   Carlos Alberto de S√° Luiz Paulo Dominghetti Corrup√ß√£o Ativa   H√©lio Angotti Netto Osmar Terra Incita√ß√£o ao crime, Epidemia com Resultado em Morte   Jair Bolsonaro Braga Netto Epidemia com Resultado em Morte   Ot√°vio Fakhoury Carlos Wizard Incita√ß√£o ao crime   Roberto Goidanich Onyx Lorenzoni Incita√ß√£o ao crime   Pedro Benedito Batista Junior Jo√£o Paulo F. Barros Falsidade Ideol√≥gica   Mayra Pinheiro Marcellus Jos√© Barroso Camp√™lo Prevarica√ß√£o   Luis Carlos Heinze Roberto Jefferson Incita√ß√£o ao crime   Eduardo Pazuello H√©lio Angotti Netto Epidemia com Resultado em Morte   Bia Kicis Luis Carlos Heinze Incita√ß√£o ao crime   Rodrigo Esper Fl√°vio Cadegiani Crime Contra Humanidade   Ernesto Ara√∫jo Ricardo Barros Incita√ß√£o ao crime   Onyx Lorenzoni Ernesto Ara√∫jo Incita√ß√£o ao crime   Eduardo Pazuello Carlos Wizard Epidemia com Resultado em Morte   Allan dos Santos Osmar Terra Incita√ß√£o ao crime   Carlos Wizard Bia Kicis Incita√ß√£o ao crime   Fl√°vio Adsuara Cadegiani Fernando Parrillo Crime Contra Humanidade   Ot√°vio Fakhoury Onyx Lorenzoni Incita√ß√£o ao crime   Elcio Franco Heitor Freire de Abreu Epidemia com Resultado em Morte   Rodrigo Esper Mayra Pinheiro Crime Contra Humanidade   Ot√°vio Fakhoury Filipe Martins Incita√ß√£o ao crime   Leandro Ruschel Jair Bolsonaro Incita√ß√£o ao crime   Osmar Terra Jos√© Alves Filho Epidemia com Resultado em Morte   Ricardo Barros Allan dos Santos Incita√ß√£o ao crime   Bernardo Kuster Ricardo Barros Incita√ß√£o ao crime   Bia Kicis Carlos Bolsonaro Incita√ß√£o ao crime   Onyx Lorenzoni Ot√°vio Fakhoury Incita√ß√£o ao crime   Andreia da Silva Lima Roberto Dias Improbidade Administrativa   Carlos Bolsonaro Carlos Jordy Incita√ß√£o ao crime   Ernesto Ara√∫jo Oswaldo Eust√°quio Incita√ß√£o ao crime   Roberto Dias Emanuela Medrades Improbidade Administrativa, Forma√ß√£o de Organiza√ß√£o Criminosa   Eduardo Pazuello Carla Guerra Crime Contra Humanidade   Paola Werneck Eduardo Parrillo Perigo Para a vida ou Sa√∫de de Outrem   Ernesto Ara√∫jo Paulo Eneas Incita√ß√£o ao crime   Raimundo Nonato Brasil Roberto Dias Improbidade Administrativa   Filipe Martins Roberto Goidanich Incita√ß√£o ao crime   Marcelo Blanco Rafael Francisco Carmo Alves Corrup√ß√£o Ativa   Eduardo Bolsonaro Bia Kicis Incita√ß√£o ao crime   Carlos Jordy Ernesto Ara√∫jo Incita√ß√£o ao crime   Marcelo Blanco Andreia da Silva Lima Corrup√ß√£o Ativa   Eduardo Pazuello Osmar Terra Epidemia com Resultado em Morte   Carlos Alberto de S√° Danilo Trento Improbidade Administrativa   Bernardo Kuster Oswaldo Eust√°quio Incita√ß√£o ao crime   Bernardo Kuster Paulo Eneas Incita√ß√£o ao crime   Arthur Weintraub Jos√© Alves Filho Epidemia com Resultado em Morte   Richards Pozzer Luciano Hang Incita√ß√£o ao crime   Ernesto Ara√∫jo Carla Zambelli Incita√ß√£o ao crime   Carlos Jordy Carlos Wizard Incita√ß√£o ao crime   Regina C√©lia Oliveira Thiago Fernandes da Costa Advocacia Administrativa   Carlos Bolsonaro Oswaldo Eust√°quio Incita√ß√£o ao crime   Marcelo Queiroga Arthur Weintraub Epidemia com Resultado em Morte   Luis Carlos Heinze Ricardo Barros Incita√ß√£o ao crime   T√∫lio Silveira Marcos Tolentino Improbidade Administrativa   Braga Netto Mayra Pinheiro Epidemia com Resultado em Morte   Francisco Emerson Maximiano Fernanda de Oliveira Igarashi Falsidade Ideol√≥gica   Carla Zambelli Oswaldo Eust√°quio Incita√ß√£o ao crime   Roberto Jefferson Carlos Jordy Incita√ß√£o ao crime   Bia Kicis Bernardo Kuster Incita√ß√£o ao crime   Carla Zambelli Paulo Eneas Incita√ß√£o ao crime   Carlos Jordy Filipe Martins Incita√ß√£o ao crime   Bernardo Kuster Carla Zambelli Incita√ß√£o ao crime   Eduardo Parrillo Fl√°vio Cadegiani Crime Contra Humanidade   Ricardo Barros Marcos Tolentino Improbidade Administrativa, Forma√ß√£o de Organiza√ß√£o Criminosa   Francisco Emerson Maximiano Raimundo Nonato Brasil Improbidade Administrativa   Paolo Zanotto H√©lio Angotti Netto Epidemia com Resultado em Morte   Ernesto Ara√∫jo Richards Pozzer Incita√ß√£o ao crime   Jair Bolsonaro Bia Kicis Incita√ß√£o ao crime   H√©lio Angotti Netto Luciano Dias Epidemia com Resultado em Morte   Paolo Zanotto Carlos Wizard Epidemia com Resultado em Morte   Raimundo Nonato Brasil Elcio Franco Improbidade Administrativa   Heitor Freire de Abreu Marcelo Queiroga Epidemia com Resultado em Morte   Eduardo Parrillo Mayra Pinheiro Crime Contra Humanidade   Leandro Ruschel Roberto Goidanich Incita√ß√£o ao crime   Carlos Bolsonaro Carla Zambelli Incita√ß√£o ao crime   Daniel Garrido Baena T√∫lio Silveira Falsidade Ideol√≥gica   Osmar Terra Luciano Hang Incita√ß√£o ao crime   Richards Pozzer Roberto Jefferson Incita√ß√£o ao crime   Ricardo Barros Carlos Jordy Incita√ß√£o ao crime   Fernando Parrillo Jo√£o Paulo F. Barros Falsidade Ideol√≥gica   Wilson Lima Eduardo Pazuello Prevarica√ß√£o   Marcos Tolentino Ricardo Barros Improbidade Administrativa, Forma√ß√£o de Organiza√ß√£o Criminosa   Luis Carlos Heinze Oswaldo Eust√°quio Incita√ß√£o ao crime   Fl√°vio Cadegiani Carla Guerra Crime Contra Humanidade   Arthur Weintraub Braga Netto Epidemia com Resultado em Morte   Fernando Oikawa Fl√°vio Cadegiani Crime Contra Humanidade   Carlos Wizard Mauro Luiz de Brito Ribeiro Epidemia com Resultado em Morte   Oswaldo Eust√°quio Tercio Arnaud Tomaz Incita√ß√£o ao crime   Luis Carlos Heinze Paulo Eneas Incita√ß√£o ao crime   Alex Lial Marinho Marcelo Bento Pires Advocacia Administrativa   Carlos Jordy Osmar Terra Incita√ß√£o ao crime   Osmar Terra Heitor Freire de Abreu Epidemia com Resultado em Morte   T√∫lio Silveira Pedro Benedito Batista Junior Falsidade Ideol√≥gica   Heitor Freire de Abreu Ernesto Ara√∫jo Epidemia com Resultado em Morte   Mayra Pinheiro Arthur Weintraub Epidemia com Resultado em Morte   Raimundo Nonato Brasil Carlos Alberto de S√° Corrup√ß√£o Ativa, Improbidade Administrativa   Roberto Goidanich Roberto Jefferson Incita√ß√£o ao crime   Carlos Wizard Jair Bolsonaro Incita√ß√£o ao crime, Epidemia com Resultado em Morte   Elcio Franco Ricardo Barros Improbidade Administrativa   Pedro Benedito Batista Junior Eduardo Parrillo Perigo Para a vida ou Sa√∫de de Outrem, Crime Contra Humanidade, Omiss√£o de Notifica√ß√£o de Doen√ßa, Falsidade Ideol√≥gica   Ernesto Ara√∫jo Luis Carlos Heinze Incita√ß√£o ao crime   Fernando Oikawa Mayra Pinheiro Crime Contra Humanidade   Ricardo Barros Thiago Fernandes da Costa Advocacia Administrativa   Emanuela Medrades Fernando Parrillo Falsidade Ideol√≥gica   Marcelo Bento Pires F√°bio Wajngarten Advocacia Administrativa   H√©lio Angotti Netto Carlos Jordy Incita√ß√£o ao crime   Braga Netto Jos√© Alves Filho Epidemia com Resultado em Morte   Paulo Eneas Eduardo Bolsonaro Incita√ß√£o ao crime   Teresa Cristina Reis de S√° Emanuela Medrades Improbidade Administrativa   Roberto Dias Jos√© Ricardo Santana Forma√ß√£o de Organiza√ß√£o Criminosa   Fl√°vio Bolsonaro Bia Kicis Incita√ß√£o ao crime   Luis Carlos Heinze Carla Zambelli Incita√ß√£o ao crime   Pedro Benedito Batista Junior Eduardo Pazuello Crime Contra Humanidade   F√°bio Wajngarten Ricardo Barros Advocacia Administrativa   Bernardo Kuster Luis Carlos Heinze Incita√ß√£o ao crime   Osmar Terra Roberto Jefferson Incita√ß√£o ao crime   Carlos Wizard Richards Pozzer Incita√ß√£o ao crime   Paolo Zanotto Osmar Terra Epidemia com Resultado em Morte   Carla Guerra Fl√°vio Cadegiani Crime Contra Humanidade   Allan dos Santos Carlos Jordy Incita√ß√£o ao crime   Ernesto Ara√∫jo Fl√°vio Bolsonaro Incita√ß√£o ao crime   Jos√© Odilon Torres Andreia da Silva Lima Corrup√ß√£o Ativa   Ernesto Ara√∫jo Carlos Bolsonaro Incita√ß√£o ao crime   Danilo Trento Ricardo Barros Improbidade Administrativa, Forma√ß√£o de Organiza√ß√£o Criminosa   Carla Guerra Mayra Pinheiro Crime Contra Humanidade   Luciano Dias Mauro Luiz de Brito Ribeiro Epidemia com Resultado em Morte   Rodrigo Esper Fernando Parrillo Perigo Para a vida ou Sa√∫de de Outrem, Crime Contra Humanidade   Eduardo Pazuello Luciano Dias Epidemia com Resultado em Morte   Marcelo Queiroga Eduardo Pazuello Prevarica√ß√£o, Epidemia com Resultado em Morte   Eduardo Bolsonaro Jair Bolsonaro Incita√ß√£o ao crime   Luciano Dias Jair Bolsonaro Epidemia com Resultado em Morte   Luciano Hang Ernesto Ara√∫jo Incita√ß√£o ao crime   Raimundo Nonato Brasil T√∫lio Silveira Improbidade Administrativa   Ot√°vio Fakhoury Bia Kicis Incita√ß√£o ao crime   Carla Zambelli Luis Carlos Heinze Incita√ß√£o ao crime   Luis Carlos Heinze Richards Pozzer Incita√ß√£o ao crime   Bernardo Kuster Carlos Bolsonaro Incita√ß√£o ao crime   F√°bio Wajngarten Marcelo Bento Pires Advocacia Administrativa   Ricardo Barros Carla Zambelli Incita√ß√£o ao crime   Luciano Hang H√©lio Angotti Netto Incita√ß√£o ao crime   Nise Yamaguchi Mayra Pinheiro Epidemia com Resultado em Morte   Jo√£o Paulo F. Barros Fernando Parrillo Falsidade Ideol√≥gica   Pedro Benedito Batista Junior Fl√°vio Adsuara Cadegiani Crime Contra Humanidade   Francisco Emerson Maximiano Daniel Garrido Baena Falsidade Ideol√≥gica   Luciano Hang Carlos Wizard Incita√ß√£o ao crime   Andreia da Silva Lima Cristiano Carvalho Corrup√ß√£o Ativa   Mayra Pinheiro Eduardo Parrillo Crime Contra Humanidade   Richards Pozzer Ricardo Barros Incita√ß√£o ao crime   Wagner Ros√°rio F√°bio Wajngarten Prevarica√ß√£o   Francisco Emerson Maximiano Marconny Nunes Ribeiro Forma√ß√£o de Organiza√ß√£o Criminosa   Onyx Lorenzoni Bia Kicis Incita√ß√£o ao crime   Carlos Wizard Fl√°vio Bolsonaro Incita√ß√£o ao crime   Carla Zambelli Carlos Bolsonaro Incita√ß√£o ao crime   Roberto Goidanich Ricardo Barros Incita√ß√£o ao crime   Luciano Hang Filipe Martins Incita√ß√£o ao crime   Heitor Freire de Abreu Braga Netto Epidemia com Resultado em Morte   Andreia da Silva Lima Raimundo Nonato Brasil Corrup√ß√£o Ativa, Improbidade Administrativa   Jair Bolsonaro Mauro Luiz de Brito Ribeiro Epidemia com Resultado em Morte   Mayra Pinheiro Eduardo Pazuello Prevarica√ß√£o, Crime Contra Humanidade, Epidemia com Resultado em Morte   Filipe Martins Tercio Arnaud Tomaz Incita√ß√£o ao crime   Francisco Emerson Maximiano Danilo Trento Fraude em Contrato, Improbidade Administrativa, Forma√ß√£o de Organiza√ß√£o Criminosa   Carlos Wizard Elcio Franco Epidemia com Resultado em Morte   Jos√© Odilon Torres Teresa Cristina Reis de S√° Corrup√ß√£o Ativa   Pedro Benedito Batista Junior Francisco Emerson Maximiano Falsidade Ideol√≥gica   Richards Pozzer Oswaldo Eust√°quio Incita√ß√£o ao crime   Fernando Parrillo Emanuela Medrades Falsidade Ideol√≥gica   Eduardo Pazuello Pedro Benedito Batista Junior Crime Contra Humanidade   Richards Pozzer Paulo Eneas Incita√ß√£o ao crime   T√∫lio Silveira Roberto Dias Improbidade Administrativa   Paulo Eneas H√©lio Angotti Netto Incita√ß√£o ao crime   Luis Carlos Heinze Fl√°vio Bolsonaro Incita√ß√£o ao crime   Braga Netto Heitor Freire de Abreu Epidemia com Resultado em Morte   Luis Carlos Heinze Carlos Bolsonaro Incita√ß√£o ao crime   H√©lio Angotti Netto Mauro Luiz de Brito Ribeiro Epidemia com Resultado em Morte   Osmar Terra Ricardo Barros Incita√ß√£o ao crime   Luciano Hang Osmar Terra Incita√ß√£o ao crime   Fernando Parrillo Eduardo Parrillo Perigo Para a vida ou Sa√∫de de Outrem, Crime Contra Humanidade, Omiss√£o de Notifica√ß√£o de Doen√ßa, Falsidade Ideol√≥gica   Nise Yamaguchi Jos√© Alves Filho Epidemia com Resultado em Morte   Luciano Dias Paolo Zanotto Epidemia com Resultado em Morte   Tercio Arnaud Tomaz Luciano Hang Incita√ß√£o ao crime   Jair Bolsonaro Richards Pozzer Incita√ß√£o ao crime   Emanuela Medrades Ricardo Barros Improbidade Administrativa, Forma√ß√£o de Organiza√ß√£o Criminosa   Teresa Cristina Reis de S√° Francisco Emerson Maximiano Improbidade Administrativa   Mayra Pinheiro Fl√°vio Adsuara Cadegiani Crime Contra Humanidade   Carlos Jordy Bia Kicis Incita√ß√£o ao crime   Carlos Bolsonaro Bernardo Kuster Incita√ß√£o ao crime   Eduardo Parrillo Fernando Parrillo Perigo Para a vida ou Sa√∫de de Outrem, Crime Contra Humanidade, Omiss√£o de Notifica√ß√£o de Doen√ßa, Falsidade Ideol√≥gica   Richards Pozzer Carla Zambelli Incita√ß√£o ao crime   Eduardo Parrillo Paola Werneck Perigo Para a vida ou Sa√∫de de Outrem   Eduardo Bolsonaro Roberto Goidanich Incita√ß√£o ao crime   Andreia da Silva Lima Luiz Paulo Dominghetti Corrup√ß√£o Ativa   Fernando Parrillo Eduardo Pazuello Crime Contra Humanidade   Fl√°vio Bolsonaro Jair Bolsonaro Incita√ß√£o ao crime   Luciano Dias Elcio Franco Epidemia com Resultado em Morte   Paolo Zanotto Luciano Dias Epidemia com Resultado em Morte   Carla Zambelli Bernardo Kuster Incita√ß√£o ao crime   Osmar Terra Oswaldo Eust√°quio Incita√ß√£o ao crime   Osmar Terra Paulo Eneas Incita√ß√£o ao crime   Eduardo Pazuello F√°bio Wajngarten Prevarica√ß√£o   Paolo Zanotto Nise Yamaguchi Epidemia com Resultado em Morte   Mauro Luiz de Brito Ribeiro H√©lio Angotti Netto Epidemia com Resultado em Morte   Marcellus Jos√© Barroso Camp√™lo Mayra Pinheiro Prevarica√ß√£o   Leandro Ruschel Tercio Arnaud Tomaz Incita√ß√£o ao crime   Elcio Franco Emanuela Medrades Improbidade Administrativa   Fernando Oikawa Fernando Parrillo Perigo Para a vida ou Sa√∫de de Outrem, Crime Contra Humanidade   Mauro Luiz de Brito Ribeiro Carlos Wizard Epidemia com Resultado em Morte   Roberto Goidanich Jair Bolsonaro Incita√ß√£o ao crime   Fernando Oikawa Paola Werneck Perigo Para a vida ou Sa√∫de de Outrem   Emanuela Medrades Jo√£o Paulo F. Barros Falsidade Ideol√≥gica   Roberto Jefferson Roberto Goidanich Incita√ß√£o ao crime   Raimundo Nonato Brasil Jos√© Odilon Torres Corrup√ß√£o Ativa   Roberto Dias Andreia da Silva Lima Improbidade Administrativa   Fl√°vio Adsuara Cadegiani Eduardo Parrillo Crime Contra Humanidade   Tercio Arnaud Tomaz Roberto Jefferson Incita√ß√£o ao crime   Fl√°vio Bolsonaro Richards Pozzer Incita√ß√£o ao crime   Bia Kicis Ernesto Ara√∫jo Incita√ß√£o ao crime   T√∫lio Silveira Elcio Franco Improbidade Administrativa   Rafael Francisco Carmo Alves Marcelo Blanco Corrup√ß√£o Ativa   Ot√°vio Fakhoury Jair Bolsonaro Incita√ß√£o ao crime   Carlos Alberto de S√° Ricardo Barros Improbidade Administrativa   Oswaldo Eust√°quio Luciano Hang Incita√ß√£o ao crime   Eduardo Pazuello Mauro Luiz de Brito Ribeiro Epidemia com Resultado em Morte   Osmar Terra Carla Zambelli Incita√ß√£o ao crime   Wilson Lima Wagner Ros√°rio Prevarica√ß√£o   Jair Bolsonaro Fl√°vio Bolsonaro Incita√ß√£o ao crime   Fl√°vio Cadegiani Pedro Benedito Batista Junior Crime Contra Humanidade   Roberto Goidanich Richards Pozzer Incita√ß√£o ao crime   Fl√°vio Adsuara Cadegiani Eduardo Pazuello Crime Contra Humanidade   Marconny Nunes Ribeiro Marcos Tolentino Forma√ß√£o de Organiza√ß√£o Criminosa   Bia Kicis Carlos Wizard Incita√ß√£o ao crime   Danilo Trento Emanuela Medrades Improbidade Administrativa, Forma√ß√£o de Organiza√ß√£o Criminosa   Carla Guerra Fernando Parrillo Perigo Para a vida ou Sa√∫de de Outrem, Crime Contra Humanidade   Jair Bolsonaro Elcio Franco Epidemia com Resultado em Morte   H√©lio Angotti Netto Paolo Zanotto Epidemia com Resultado em Morte   Paulo Eneas Luciano Hang Incita√ß√£o ao crime   T√∫lio Silveira Carlos Alberto de S√° Improbidade Administrativa   Richards Pozzer Luis Carlos Heinze Incita√ß√£o ao crime   Carla Guerra Paola Werneck Perigo Para a vida ou Sa√∫de de Outrem   Wilson Lima Marcelo Queiroga Prevarica√ß√£o   Jos√© Alves Filho H√©lio Angotti Netto Epidemia com Resultado em Morte   Onyx Lorenzoni Jair Bolsonaro Crime Contra Humanidade, Incita√ß√£o ao crime   Wagner Ros√°rio Eduardo Pazuello Prevarica√ß√£o   Jos√© Alves Filho Carlos Wizard Epidemia com Resultado em Morte   Mauro Luiz de Brito Ribeiro Osmar Terra Epidemia com Resultado em Morte   Andreia da Silva Lima Danilo Trento Improbidade Administrativa   Bia Kicis Filipe Martins Incita√ß√£o ao crime   Ricardo Barros Bernardo Kuster Incita√ß√£o ao crime   Raimundo Nonato Brasil Rafael Francisco Carmo Alves Corrup√ß√£o Ativa   H√©lio Angotti Netto Roberto Goidanich Incita√ß√£o ao crime   Fernando Parrillo Francisco Emerson Maximiano Falsidade Ideol√≥gica   Nise Yamaguchi Heitor Freire de Abreu Epidemia com Resultado em Morte   H√©lio Angotti Netto Eduardo Pazuello Epidemia com Resultado em Morte   Ernesto Ara√∫jo Eduardo Bolsonaro Incita√ß√£o ao crime   Marcelo Queiroga Wilson Lima Prevarica√ß√£o   Teresa Cristina Reis de S√° Marcelo Blanco Corrup√ß√£o Ativa   Jair Bolsonaro Fernando Oikawa Crime Contra Humanidade   Paola Werneck Carla Guerra Perigo Para a vida ou Sa√∫de de Outrem   Oswaldo Eust√°quio Roberto Jefferson Incita√ß√£o ao crime   Rafael Francisco Carmo Alves Andreia da Silva Lima Corrup√ß√£o Ativa   Marcos Tolentino T√∫lio Silveira Improbidade Administrativa   Richards Pozzer Carlos Bolsonaro Incita√ß√£o ao crime   Marcelo Bento Pires Regina C√©lia Oliveira Advocacia Administrativa   Arthur Weintraub Jair Bolsonaro Epidemia com Resultado em Morte   Allan dos Santos Roberto Goidanich Incita√ß√£o ao crime   Paulo Eneas Allan dos Santos Incita√ß√£o ao crime   Marcelo Queiroga Wagner Ros√°rio Prevarica√ß√£o   Osmar Terra Luis Carlos Heinze Incita√ß√£o ao crime   Bernardo Kuster Eduardo Bolsonaro Incita√ß√£o ao crime   Roberto Goidanich Fl√°vio Bolsonaro Incita√ß√£o ao crime   Carlos Bolsonaro Leandro Ruschel Incita√ß√£o ao crime   Luciano Hang Bia Kicis Incita√ß√£o ao crime   Tercio Arnaud Tomaz Ricardo Barros Incita√ß√£o ao crime   Jos√© Alves Filho Osmar Terra Epidemia com Resultado em Morte   Eduardo Pazuello Paolo Zanotto Epidemia com Resultado em Morte   Mayra Pinheiro Wilson Lima Prevarica√ß√£o   Luciano Hang Carlos Jordy Incita√ß√£o ao crime   Ot√°vio Fakhoury Roberto Goidanich Incita√ß√£o ao crime   Carlos Wizard Tercio Arnaud Tomaz Incita√ß√£o ao crime   Teresa Cristina Reis de S√° Andreia da Silva Lima Corrup√ß√£o Ativa, Improbidade Administrativa   Osmar Terra Carlos Bolsonaro Incita√ß√£o ao crime   Fernanda de Oliveira Igarashi T√∫lio Silveira Falsidade Ideol√≥gica   Filipe Martins Luciano Hang Incita√ß√£o ao crime   Ricardo Barros Regina C√©lia Oliveira Advocacia Administrativa   T√∫lio Silveira Fernanda de Oliveira Igarashi Falsidade Ideol√≥gica   Daniel Garrido Baena Fernando Parrillo Falsidade Ideol√≥gica   Mayra Pinheiro Wagner Ros√°rio Prevarica√ß√£o   Tercio Arnaud Tomaz Oswaldo Eust√°quio Incita√ß√£o ao crime   Onyx Lorenzoni Fl√°vio Bolsonaro Incita√ß√£o ao crime   Richards Pozzer Bernardo Kuster Incita√ß√£o ao crime   Eduardo Parrillo Jo√£o Paulo F. Barros Falsidade Ideol√≥gica   Paolo Zanotto Arthur Weintraub Epidemia com Resultado em Morte   Tercio Arnaud Tomaz Paulo Eneas Incita√ß√£o ao crime   T√∫lio Silveira Raimundo Nonato Brasil Improbidade Administrativa   Emanuela Medrades Eduardo Parrillo Falsidade Ideol√≥gica   Luis Carlos Heinze Eduardo Bolsonaro Incita√ß√£o ao crime   Danilo Trento Jos√© Ricardo Santana Forma√ß√£o de Organiza√ß√£o Criminosa   Roberto Jefferson Leandro Ruschel Incita√ß√£o ao crime   Mayra Pinheiro Marcelo Queiroga Prevarica√ß√£o, Epidemia com Resultado em Morte   Oswaldo Eust√°quio Ricardo Barros Incita√ß√£o ao crime   Ricardo Barros Raimundo Nonato Brasil Improbidade Administrativa   Carlos Wizard Mayra Pinheiro Epidemia com Resultado em Morte   Ernesto Ara√∫jo H√©lio Angotti Netto Incita√ß√£o ao crime, Epidemia com Resultado em Morte   Eduardo Bolsonaro Tercio Arnaud Tomaz Incita√ß√£o ao crime   Heitor Freire de Abreu Mauro Luiz de Brito Ribeiro Epidemia com Resultado em Morte   Filipe Martins Roberto Jefferson Incita√ß√£o ao crime   Ernesto Ara√∫jo Carlos Wizard Incita√ß√£o ao crime, Epidemia com Resultado em Morte   Tercio Arnaud Tomaz Carla Zambelli Incita√ß√£o ao crime   Eduardo Pazuello Fl√°vio Adsuara Cadegiani Crime Contra Humanidade   Ricardo Barros Leandro Ruschel Incita√ß√£o ao crime   Mayra Pinheiro Ernesto Ara√∫jo Epidemia com Resultado em Morte   Arthur Weintraub Elcio Franco Epidemia com Resultado em Morte   Mauro Luiz de Brito Ribeiro Luciano Dias Epidemia com Resultado em Morte   Onyx Lorenzoni Fernando Oikawa Crime Contra Humanidade   Bernardo Kuster Ernesto Ara√∫jo Incita√ß√£o ao crime   Heitor Freire de Abreu Jair Bolsonaro Epidemia com Resultado em Morte   Eduardo Pazuello Rodrigo Esper Crime Contra Humanidade   Mauro Luiz de Brito Ribeiro Nise Yamaguchi Epidemia com Resultado em Morte   Jo√£o Paulo F. Barros Emanuela Medrades Falsidade Ideol√≥gica   Fl√°vio Cadegiani Eduardo Parrillo Crime Contra Humanidade   Bernardo Kuster H√©lio Angotti Netto Incita√ß√£o ao crime   Francisco Emerson Maximiano Ricardo Barros Improbidade Administrativa, Forma√ß√£o de Organiza√ß√£o Criminosa   Leandro Ruschel Luciano Hang Incita√ß√£o ao crime   Mayra Pinheiro Carlos Wizard Epidemia com Resultado em Morte   Carlos Bolsonaro Ernesto Ara√∫jo Incita√ß√£o ao crime   Marconny Nunes Ribeiro Roberto Dias Forma√ß√£o de Organiza√ß√£o Criminosa   Bernardo Kuster Carlos Wizard Incita√ß√£o ao crime   Oswaldo Eust√°quio Paulo Eneas Incita√ß√£o ao crime   Carlos Jordy Roberto Goidanich Incita√ß√£o ao crime   Rodrigo Esper Fernando Oikawa Perigo Para a vida ou Sa√∫de de Outrem, Crime Contra Humanidade   H√©lio Angotti Netto Leandro Ruschel Incita√ß√£o ao crime   Tercio Arnaud Tomaz Richards Pozzer Incita√ß√£o ao crime   Carla Zambelli Ernesto Ara√∫jo Incita√ß√£o ao crime   Luciano Dias Mayra Pinheiro Epidemia com Resultado em Morte   Paulo Eneas Oswaldo Eust√°quio Incita√ß√£o ao crime   Fl√°vio Cadegiani Eduardo Pazuello Crime Contra Humanidade   Luiz Paulo Dominghetti Jos√© Odilon Torres Corrup√ß√£o Ativa   Marcelo Queiroga Braga Netto Epidemia com Resultado em Morte   Carlos Wizard Jos√© Alves Filho Epidemia com Resultado em Morte   Bernardo Kuster Filipe Martins Incita√ß√£o ao crime   Allan dos Santos Leandro Ruschel Incita√ß√£o ao crime   Jair Bolsonaro Tercio Arnaud Tomaz Incita√ß√£o ao crime   Carlos Bolsonaro Ot√°vio Fakhoury Incita√ß√£o ao crime   Ernesto Ara√∫jo Osmar Terra Incita√ß√£o ao crime, Epidemia com Resultado em Morte   Luiz Paulo Dominghetti Marcelo Blanco Corrup√ß√£o Ativa   Carla Zambelli Carlos Wizard Incita√ß√£o ao crime   Jos√© Alves Filho Luciano Dias Epidemia com Resultado em Morte   Carlos Bolsonaro Onyx Lorenzoni Incita√ß√£o ao crime   Tercio Arnaud Tomaz Luis Carlos Heinze Incita√ß√£o ao crime   Carlos Bolsonaro Filipe Martins Incita√ß√£o ao crime   Wagner Ros√°rio Wilson Lima Prevarica√ß√£o   Jos√© Alves Filho Nise Yamaguchi Epidemia com Resultado em Morte   Paolo Zanotto Eduardo Pazuello Epidemia com Resultado em Morte   Leandro Ruschel Roberto Jefferson Incita√ß√£o ao crime   Roberto Dias Marcos Tolentino Improbidade Administrativa, Forma√ß√£o de Organiza√ß√£o Criminosa   T√∫lio Silveira Daniel Garrido Baena Falsidade Ideol√≥gica   Emanuela Medrades Jos√© Ricardo Santana Forma√ß√£o de Organiza√ß√£o Criminosa   Mayra Pinheiro Osmar Terra Epidemia com Resultado em Morte   Paulo Eneas Carla Zambelli Incita√ß√£o ao crime   Carla Zambelli Filipe Martins Incita√ß√£o ao crime   Bernardo Kuster Osmar Terra Incita√ß√£o ao crime   Luis Carlos Heinze H√©lio Angotti Netto Incita√ß√£o ao crime   Emanuela Medrades Francisco Emerson Maximiano Fraude Processual, Falsidade Ideol√≥gica, Forma√ß√£o de Organiza√ß√£o Criminosa, Uso de Documento Falso, Improbidade Administrativa   Jair Bolsonaro Fl√°vio Cadegiani Crime Contra Humanidade   Heitor Freire de Abreu Paolo Zanotto Epidemia com Resultado em Morte   Luis Carlos Heinze Carlos Wizard Incita√ß√£o ao crime   Fl√°vio Cadegiani Fl√°vio Adsuara Cadegiani Crime Contra Humanidade   Ot√°vio Fakhoury Leandro Ruschel Incita√ß√£o ao crime   Filipe Martins Ricardo Barros Incita√ß√£o ao crime   Thiago Fernandes da Costa Regina C√©lia Oliveira Advocacia Administrativa   Oswaldo Eust√°quio Richards Pozzer Incita√ß√£o ao crime   Eduardo Parrillo Emanuela Medrades Falsidade Ideol√≥gica   Jair Bolsonaro Mayra Pinheiro Prevarica√ß√£o, Crime Contra Humanidade, Epidemia com Resultado em Morte   Tercio Arnaud Tomaz Fl√°vio Bolsonaro Incita√ß√£o ao crime   Fl√°vio Bolsonaro Tercio Arnaud Tomaz Incita√ß√£o ao crime   Tercio Arnaud Tomaz Carlos Bolsonaro Incita√ß√£o ao crime   Luiz Paulo Dominghetti Rafael Francisco Carmo Alves Corrup√ß√£o Ativa   Luciano Dias Jos√© Alves Filho Epidemia com Resultado em Morte   Richards Pozzer Eduardo Bolsonaro Incita√ß√£o ao crime   Elcio Franco Andreia da Silva Lima Improbidade Administrativa   Paola Werneck Pedro Benedito Batista Junior Perigo Para a vida ou Sa√∫de de Outrem   T√∫lio Silveira Danilo Trento Improbidade Administrativa   Ricardo Barros Ernesto Ara√∫jo Incita√ß√£o ao crime   Luiz Paulo Dominghetti Andreia da Silva Lima Corrup√ß√£o Ativa   Carla Zambelli Osmar Terra Incita√ß√£o ao crime   Luis Carlos Heinze Filipe Martins Incita√ß√£o ao crime   Heitor Freire de Abreu Elcio Franco Epidemia com Resultado em Morte   Marcelo Bento Pires Alex Lial Marinho Advocacia Administrativa   Roberto Jefferson Ot√°vio Fakhoury Incita√ß√£o ao crime   Ricardo Barros Danilo Trento Improbidade Administrativa, Forma√ß√£o de Organiza√ß√£o Criminosa   Roberto Goidanich Eduardo Bolsonaro Incita√ß√£o ao crime   Oswaldo Eust√°quio Luis Carlos Heinze Incita√ß√£o ao crime   Roberto Jefferson Onyx Lorenzoni Incita√ß√£o ao crime   Ernesto Ara√∫jo Allan dos Santos Incita√ß√£o ao crime   Daniel Garrido Baena Jo√£o Paulo F. Barros Falsidade Ideol√≥gica   Elcio Franco H√©lio Angotti Netto Epidemia com Resultado em Morte   Ot√°vio Fakhoury Tercio Arnaud Tomaz Incita√ß√£o ao crime   Elcio Franco Carlos Wizard Epidemia com Resultado em Morte   Fernando Oikawa Eduardo Parrillo Perigo Para a vida ou Sa√∫de de Outrem, Crime Contra Humanidade   Ricardo Barros Ot√°vio Fakhoury Incita√ß√£o ao crime   Danilo Trento Andreia da Silva Lima Improbidade Administrativa   Luis Carlos Heinze Osmar Terra Incita√ß√£o ao crime   Carlos Wizard Luciano Hang Incita√ß√£o ao crime   Paulo Eneas Luis Carlos Heinze Incita√ß√£o ao crime   Osmar Terra Eduardo Bolsonaro Incita√ß√£o ao crime   Ricardo Barros Onyx Lorenzoni Incita√ß√£o ao crime   Eduardo Pazuello Wilson Lima Prevarica√ß√£o   Ricardo Barros Filipe Martins Incita√ß√£o ao crime   Marcelo Blanco Cristiano Carvalho Corrup√ß√£o Ativa   Oswaldo Eust√°quio Fl√°vio Bolsonaro Incita√ß√£o ao crime   Jair Bolsonaro Jos√© Alves Filho Epidemia com Resultado em Morte   Oswaldo Eust√°quio Carlos Bolsonaro Incita√ß√£o ao crime   Carlos Wizard Heitor Freire de Abreu Epidemia com Resultado em Morte   Raimundo Nonato Brasil Ricardo Barros Improbidade Administrativa   Luciano Hang Roberto Goidanich Incita√ß√£o ao crime   Leandro Ruschel Ricardo Barros Incita√ß√£o ao crime   Mauro Luiz de Brito Ribeiro Arthur Weintraub Epidemia com Resultado em Morte   Onyx Lorenzoni Tercio Arnaud Tomaz Incita√ß√£o ao crime   Ricardo Barros Teresa Cristina Reis de S√° Improbidade Administrativa   Eduardo Pazuello Wagner Ros√°rio Prevarica√ß√£o   H√©lio Angotti Netto Ot√°vio Fakhoury Incita√ß√£o ao crime   Cristiano Carvalho Jos√© Odilon Torres Corrup√ß√£o Ativa   Carla Guerra Eduardo Parrillo Perigo Para a vida ou Sa√∫de de Outrem, Crime Contra Humanidade   Cristiano Carvalho Marcelo Blanco Corrup√ß√£o Ativa   Paulo Eneas Carlos Bolsonaro Incita√ß√£o ao crime   Carlos Jordy Leandro Ruschel Incita√ß√£o ao crime   Marcelo Blanco Raimundo Nonato Brasil Corrup√ß√£o Ativa   H√©lio Angotti Netto Onyx Lorenzoni Incita√ß√£o ao crime   Ernesto Ara√∫jo Luciano Dias Epidemia com Resultado em Morte   Teresa Cristina Reis de S√° Marcos Tolentino Improbidade Administrativa   Allan dos Santos Ot√°vio Fakhoury Incita√ß√£o ao crime   Elcio Franco Osmar Terra Epidemia com Resultado em Morte   Ernesto Ara√∫jo Nise Yamaguchi Epidemia com Resultado em Morte   Richards Pozzer Ernesto Ara√∫jo Incita√ß√£o ao crime   Carlos Wizard Roberto Jefferson Incita√ß√£o ao crime   Eduardo Bolsonaro Luciano Hang Incita√ß√£o ao crime   Allan dos Santos Onyx Lorenzoni Incita√ß√£o ao crime   Bia Kicis Jair Bolsonaro Incita√ß√£o ao crime   Filipe Martins Richards Pozzer Incita√ß√£o ao crime   Onyx Lorenzoni Fl√°vio Cadegiani Crime Contra Humanidade   Mayra Pinheiro Luciano Dias Epidemia com Resultado em Morte   Francisco Emerson Maximiano Elcio Franco Improbidade Administrativa   Richards Pozzer H√©lio Angotti Netto Incita√ß√£o ao crime   Luciano Dias Heitor Freire de Abreu Epidemia com Resultado em Morte   Wilson Lima F√°bio Wajngarten Prevarica√ß√£o   Richards Pozzer Carlos Wizard Incita√ß√£o ao crime   Onyx Lorenzoni Mayra Pinheiro Crime Contra Humanidade   Luis Carlos Heinze Allan dos Santos Incita√ß√£o ao crime   Osmar Terra Marcelo Queiroga Epidemia com Resultado em Morte   Ernesto Ara√∫jo Carlos Jordy Incita√ß√£o ao crime   Jos√© Alves Filho Arthur Weintraub Epidemia com Resultado em Morte   Eduardo Parrillo Francisco Emerson Maximiano Falsidade Ideol√≥gica   Carlos Jordy Tercio Arnaud Tomaz Incita√ß√£o ao crime   Cristiano Carvalho Rafael Francisco Carmo Alves Corrup√ß√£o Ativa   Roberto Goidanich H√©lio Angotti Netto Incita√ß√£o ao crime   Francisco Emerson Maximiano Carlos Alberto de S√° Improbidade Administrativa   Carlos Alberto de S√° Jos√© Odilon Torres Corrup√ß√£o Ativa   Marcelo Blanco Luiz Paulo Dominghetti Corrup√ß√£o Ativa   Richards Pozzer Filipe Martins Incita√ß√£o ao crime   Carlos Alberto de S√° Marcelo Blanco Corrup√ß√£o Ativa   Emanuela Medrades Andreia da Silva Lima Improbidade Administrativa   Osmar Terra Ernesto Ara√∫jo Incita√ß√£o ao crime, Epidemia com Resultado em Morte   Arthur Weintraub Mayra Pinheiro Epidemia com Resultado em Morte   H√©lio Angotti Netto Braga Netto Epidemia com Resultado em Morte   Eduardo Bolsonaro Roberto Jefferson Incita√ß√£o ao crime   Paulo Eneas Bernardo Kuster Incita√ß√£o ao crime   Bernardo Kuster Carlos Jordy Incita√ß√£o ao crime   Carlos Bolsonaro Bia Kicis Incita√ß√£o ao crime   Wilson Lima Jair Bolsonaro Prevarica√ß√£o, Crimes de Responsabilidade   Eduardo Pazuello Onyx Lorenzoni Crime Contra Humanidade   Jair Bolsonaro Luciano Hang Incita√ß√£o ao crime   Eduardo Pazuello Jos√© Alves Filho Epidemia com Resultado em Morte   Osmar Terra H√©lio Angotti Netto Incita√ß√£o ao crime, Epidemia com Resultado em Morte   Daniel Garrido Baena Emanuela Medrades Falsidade Ideol√≥gica   Osmar Terra Carlos Wizard Incita√ß√£o ao crime, Epidemia com Resultado em Morte   Carla Zambelli Bia Kicis Incita√ß√£o ao crime   Filipe Martins Fl√°vio Bolsonaro Incita√ß√£o ao crime   Filipe Martins Carlos Bolsonaro Incita√ß√£o ao crime   Jair Bolsonaro Heitor Freire de Abreu Epidemia com Resultado em Morte   Richards Pozzer Osmar Terra Incita√ß√£o ao crime   Mauro Luiz de Brito Ribeiro Eduardo Pazuello Epidemia com Resultado em Morte   Jair Bolsonaro Fernando Parrillo Crime Contra Humanidade   Marcelo Queiroga F√°bio Wajngarten Prevarica√ß√£o   Jos√© Odilon Torres Cristiano Carvalho Corrup√ß√£o Ativa   Mayra Pinheiro Pedro Benedito Batista Junior Crime Contra Humanidade   Leandro Ruschel Richards Pozzer Incita√ß√£o ao crime   Daniel Garrido Baena Eduardo Parrillo Falsidade Ideol√≥gica   Fernanda de Oliveira Igarashi Fernando Parrillo Falsidade Ideol√≥gica   Carla Zambelli Carlos Jordy Incita√ß√£o ao crime   Francisco Emerson Maximiano T√∫lio Silveira Uso de Documento Falso, Falsidade Ideol√≥gica, Improbidade Administrativa   Carlos Alberto de S√° Rafael Francisco Carmo Alves Corrup√ß√£o Ativa   Osmar Terra Filipe Martins Incita√ß√£o ao crime   Carlos Wizard Ricardo Barros Incita√ß√£o ao crime   Pedro Benedito Batista Junior Jair Bolsonaro Crime Contra Humanidade   Jos√© Odilon Torres Raimundo Nonato Brasil Corrup√ß√£o Ativa   Bia Kicis Roberto Goidanich Incita√ß√£o ao crime   Fl√°vio Bolsonaro Luciano Hang Incita√ß√£o ao crime   Marcelo Queiroga Mauro Luiz de Brito Ribeiro Epidemia com Resultado em Morte   Jair Bolsonaro Roberto Jefferson Incita√ß√£o ao crime   Paolo Zanotto Marcelo Queiroga Epidemia com Resultado em Morte   Tercio Arnaud Tomaz Eduardo Bolsonaro Incita√ß√£o ao crime   Luis Carlos Heinze Carlos Jordy Incita√ß√£o ao crime   Marcelo Queiroga Jair Bolsonaro Prevarica√ß√£o, Epidemia com Resultado em Morte   Roberto Jefferson Bia Kicis Incita√ß√£o ao crime   Eduardo Pazuello Braga Netto Epidemia com Resultado em Morte   Jos√© Ricardo Santana Ricardo Barros Forma√ß√£o de Organiza√ß√£o Criminosa   Luciano Hang Leandro Ruschel Incita√ß√£o ao crime   Emanuela Medrades Teresa Cristina Reis de S√° Improbidade Administrativa   Carlos Jordy Ot√°vio Fakhoury Incita√ß√£o ao crime   Elcio Franco Luciano Dias Epidemia com Resultado em Morte   Roberto Goidanich Luciano Hang Incita√ß√£o ao crime   Jos√© Alves Filho Eduardo Pazuello Epidemia com Resultado em Morte   Alex Lial Marinho Ricardo Barros Advocacia Administrativa   Paolo Zanotto Ernesto Ara√∫jo Epidemia com Resultado em Morte   Mayra Pinheiro F√°bio Wajngarten Prevarica√ß√£o   Carlos Wizard Oswaldo Eust√°quio Incita√ß√£o ao crime   Carlos Jordy Onyx Lorenzoni Incita√ß√£o ao crime   Fernando Parrillo Pedro Benedito Batista Junior Perigo Para a vida ou Sa√∫de de Outrem, Crime Contra Humanidade, Omiss√£o de Notifica√ß√£o de Doen√ßa, Falsidade Ideol√≥gica   Elcio Franco Nise Yamaguchi Epidemia com Resultado em Morte   Carlos Wizard Paulo Eneas Incita√ß√£o ao crime   Raimundo Nonato Brasil Emanuela Medrades Improbidade Administrativa   Andreia da Silva Lima Elcio Franco Improbidade Administrativa   Ricardo Barros Bia Kicis Incita√ß√£o ao crime   Leandro Ruschel Fl√°vio Bolsonaro Incita√ß√£o ao crime   Ot√°vio Fakhoury Luciano Hang Incita√ß√£o ao crime   Eduardo Bolsonaro Ricardo Barros Incita√ß√£o ao crime   Marcelo Bento Pires Ricardo Barros Advocacia Administrativa   Richards Pozzer Allan dos Santos Incita√ß√£o ao crime   Ernesto Ara√∫jo Arthur Weintraub Epidemia com Resultado em Morte   Elcio Franco Marcos Tolentino Improbidade Administrativa   Rodrigo Esper Carla Guerra Perigo Para a vida ou Sa√∫de de Outrem, Crime Contra Humanidade   Heitor Freire de Abreu Mayra Pinheiro Epidemia com Resultado em Morte   Paola Werneck Rodrigo Esper Perigo Para a vida ou Sa√∫de de Outrem   Fl√°vio Bolsonaro Roberto Jefferson Incita√ß√£o ao crime   Jos√© Odilon Torres Luiz Paulo Dominghetti Corrup√ß√£o Ativa   Mayra Pinheiro Mauro Luiz de Brito Ribeiro Epidemia com Resultado em Morte   Andreia da Silva Lima Carlos Alberto de S√° Corrup√ß√£o Ativa, Improbidade Administrativa   Marconny Nunes Ribeiro Danilo Trento Forma√ß√£o de Organiza√ß√£o Criminosa   Roberto Goidanich Allan dos Santos Incita√ß√£o ao crime   Oswaldo Eust√°quio Eduardo Bolsonaro Incita√ß√£o ao crime   Carlos Wizard Carla Zambelli Incita√ß√£o ao crime   Marcelo Blanco Teresa Cristina Reis de S√° Corrup√ß√£o Ativa   F√°bio Wajngarten Marcellus Jos√© Barroso Camp√™lo Prevarica√ß√£o   Jair Bolsonaro Marcellus Jos√© Barroso Camp√™lo Prevarica√ß√£o   Regina C√©lia Oliveira F√°bio Wajngarten Advocacia Administrativa   H√©lio Angotti Netto Bia Kicis Incita√ß√£o ao crime   Roberto Jefferson Ricardo Barros Incita√ß√£o ao crime   Onyx Lorenzoni Luciano Hang Incita√ß√£o ao crime   T√∫lio Silveira Ricardo Barros Improbidade Administrativa   Fl√°vio Adsuara Cadegiani Pedro Benedito Batista Junior Crime Contra Humanidade   Daniel Garrido Baena Francisco Emerson Maximiano Falsidade Ideol√≥gica   Danilo Trento Marcos Tolentino Fraude em Contrato, Improbidade Administrativa, Forma√ß√£o de Organiza√ß√£o Criminosa   Braga Netto H√©lio Angotti Netto Epidemia com Resultado em Morte   Allan dos Santos Bia Kicis Incita√ß√£o ao crime   Carlos Bolsonaro Jair Bolsonaro Incita√ß√£o ao crime   Ot√°vio Fakhoury Roberto Jefferson Incita√ß√£o ao crime   Onyx Lorenzoni Fernando Parrillo Crime Contra Humanidade   Osmar Terra Allan dos Santos Incita√ß√£o ao crime   Braga Netto Carlos Wizard Epidemia com Resultado em Morte   Marcelo Queiroga Paolo Zanotto Epidemia com Resultado em Morte   Roberto Dias Francisco Emerson Maximiano Improbidade Administrativa, Forma√ß√£o de Organiza√ß√£o Criminosa   Jair Bolsonaro Ricardo Barros Incita√ß√£o ao crime   Heitor Freire de Abreu Jos√© Alves Filho Epidemia com Resultado em Morte   Tercio Arnaud Tomaz H√©lio Angotti Netto Incita√ß√£o ao crime   F√°bio Wajngarten Thiago Fernandes da Costa Advocacia Administrativa   Arthur Weintraub Heitor Freire de Abreu Epidemia com Resultado em Morte   Andreia da Silva Lima T√∫lio Silveira Improbidade Administrativa   Tercio Arnaud Tomaz Carlos Wizard Incita√ß√£o ao crime   Marcelo Queiroga Elcio Franco Epidemia com Resultado em Morte   Rodrigo Esper Paola Werneck Perigo Para a vida ou Sa√∫de de Outrem   Onyx Lorenzoni Roberto Jefferson Incita√ß√£o ao crime   H√©lio Angotti Netto Ricardo Barros Incita√ß√£o ao crime   Paolo Zanotto Braga Netto Epidemia com Resultado em Morte   Carlos Wizard Luis Carlos Heinze Incita√ß√£o ao crime   Ricardo Barros F√°bio Wajngarten Advocacia Administrativa   Jair Bolsonaro Oswaldo Eust√°quio Incita√ß√£o ao crime   Richards Pozzer Carlos Jordy Incita√ß√£o ao crime   Jair Bolsonaro Paulo Eneas Incita√ß√£o ao crime   Tercio Arnaud Tomaz Filipe Martins Incita√ß√£o ao crime   Roberto Dias Raimundo Nonato Brasil Improbidade Administrativa   Osmar Terra Luciano Dias Epidemia com Resultado em Morte   Braga Netto Osmar Terra Epidemia com Resultado em Morte   Mayra Pinheiro Paolo Zanotto Epidemia com Resultado em Morte   Fl√°vio Bolsonaro Ricardo Barros Incita√ß√£o ao crime   Ernesto Ara√∫jo Eduardo Pazuello Epidemia com Resultado em Morte   Pedro Benedito Batista Junior Rodrigo Esper Perigo Para a vida ou Sa√∫de de Outrem, Crime Contra Humanidade   Fernanda de Oliveira Igarashi Jo√£o Paulo F. Barros Falsidade Ideol√≥gica   Roberto Jefferson Jair Bolsonaro Incita√ß√£o ao crime   Eduardo Bolsonaro Richards Pozzer Incita√ß√£o ao crime   Bia Kicis Leandro Ruschel Incita√ß√£o ao crime   Eduardo Parrillo Carla Guerra Perigo Para a vida ou Sa√∫de de Outrem, Crime Contra Humanidade   Luciano Hang Ot√°vio Fakhoury Incita√ß√£o ao crime   Osmar Terra Nise Yamaguchi Epidemia com Resultado em Morte   Roberto Goidanich Carlos Jordy Incita√ß√£o ao crime   Raimundo Nonato Brasil Francisco Emerson Maximiano Improbidade Administrativa   Luciano Hang Onyx Lorenzoni Incita√ß√£o ao crime   Carlos Wizard Carlos Bolsonaro Incita√ß√£o ao crime   Oswaldo Eust√°quio H√©lio Angotti Netto Incita√ß√£o ao crime   Mayra Pinheiro Elcio Franco Epidemia com Resultado em Morte   Filipe Martins Eduardo Bolsonaro Incita√ß√£o ao crime   Bernardo Kuster Roberto Goidanich Incita√ß√£o ao crime   Tercio Arnaud Tomaz Osmar Terra Incita√ß√£o ao crime   Jair Bolsonaro Carla Zambelli Incita√ß√£o ao crime   Ricardo Barros Jair Bolsonaro Incita√ß√£o ao crime   Ernesto Ara√∫jo Bernardo Kuster Incita√ß√£o ao crime   Carlos Jordy Roberto Jefferson Incita√ß√£o ao crime   Pedro Benedito Batista Junior T√∫lio Silveira Falsidade Ideol√≥gica   Oswaldo Eust√°quio Carlos Wizard Incita√ß√£o ao crime   Paulo Eneas Ernesto Ara√∫jo Incita√ß√£o ao crime   Roberto Jefferson Richards Pozzer Incita√ß√£o ao crime   Fernando Oikawa Carla Guerra Perigo Para a vida ou Sa√∫de de Outrem, Crime Contra Humanidade   Fl√°vio Bolsonaro Oswaldo Eust√°quio Incita√ß√£o ao crime   Ot√°vio Fakhoury Ricardo Barros Incita√ß√£o ao crime   Elcio Franco Arthur Weintraub Epidemia com Resultado em Morte   Osmar Terra Carlos Jordy Incita√ß√£o ao crime   Emanuela Medrades Marcos Tolentino Improbidade Administrativa, Forma√ß√£o de Organiza√ß√£o Criminosa   Rafael Francisco Carmo Alves Cristiano Carvalho Corrup√ß√£o Ativa   Fl√°vio Bolsonaro Paulo Eneas Incita√ß√£o ao crime   Jos√© Ricardo Santana Emanuela Medrades Forma√ß√£o de Organiza√ß√£o Criminosa   Carlos Bolsonaro Roberto Goidanich Incita√ß√£o ao crime   Wagner Ros√°rio Jair Bolsonaro Prevarica√ß√£o   Bia Kicis Tercio Arnaud Tomaz Incita√ß√£o ao crime   Paulo Eneas Carlos Wizard Incita√ß√£o ao crime   Carla Zambelli Roberto Goidanich Incita√ß√£o ao crime   Arthur Weintraub Nise Yamaguchi Epidemia com Resultado em Morte   Nise Yamaguchi H√©lio Angotti Netto Epidemia com Resultado em Morte   Roberto Goidanich Oswaldo Eust√°quio Incita√ß√£o ao crime   Mauro Luiz de Brito Ribeiro Marcelo Queiroga Epidemia com Resultado em Morte   H√©lio Angotti Netto Jair Bolsonaro Incita√ß√£o ao crime, Epidemia com Resultado em Morte   Ricardo Barros Roberto Dias Improbidade Administrativa, Forma√ß√£o de Organiza√ß√£o Criminosa   Nise Yamaguchi Carlos Wizard Epidemia com Resultado em Morte   Roberto Goidanich Paulo Eneas Incita√ß√£o ao crime   Rafael Francisco Carmo Alves Raimundo Nonato Brasil Corrup√ß√£o Ativa   Eduardo Bolsonaro Fl√°vio Bolsonaro Incita√ß√£o ao crime   Eduardo Bolsonaro Carlos Bolsonaro Incita√ß√£o ao crime   Pedro Benedito Batista Junior Fernanda de Oliveira Igarashi Falsidade Ideol√≥gica   Onyx Lorenzoni Ricardo Barros Incita√ß√£o ao crime   Fl√°vio Bolsonaro Carla Zambelli Incita√ß√£o ao crime   Mayra Pinheiro Rodrigo Esper Crime Contra Humanidade   Paulo Eneas Filipe Martins Incita√ß√£o ao crime   Allan dos Santos Jair Bolsonaro Incita√ß√£o ao crime   Mauro Luiz de Brito Ribeiro Ernesto Ara√∫jo Epidemia com Resultado em Morte   Emanuela Medrades Pedro Benedito Batista Junior Falsidade Ideol√≥gica   Marcos Tolentino Emanuela Medrades Improbidade Administrativa, Forma√ß√£o de Organiza√ß√£o Criminosa   Oswaldo Eust√°quio Osmar Terra Incita√ß√£o ao crime   Carlos Wizard Bernardo Kuster Incita√ß√£o ao crime   H√©lio Angotti Netto Richards Pozzer Incita√ß√£o ao crime   Teresa Cristina Reis de S√° Cristiano Carvalho Corrup√ß√£o Ativa   Jair Bolsonaro Luis Carlos Heinze Incita√ß√£o ao crime   Roberto Jefferson Fl√°vio Bolsonaro Incita√ß√£o ao crime   Roberto Goidanich Carla Zambelli Incita√ß√£o ao crime   Andreia da Silva Lima Jos√© Odilon Torres Corrup√ß√£o Ativa   Leandro Ruschel Eduardo Bolsonaro Incita√ß√£o ao crime   Tercio Arnaud Tomaz Allan dos Santos Incita√ß√£o ao crime   Andreia da Silva Lima Marcelo Blanco Corrup√ß√£o Ativa   Allan dos Santos Richards Pozzer Incita√ß√£o ao crime   Onyx Lorenzoni Oswaldo Eust√°quio Incita√ß√£o ao crime   Paulo Eneas Osmar Terra Incita√ß√£o ao crime   Onyx Lorenzoni Paulo Eneas Incita√ß√£o ao crime   Jos√© Alves Filho Marcelo Queiroga Epidemia com Resultado em Morte   Teresa Cristina Reis de S√° Raimundo Nonato Brasil Corrup√ß√£o Ativa, Improbidade Administrativa   Raimundo Nonato Brasil Marcelo Blanco Corrup√ß√£o Ativa   Rodrigo Esper Pedro Benedito Batista Junior Perigo Para a vida ou Sa√∫de de Outrem, Crime Contra Humanidade   Luis Carlos Heinze Bernardo Kuster Incita√ß√£o ao crime   Nise Yamaguchi Osmar Terra Epidemia com Resultado em Morte   Marcellus Jos√© Barroso Camp√™lo Marcelo Queiroga Prevarica√ß√£o   Rafael Francisco Carmo Alves Luiz Paulo Dominghetti Corrup√ß√£o Ativa   Fernando Parrillo Fl√°vio Adsuara Cadegiani Crime Contra Humanidade   Carlos Jordy Ricardo Barros Incita√ß√£o ao crime   Jair Bolsonaro Carlos Bolsonaro Incita√ß√£o ao crime   Braga Netto Luciano Dias Epidemia com Resultado em Morte   Ricardo Barros Roberto Goidanich Incita√ß√£o ao crime   Fernando Parrillo Rodrigo Esper Perigo Para a vida ou Sa√∫de de Outrem, Crime Contra Humanidade   Eduardo Pazuello Jair Bolsonaro Prevarica√ß√£o, Crime Contra Humanidade, Emprego Irregular de Verbas P√∫blicas, Epidemia com Resultado em Morte   Filipe Martins H√©lio Angotti Netto Incita√ß√£o ao crime   Thiago Fernandes da Costa F√°bio Wajngarten Advocacia Administrativa   Ricardo Barros Elcio Franco Improbidade Administrativa   Fernanda de Oliveira Igarashi Emanuela Medrades Falsidade Ideol√≥gica   Jos√© Alves Filho Ernesto Ara√∫jo Epidemia com Resultado em Morte   Filipe Martins Carlos Wizard Incita√ß√£o ao crime   Braga Netto Nise Yamaguchi Epidemia com Resultado em Morte   Fl√°vio Bolsonaro Luis Carlos Heinze Incita√ß√£o ao crime   Elcio Franco Eduardo Pazuello Epidemia com Resultado em Morte   Jo√£o Paulo F. Barros Pedro Benedito Batista Junior Falsidade Ideol√≥gica   Jair Bolsonaro Eduardo Parrillo Crime Contra Humanidade   Onyx Lorenzoni Carla Zambelli Incita√ß√£o ao crime   Bia Kicis Ot√°vio Fakhoury Incita√ß√£o ao crime   Ot√°vio Fakhoury Richards Pozzer Incita√ß√£o ao crime   Wilson Lima Mayra Pinheiro Prevarica√ß√£o   Fernanda de Oliveira Igarashi Eduardo Parrillo Falsidade Ideol√≥gica   Ernesto Ara√∫jo Leandro Ruschel Incita√ß√£o ao crime   Andreia da Silva Lima Rafael Francisco Carmo Alves Corrup√ß√£o Ativa   H√©lio Angotti Netto Fl√°vio Bolsonaro Incita√ß√£o ao crime   Bia Kicis Onyx Lorenzoni Incita√ß√£o ao crime   Ricardo Barros Carlos Alberto de S√° Improbidade Administrativa   Oswaldo Eust√°quio Allan dos Santos Incita√ß√£o ao crime   Roberto Goidanich Luis Carlos Heinze Incita√ß√£o ao crime   Osmar Terra Arthur Weintraub Epidemia com Resultado em Morte   H√©lio Angotti Netto Elcio Franco Epidemia com Resultado em Morte   F√°bio Wajngarten Eduardo Pazuello Prevarica√ß√£o   Jos√© Ricardo Santana Francisco Emerson Maximiano Forma√ß√£o de Organiza√ß√£o Criminosa   Allan dos Santos Fl√°vio Bolsonaro Incita√ß√£o ao crime   Raimundo Nonato Brasil Andreia da Silva Lima Corrup√ß√£o Ativa, Improbidade Administrativa   Teresa Cristina Reis de S√° Luiz Paulo Dominghetti Corrup√ß√£o Ativa   Francisco Emerson Maximiano Fernando Parrillo Falsidade Ideol√≥gica   Fl√°vio Bolsonaro Carlos Bolsonaro Incita√ß√£o ao crime   Bernardo Kuster Leandro Ruschel Incita√ß√£o ao crime   Pedro Benedito Batista Junior Fl√°vio Cadegiani Crime Contra Humanidade   Onyx Lorenzoni Richards Pozzer Incita√ß√£o ao crime   Mauro Luiz de Brito Ribeiro Braga Netto Epidemia com Resultado em Morte   Roberto Dias Teresa Cristina Reis de S√° Improbidade Administrativa   Fl√°vio Adsuara Cadegiani Rodrigo Esper Crime Contra Humanidade   Pedro Benedito Batista Junior Daniel Garrido Baena Falsidade Ideol√≥gica   Marconny Nunes Ribeiro Ricardo Barros Forma√ß√£o de Organiza√ß√£o Criminosa   Pedro Benedito Batista Junior Mayra Pinheiro Crime Contra Humanidade   Filipe Martins Osmar Terra Incita√ß√£o ao crime   Tercio Arnaud Tomaz Carlos Jordy Incita√ß√£o ao crime   Jair Bolsonaro Bernardo Kuster Incita√ß√£o ao crime   Roberto Goidanich Carlos Bolsonaro Incita√ß√£o ao crime   Fernando Parrillo Fernanda de Oliveira Igarashi Falsidade Ideol√≥gica   Marcos Tolentino Jos√© Ricardo Santana Forma√ß√£o de Organiza√ß√£o Criminosa   Leandro Ruschel H√©lio Angotti Netto Incita√ß√£o ao crime   Carlos Jordy Jair Bolsonaro Incita√ß√£o ao crime   Carla Zambelli Leandro Ruschel Incita√ß√£o ao crime   Marcelo Queiroga Mayra Pinheiro Prevarica√ß√£o, Epidemia com Resultado em Morte   Marcos Tolentino Francisco Emerson Maximiano Fraude em Contrato, Improbidade Administrativa, Forma√ß√£o de Organiza√ß√£o Criminosa   Ot√°vio Fakhoury Fl√°vio Bolsonaro Incita√ß√£o ao crime   Onyx Lorenzoni Luis Carlos Heinze Incita√ß√£o ao crime   Ricardo Barros T√∫lio Silveira Improbidade Administrativa   Richards Pozzer Roberto Goidanich Incita√ß√£o ao crime   Fl√°vio Cadegiani Jair Bolsonaro Crime Contra Humanidade   Eduardo Parrillo Pedro Benedito Batista Junior Perigo Para a vida ou Sa√∫de de Outrem, Crime Contra Humanidade, Omiss√£o de Notifica√ß√£o de Doen√ßa, Falsidade Ideol√≥gica   Carlos Wizard Eduardo Bolsonaro Incita√ß√£o ao crime   Elcio Franco Francisco Emerson Maximiano Improbidade Administrativa   Paolo Zanotto Mauro Luiz de Brito Ribeiro Epidemia com Resultado em Morte   Jos√© Alves Filho Braga Netto Epidemia com Resultado em Morte   Carlos Jordy Richards Pozzer Incita√ß√£o ao crime   Ernesto Ara√∫jo Marcelo Queiroga Epidemia com Resultado em Morte   Eduardo Pazuello Elcio Franco Epidemia com Resultado em Morte   Carlos Bolsonaro Tercio Arnaud Tomaz Incita√ß√£o ao crime   Luis Carlos Heinze Leandro Ruschel Incita√ß√£o ao crime   Osmar Terra Paolo Zanotto Epidemia com Resultado em Morte   Fl√°vio Bolsonaro Bernardo Kuster Incita√ß√£o ao crime   Paolo Zanotto Jair Bolsonaro Epidemia com Resultado em Morte   Onyx Lorenzoni Carlos Bolsonaro Incita√ß√£o ao crime   Nise Yamaguchi Luciano Dias Epidemia com Resultado em Morte   Fernando Oikawa Pedro Benedito Batista Junior Perigo Para a vida ou Sa√∫de de Outrem, Crime Contra Humanidade   Pedro Benedito Batista Junior Onyx Lorenzoni Crime Contra Humanidade   Rafael Francisco Carmo Alves Teresa Cristina Reis de S√° Corrup√ß√£o Ativa   Teresa Cristina Reis de S√° Danilo Trento Improbidade Administrativa   Mayra Pinheiro Fl√°vio Cadegiani Crime Contra Humanidade   Carla Zambelli Tercio Arnaud Tomaz Incita√ß√£o ao crime   Oswaldo Eust√°quio Carlos Jordy Incita√ß√£o ao crime   Luiz Paulo Dominghetti Cristiano Carvalho Corrup√ß√£o Ativa   Paulo Eneas Bia Kicis Incita√ß√£o ao crime   Fernanda de Oliveira Igarashi Francisco Emerson Maximiano Falsidade Ideol√≥gica   Onyx Lorenzoni Eduardo Parrillo Crime Contra Humanidade   Luciano Hang Ricardo Barros Incita√ß√£o ao crime   F√°bio Wajngarten Regina C√©lia Oliveira Advocacia Administrativa   Osmar Terra Roberto Goidanich Incita√ß√£o ao crime   Roberto Goidanich Bernardo Kuster Incita√ß√£o ao crime   Danilo Trento Francisco Emerson Maximiano Fraude em Contrato, Improbidade Administrativa, Forma√ß√£o de Organiza√ß√£o Criminosa   Osmar Terra Eduardo Pazuello Epidemia com Resultado em Morte   Eduardo Pazuello Fernando Oikawa Crime Contra Humanidade   Leandro Ruschel Osmar Terra Incita√ß√£o ao crime   Filipe Martins Allan dos Santos Incita√ß√£o ao crime   Marcelo Queiroga Jos√© Alves Filho Epidemia com Resultado em Morte   Elcio Franco Raimundo Nonato Brasil Improbidade Administrativa   Paulo Eneas Carlos Jordy Incita√ß√£o ao crime   Carla Guerra Pedro Benedito Batista Junior Perigo Para a vida ou Sa√∫de de Outrem, Crime Contra Humanidade   Rodrigo Esper Eduardo Parrillo Perigo Para a vida ou Sa√∫de de Outrem, Crime Contra Humanidade   Ernesto Ara√∫jo Ot√°vio Fakhoury Incita√ß√£o ao crime   Osmar Terra Bernardo Kuster Incita√ß√£o ao crime   Braga Netto Arthur Weintraub Epidemia com Resultado em Morte   Carlos Alberto de S√° Emanuela Medrades Improbidade Administrativa   Carlos Wizard Marcelo Queiroga Epidemia com Resultado em Morte   Carlos Jordy Fl√°vio Bolsonaro Incita√ß√£o ao crime   Ernesto Ara√∫jo Onyx Lorenzoni Incita√ß√£o ao crime   Roberto Jefferson Tercio Arnaud Tomaz Incita√ß√£o ao crime   Bia Kicis Roberto Jefferson Incita√ß√£o ao crime   Roberto Jefferson Eduardo Bolsonaro Incita√ß√£o ao crime   Ernesto Ara√∫jo Filipe Martins Incita√ß√£o ao crime   Danilo Trento Raimundo Nonato Brasil Improbidade Administrativa   Jo√£o Paulo F. Barros Eduardo Parrillo Falsidade Ideol√≥gica   Rodrigo Esper Eduardo Pazuello Crime Contra Humanidade   Bernardo Kuster Ot√°vio Fakhoury Incita√ß√£o ao crime   Carlos Wizard Ernesto Ara√∫jo Incita√ß√£o ao crime, Epidemia com Resultado em Morte   Fernando Parrillo Daniel Garrido Baena Falsidade Ideol√≥gica   Mayra Pinheiro Onyx Lorenzoni Crime Contra Humanidade   Mayra Pinheiro Jos√© Alves Filho Epidemia com Resultado em Morte   Bernardo Kuster Onyx Lorenzoni Incita√ß√£o ao crime   Ricardo Barros Tercio Arnaud Tomaz Incita√ß√£o ao crime   Carlos Wizard H√©lio Angotti Netto Incita√ß√£o ao crime, Epidemia com Resultado em Morte   Jair Bolsonaro Eduardo Bolsonaro Incita√ß√£o ao crime   Oswaldo Eust√°quio Carla Zambelli Incita√ß√£o ao crime   Leandro Ruschel Allan dos Santos Incita√ß√£o ao crime   Luciano Hang Jair Bolsonaro Incita√ß√£o ao crime   Francisco Emerson Maximiano Jo√£o Paulo F. Barros Falsidade Ideol√≥gica   Carla Zambelli Ot√°vio Fakhoury Incita√ß√£o ao crime   Luis Carlos Heinze Ernesto Ara√∫jo Incita√ß√£o ao crime   Paolo Zanotto Elcio Franco Epidemia com Resultado em Morte   Marcelo Blanco Carlos Alberto de S√° Corrup√ß√£o Ativa   Carla Zambelli Onyx Lorenzoni Incita√ß√£o ao crime   Rodrigo Esper Fl√°vio Adsuara Cadegiani Crime Contra Humanidade   H√©lio Angotti Netto Tercio Arnaud Tomaz Incita√ß√£o ao crime   H√©lio Angotti Netto Eduardo Bolsonaro Incita√ß√£o ao crime   Ernesto Ara√∫jo Braga Netto Epidemia com Resultado em Morte   Fl√°vio Adsuara Cadegiani Fl√°vio Cadegiani Crime Contra Humanidade   Carlos Wizard Filipe Martins Incita√ß√£o ao crime   Filipe Martins Carlos Jordy Incita√ß√£o ao crime   F√°bio Wajngarten Wilson Lima Prevarica√ß√£o   Marconny Nunes Ribeiro Emanuela Medrades Forma√ß√£o de Organiza√ß√£o Criminosa   Pedro Benedito Batista Junior Fernando Parrillo Perigo Para a vida ou Sa√∫de de Outrem, Crime Contra Humanidade, Omiss√£o de Notifica√ß√£o de Doen√ßa, Falsidade Ideol√≥gica   Richards Pozzer Leandro Ruschel Incita√ß√£o ao crime   Marcos Tolentino Andreia da Silva Lima Improbidade Administrativa   Luciano Hang Richards Pozzer Incita√ß√£o ao crime   Allan dos Santos Tercio Arnaud Tomaz Incita√ß√£o ao crime   Fl√°vio Cadegiani Rodrigo Esper Crime Contra Humanidade   Elcio Franco Marcelo Queiroga Epidemia com Resultado em Morte   Fernando Parrillo Onyx Lorenzoni Crime Contra Humanidade   Luis Carlos Heinze Ot√°vio Fakhoury Incita√ß√£o ao crime   Regina C√©lia Oliveira Alex Lial Marinho Advocacia Administrativa   Fl√°vio Bolsonaro Eduardo Bolsonaro Incita√ß√£o ao crime   Marcelo Queiroga Heitor Freire de Abreu Epidemia com Resultado em Morte   F√°bio Wajngarten Wagner Ros√°rio Prevarica√ß√£o   Eduardo Bolsonaro H√©lio Angotti Netto Incita√ß√£o ao crime   Mayra Pinheiro Braga Netto Epidemia com Resultado em Morte   Luciano Dias H√©lio Angotti Netto Epidemia com Resultado em Morte   Ricardo Barros Marconny Nunes Ribeiro Forma√ß√£o de Organiza√ß√£o Criminosa   Daniel Garrido Baena Pedro Benedito Batista Junior Falsidade Ideol√≥gica   Eduardo Bolsonaro Carlos Wizard Incita√ß√£o ao crime   Luis Carlos Heinze Onyx Lorenzoni Incita√ß√£o ao crime   Luciano Dias Carlos Wizard Epidemia com Resultado em Morte   Wagner Ros√°rio Mayra Pinheiro Prevarica√ß√£o   Carlos Wizard Osmar Terra Incita√ß√£o ao crime, Epidemia com Resultado em Morte   Braga Netto Eduardo Pazuello Epidemia com Resultado em Morte   Emanuela Medrades Fernanda de Oliveira Igarashi Falsidade Ideol√≥gica   Elcio Franco Ernesto Ara√∫jo Epidemia com Resultado em Morte   Bia Kicis Ricardo Barros Incita√ß√£o ao crime   F√°bio Wajngarten Marcelo Queiroga Prevarica√ß√£o   H√©lio Angotti Netto Mayra Pinheiro Epidemia com Resultado em Morte   Jair Bolsonaro Marcelo Queiroga Prevarica√ß√£o, Epidemia com Resultado em Morte   Filipe Martins Oswaldo Eust√°quio Incita√ß√£o ao crime   Nise Yamaguchi Arthur Weintraub Epidemia com Resultado em Morte   Emanuela Medrades Raimundo Nonato Brasil Improbidade Administrativa   Osmar Terra Leandro Ruschel Incita√ß√£o ao crime   Filipe Martins Paulo Eneas Incita√ß√£o ao crime   Raimundo Nonato Brasil Marcos Tolentino Improbidade Administrativa   Ot√°vio Fakhoury Eduardo Bolsonaro Incita√ß√£o ao crime   Carlos Alberto de S√° Francisco Emerson Maximiano Improbidade Administrativa   Eduardo Parrillo Eduardo Pazuello Crime Contra Humanidade   Jo√£o Paulo F. Barros Francisco Emerson Maximiano Falsidade Ideol√≥gica   Jair Bolsonaro Ernesto Ara√∫jo Incita√ß√£o ao crime, Epidemia com Resultado em Morte   Andreia da Silva Lima Ricardo Barros Improbidade Administrativa   Fl√°vio Adsuara Cadegiani Onyx Lorenzoni Crime Contra Humanidade   Luciano Hang Fl√°vio Bolsonaro Incita√ß√£o ao crime   Leandro Ruschel Carlos Jordy Incita√ß√£o ao crime   Jair Bolsonaro H√©lio Angotti Netto Incita√ß√£o ao crime, Epidemia com Resultado em Morte   Carlos Bolsonaro Luciano Hang Incita√ß√£o ao crime   Eduardo Bolsonaro Osmar Terra Incita√ß√£o ao crime   Marcos Tolentino Teresa Cristina Reis de S√° Improbidade Administrativa   Luciano Dias Osmar Terra Epidemia com Resultado em Morte   Fernando Oikawa Eduardo Pazuello Crime Contra Humanidade   Jair Bolsonaro Carlos Wizard Incita√ß√£o ao crime, Epidemia com Resultado em Morte   Ricardo Barros Alex Lial Marinho Advocacia Administrativa   Mauro Luiz de Brito Ribeiro Jair Bolsonaro Epidemia com Resultado em Morte   Filipe Martins Carla Zambelli Incita√ß√£o ao crime   Tercio Arnaud Tomaz Bernardo Kuster Incita√ß√£o ao crime   Onyx Lorenzoni Eduardo Bolsonaro Incita√ß√£o ao crime   Elcio Franco Teresa Cristina Reis de S√° Improbidade Administrativa   Eduardo Parrillo Fl√°vio Adsuara Cadegiani Crime Contra Humanidade   Eduardo Pazuello Fl√°vio Cadegiani Crime Contra Humanidade   H√©lio Angotti Netto Jos√© Alves Filho Epidemia com Resultado em Morte   Cristiano Carvalho Luiz Paulo Dominghetti Corrup√ß√£o Ativa   Luiz Paulo Dominghetti Teresa Cristina Reis de S√° Corrup√ß√£o Ativa   Carlos Wizard Allan dos Santos Incita√ß√£o ao crime   Jos√© Odilon Torres Carlos Alberto de S√° Corrup√ß√£o Ativa   Jair Bolsonaro Filipe Martins Incita√ß√£o ao crime   Eduardo Parrillo Rodrigo Esper Perigo Para a vida ou Sa√∫de de Outrem, Crime Contra Humanidade   Fl√°vio Bolsonaro Ernesto Ara√∫jo Incita√ß√£o ao crime   Francisco Emerson Maximiano Emanuela Medrades Fraude Processual, Falsidade Ideol√≥gica, Forma√ß√£o de Organiza√ß√£o Criminosa, Uso de Documento Falso, Improbidade Administrativa   Eduardo Pazuello Mayra Pinheiro Prevarica√ß√£o, Crime Contra Humanidade, Epidemia com Resultado em Morte   Marconny Nunes Ribeiro Jos√© Ricardo Santana Forma√ß√£o de Organiza√ß√£o Criminosa   Leandro Ruschel Oswaldo Eust√°quio Incita√ß√£o ao crime   Jair Bolsonaro Carla Guerra Crime Contra Humanidade   Carla Guerra Eduardo Pazuello Crime Contra Humanidade   Ernesto Ara√∫jo Bia Kicis Incita√ß√£o ao crime   Fl√°vio Bolsonaro H√©lio Angotti Netto Incita√ß√£o ao crime   Leandro Ruschel Paulo Eneas Incita√ß√£o ao crime   Jos√© Alves Filho Mauro Luiz de Brito Ribeiro Epidemia com Resultado em Morte   Fernando Oikawa Fl√°vio Adsuara Cadegiani Crime Contra Humanidade   Carlos Bolsonaro Roberto Jefferson Incita√ß√£o ao crime   Francisco Emerson Maximiano Eduardo Parrillo Falsidade Ideol√≥gica   Fl√°vio Bolsonaro Carlos Wizard Incita√ß√£o ao crime   Roberto Goidanich Ernesto Ara√∫jo Incita√ß√£o ao crime   Fernando Oikawa Rodrigo Esper Perigo Para a vida ou Sa√∫de de Outrem, Crime Contra Humanidade   Danilo Trento Teresa Cristina Reis de S√° Improbidade Administrativa   Elcio Franco Braga Netto Epidemia com Resultado em Morte   Jos√© Alves Filho Jair Bolsonaro Epidemia com Resultado em Morte   Paulo Eneas Roberto Goidanich Incita√ß√£o ao crime   Jair Bolsonaro Osmar Terra Incita√ß√£o ao crime, Epidemia com Resultado em Morte   Carla Zambelli Roberto Jefferson Incita√ß√£o ao crime   Roberto Jefferson Luciano Hang Incita√ß√£o ao crime   Richards Pozzer Ot√°vio Fakhoury Incita√ß√£o ao crime   Carlos Jordy Eduardo Bolsonaro Incita√ß√£o ao crime   Oswaldo Eust√°quio Bernardo Kuster Incita√ß√£o ao crime   Bia Kicis Richards Pozzer Incita√ß√£o ao crime   Nise Yamaguchi Eduardo Pazuello Epidemia com Resultado em Morte   Bernardo Kuster Bia Kicis Incita√ß√£o ao crime   Filipe Martins Luis Carlos Heinze Incita√ß√£o ao crime   Roberto Goidanich Carlos Wizard Incita√ß√£o ao crime   Richards Pozzer Onyx Lorenzoni Incita√ß√£o ao crime   Emanuela Medrades Daniel Garrido Baena Falsidade Ideol√≥gica   Cristiano Carvalho Andreia da Silva Lima Corrup√ß√£o Ativa   Eduardo Bolsonaro Allan dos Santos Incita√ß√£o ao crime   Fl√°vio Bolsonaro Filipe Martins Incita√ß√£o ao crime   Leandro Ruschel Carla Zambelli Incita√ß√£o ao crime   Carlos Wizard Luciano Dias Epidemia com Resultado em Morte   Ot√°vio Fakhoury H√©lio Angotti Netto Incita√ß√£o ao crime   Mauro Luiz de Brito Ribeiro Paolo Zanotto Epidemia com Resultado em Morte   Carla Guerra Fl√°vio Adsuara Cadegiani Crime Contra Humanidade   Ricardo Barros Luciano Hang Incita√ß√£o ao crime   T√∫lio Silveira Fernando Parrillo Falsidade Ideol√≥gica   Emanuela Medrades Marconny Nunes Ribeiro Forma√ß√£o de Organiza√ß√£o Criminosa   Carlos Wizard Nise Yamaguchi Epidemia com Resultado em Morte   Carla Guerra Rodrigo Esper Perigo Para a vida ou Sa√∫de de Outrem, Crime Contra Humanidade   Marcelo Blanco Jos√© Odilon Torres Corrup√ß√£o Ativa   Eduardo Parrillo Fernanda de Oliveira Igarashi Falsidade Ideol√≥gica   Roberto Goidanich Filipe Martins Incita√ß√£o ao crime   Roberto Jefferson Allan dos Santos Incita√ß√£o ao crime   Emanuela Medrades Danilo Trento Improbidade Administrativa, Forma√ß√£o de Organiza√ß√£o Criminosa   Fl√°vio Bolsonaro Osmar Terra Incita√ß√£o ao crime   Arthur Weintraub Marcelo Queiroga Epidemia com Resultado em Morte   Mauro Luiz de Brito Ribeiro Elcio Franco Epidemia com Resultado em Morte   Osmar Terra Ot√°vio Fakhoury Incita√ß√£o ao crime   Onyx Lorenzoni H√©lio Angotti Netto Incita√ß√£o ao crime   Carlos Wizard Carlos Jordy Incita√ß√£o ao crime   H√©lio Angotti Netto Luciano Hang Incita√ß√£o ao crime   Osmar Terra Onyx Lorenzoni Incita√ß√£o ao crime   Onyx Lorenzoni Carlos Wizard Incita√ß√£o ao crime   Fl√°vio Cadegiani Mayra Pinheiro Crime Contra Humanidade   Roberto Goidanich Osmar Terra Incita√ß√£o ao crime   Arthur Weintraub Ernesto Ara√∫jo Epidemia com Resultado em Morte   Tercio Arnaud Tomaz Leandro Ruschel Incita√ß√£o ao crime   Jos√© Ricardo Santana Marcos Tolentino Forma√ß√£o de Organiza√ß√£o Criminosa   Bia Kicis Fl√°vio Bolsonaro Incita√ß√£o ao crime   H√©lio Angotti Netto Heitor Freire de Abreu Epidemia com Resultado em Morte   Jair Bolsonaro Allan dos Santos Incita√ß√£o ao crime   Jo√£o Paulo F. Barros Daniel Garrido Baena Falsidade Ideol√≥gica   Luis Carlos Heinze Bia Kicis Incita√ß√£o ao crime   Carlos Alberto de S√° Andreia da Silva Lima Corrup√ß√£o Ativa, Improbidade Administrativa   Ricardo Barros Roberto Jefferson Incita√ß√£o ao crime   Allan dos Santos Luciano Hang Incita√ß√£o ao crime   Jos√© Alves Filho Paolo Zanotto Epidemia com Resultado em Morte   Luciano Dias Nise Yamaguchi Epidemia com Resultado em Morte   Arthur Weintraub H√©lio Angotti Netto Epidemia com Resultado em Morte   Ot√°vio Fakhoury Osmar Terra Incita√ß√£o ao crime   Leandro Ruschel Luis Carlos Heinze Incita√ß√£o ao crime   Carlos Bolsonaro Ricardo Barros Incita√ß√£o ao crime   Onyx Lorenzoni Filipe Martins Incita√ß√£o ao crime   Paolo Zanotto Mayra Pinheiro Epidemia com Resultado em Morte   Arthur Weintraub Carlos Wizard Epidemia com Resultado em Morte   Thiago Fernandes da Costa Alex Lial Marinho Advocacia Administrativa   Francisco Emerson Maximiano Jos√© Ricardo Santana Forma√ß√£o de Organiza√ß√£o Criminosa   Cristiano Carvalho Teresa Cristina Reis de S√° Corrup√ß√£o Ativa   Roberto Dias Elcio Franco Improbidade Administrativa   Carla Zambelli Ricardo Barros Incita√ß√£o ao crime   H√©lio Angotti Netto Allan dos Santos Incita√ß√£o ao crime   Onyx Lorenzoni Carla Guerra Crime Contra Humanidade   Andreia da Silva Lima Emanuela Medrades Improbidade Administrativa   Jos√© Alves Filho Elcio Franco Epidemia com Resultado em Morte   Regina C√©lia Oliveira Ricardo Barros Advocacia Administrativa   Paola Werneck Fernando Oikawa Perigo Para a vida ou Sa√∫de de Outrem   H√©lio Angotti Netto Roberto Jefferson Incita√ß√£o ao crime   Eduardo Bolsonaro Carlos Jordy Incita√ß√£o ao crime   Rodrigo Esper Onyx Lorenzoni Crime Contra Humanidade   Carlos Jordy H√©lio Angotti Netto Incita√ß√£o ao crime   Marcellus Jos√© Barroso Camp√™lo Eduardo Pazuello Prevarica√ß√£o   Ernesto Ara√∫jo Mauro Luiz de Brito Ribeiro Epidemia com Resultado em Morte   Filipe Martins Bernardo Kuster Incita√ß√£o ao crime   Roberto Dias Carlos Alberto de S√° Improbidade Administrativa   Onyx Lorenzoni Osmar Terra Incita√ß√£o ao crime   Alex Lial Marinho Thiago Fernandes da Costa Advocacia Administrativa   Leandro Ruschel Carlos Bolsonaro Incita√ß√£o ao crime   Fl√°vio Cadegiani Onyx Lorenzoni Crime Contra Humanidade   Fl√°vio Bolsonaro Allan dos Santos Incita√ß√£o ao crime   Ernesto Ara√∫jo Jair Bolsonaro Incita√ß√£o ao crime, Epidemia com Resultado em Morte   Osmar Terra Braga Netto Epidemia com Resultado em Morte   Allan dos Santos Roberto Jefferson Incita√ß√£o ao crime   Carlos Bolsonaro Paulo Eneas Incita√ß√£o ao crime   Oswaldo Eust√°quio Leandro Ruschel Incita√ß√£o ao crime   Jair Bolsonaro Luciano Dias Epidemia com Resultado em Morte   Braga Netto Marcelo Queiroga Epidemia com Resultado em Morte   Marcelo Bento Pires Thiago Fernandes da Costa Advocacia Administrativa   Teresa Cristina Reis de S√° Roberto Dias Improbidade Administrativa   Jair Bolsonaro Nise Yamaguchi Epidemia com Resultado em Morte   Luciano Hang Tercio Arnaud Tomaz Incita√ß√£o ao crime   Luciano Hang Eduardo Bolsonaro Incita√ß√£o ao crime   Arthur Weintraub Osmar Terra Epidemia com Resultado em Morte   Eduardo Pazuello Heitor Freire de Abreu Epidemia com Resultado em Morte   Regina C√©lia Oliveira Marcelo Bento Pires Advocacia Administrativa   Mayra Pinheiro Jair Bolsonaro Prevarica√ß√£o, Crime Contra Humanidade, Epidemia com Resultado em Morte   Paolo Zanotto Jos√© Alves Filho Epidemia com Resultado em Morte   Eduardo Pazuello Fernando Parrillo Crime Contra Humanidade   Bernardo Kuster Jair Bolsonaro Incita√ß√£o ao crime   Paulo Eneas Leandro Ruschel Incita√ß√£o ao crime   Carlos Alberto de S√° Teresa Cristina Reis de S√° Corrup√ß√£o Ativa, Improbidade Administrativa   Braga Netto Ernesto Ara√∫jo Epidemia com Resultado em Morte   Eduardo Parrillo Daniel Garrido Baena Falsidade Ideol√≥gica   Eduardo Bolsonaro Oswaldo Eust√°quio Incita√ß√£o ao crime   Ot√°vio Fakhoury Allan dos Santos Incita√ß√£o ao crime   Jos√© Odilon Torres Marcelo Blanco Corrup√ß√£o Ativa   Wagner Ros√°rio Marcellus Jos√© Barroso Camp√™lo Prevarica√ß√£o   Eduardo Bolsonaro Paulo Eneas Incita√ß√£o ao crime   H√©lio Angotti Netto Nise Yamaguchi Epidemia com Resultado em Morte   Pedro Benedito Batista Junior Emanuela Medrades Falsidade Ideol√≥gica   Jair Bolsonaro Carlos Jordy Incita√ß√£o ao crime   Roberto Dias T√∫lio Silveira Improbidade Administrativa   Alex Lial Marinho F√°bio Wajngarten Advocacia Administrativa   Tercio Arnaud Tomaz Ernesto Ara√∫jo Incita√ß√£o ao crime   Bernardo Kuster Richards Pozzer Incita√ß√£o ao crime   Carla Zambelli Jair Bolsonaro Incita√ß√£o ao crime   Rafael Francisco Carmo Alves Carlos Alberto de S√° Corrup√ß√£o Ativa   Carlos Wizard Arthur Weintraub Epidemia com Resultado em Morte   Roberto Jefferson Oswaldo Eust√°quio Incita√ß√£o ao crime   Leandro Ruschel Bernardo Kuster Incita√ß√£o ao crime   Roberto Jefferson Paulo Eneas Incita√ß√£o ao crime   Onyx Lorenzoni Allan dos Santos Incita√ß√£o ao crime   Heitor Freire de Abreu H√©lio Angotti Netto Epidemia com Resultado em Morte   Paulo Eneas Tercio Arnaud Tomaz Incita√ß√£o ao crime   Eduardo Bolsonaro Carla Zambelli Incita√ß√£o ao crime   Carlos Bolsonaro Richards Pozzer Incita√ß√£o ao crime   Heitor Freire de Abreu Carlos Wizard Epidemia com Resultado em Morte   Jair Bolsonaro Pedro Benedito Batista Junior Crime Contra Humanidade   Daniel Garrido Baena Fernanda de Oliveira Igarashi Falsidade Ideol√≥gica   T√∫lio Silveira Jo√£o Paulo F. Barros Falsidade Ideol√≥gica   Richards Pozzer Bia Kicis Incita√ß√£o ao crime   Fernando Parrillo Jair Bolsonaro Crime Contra Humanidade   Ernesto Ara√∫jo Paolo Zanotto Epidemia com Resultado em Morte   Fernanda de Oliveira Igarashi Pedro Benedito Batista Junior Falsidade Ideol√≥gica   Jos√© Odilon Torres Rafael Francisco Carmo Alves Corrup√ß√£o Ativa   Pedro Benedito Batista Junior Fernando Oikawa Perigo Para a vida ou Sa√∫de de Outrem, Crime Contra Humanidade   Carlos Jordy Luciano Hang Incita√ß√£o ao crime   Tercio Arnaud Tomaz Ot√°vio Fakhoury Incita√ß√£o ao crime   Teresa Cristina Reis de S√° Elcio Franco Improbidade Administrativa   Carla Zambelli Richards Pozzer Incita√ß√£o ao crime   Ricardo Barros Oswaldo Eust√°quio Incita√ß√£o ao crime   Luis Carlos Heinze Jair Bolsonaro Incita√ß√£o ao crime   Ricardo Barros Marcelo Bento Pires Advocacia Administrativa   Ricardo Barros Paulo Eneas Incita√ß√£o ao crime   Fl√°vio Bolsonaro Carlos Jordy Incita√ß√£o ao crime   Eduardo Parrillo Onyx Lorenzoni Crime Contra Humanidade   Tercio Arnaud Tomaz Onyx Lorenzoni Incita√ß√£o ao crime   Roberto Goidanich Bia Kicis Incita√ß√£o ao crime   Allan dos Santos Ricardo Barros Incita√ß√£o ao crime   Roberto Jefferson Carla Zambelli Incita√ß√£o ao crime   Ernesto Ara√∫jo Roberto Goidanich Incita√ß√£o ao crime   Carlos Bolsonaro Luis Carlos Heinze Incita√ß√£o ao crime   Ernesto Ara√∫jo Elcio Franco Epidemia com Resultado em Morte   Andreia da Silva Lima Francisco Emerson Maximiano Improbidade Administrativa   Teresa Cristina Reis de S√° Carlos Alberto de S√° Corrup√ß√£o Ativa, Improbidade Administrativa   Luciano Dias Arthur Weintraub Epidemia com Resultado em Morte   Fl√°vio Cadegiani Fernando Parrillo Crime Contra Humanidade   Oswaldo Eust√°quio Ernesto Ara√∫jo Incita√ß√£o ao crime   Filipe Martins Leandro Ruschel Incita√ß√£o ao crime   Eduardo Pazuello Nise Yamaguchi Epidemia com Resultado em Morte   Jos√© Ricardo Santana Roberto Dias Forma√ß√£o de Organiza√ß√£o Criminosa   Bernardo Kuster Fl√°vio Bolsonaro Incita√ß√£o ao crime   H√©lio Angotti Netto Oswaldo Eust√°quio Incita√ß√£o ao crime   Fernando Oikawa Onyx Lorenzoni Crime Contra Humanidade   H√©lio Angotti Netto Paulo Eneas Incita√ß√£o ao crime   Eduardo Pazuello Marcellus Jos√© Barroso Camp√™lo Prevarica√ß√£o   Carlos Jordy Allan dos Santos Incita√ß√£o ao crime   Nise Yamaguchi Marcelo Queiroga Epidemia com Resultado em Morte   Osmar Terra Bia Kicis Incita√ß√£o ao crime   Jair Bolsonaro F√°bio Wajngarten Prevarica√ß√£o   Ot√°vio Fakhoury Carlos Jordy Incita√ß√£o ao crime   Elcio Franco Mauro Luiz de Brito Ribeiro Epidemia com Resultado em Morte   Heitor Freire de Abreu Osmar Terra Epidemia com Resultado em Morte   Fl√°vio Adsuara Cadegiani Jair Bolsonaro Crime Contra Humanidade   Paolo Zanotto Heitor Freire de Abreu Epidemia com Resultado em Morte   Francisco Emerson Maximiano Andreia da Silva Lima Improbidade Administrativa   Carlos Bolsonaro Fl√°vio Bolsonaro Incita√ß√£o ao crime   Allan dos Santos Oswaldo Eust√°quio Incita√ß√£o ao crime   Eduardo Bolsonaro Luis Carlos Heinze Incita√ß√£o ao crime   Carlos Wizard Paolo Zanotto Epidemia com Resultado em Morte    function myFunction2() { var input, filter, table, tr, td, i, txtValue; input = document.getElementById(\"myInput2\"); filter = input.value.toUpperCase(); table = document.getElementById(\"myTable2\"); tr = table.getElementsByTagName(\"tr\"); for (i = 0; i -1) { tr[i].style.display = \"\"; } else { tr[i].style.display = \"none\"; } } } }    Acusados dentro de cada comunidade    * { box-sizing: border-box; } #myTable3 { border-collapse: collapse; width: 95%; max-height: 470px; overflow-x:auto; font-size: 18px; } #myTable3 th, #myTable3 td { text-align: left; margin: 0 auto; padding: 20px; } #myTable3 th, #myTable3 td { text-align: left; margin: 0 auto; padding: 20px; }    √çndice da comunidade Pessoas   1 Bernardo Kuster, Osmar Terra, Carlos Bolsonaro, Tercio Arnaud Tomaz, Fl√°vio Bolsonaro, Richards Pozzer, Onyx Lorenzoni, Leandro Ruschel, Filipe Martins, Roberto Goidanich, Ernesto Ara√∫jo, Ricardo Barros, Carlos Jordy, H√©lio Angotti Netto, Allan dos Santos, Luis Carlos Heinze, Luciano Hang, Oswaldo Eust√°quio, Carla Zambelli, Bia Kicis, Jair Bolsonaro, Ot√°vio Fakhoury, Roberto Jefferson, Paulo Eneas, Eduardo Bolsonaro, Carlos Wizard   2 Paolo Zanotto, Jos√© Alves Filho, Wagner Ros√°rio, Wilson Lima, Elcio Franco, Heitor Freire de Abreu, Eduardo Pazuello, Arthur Weintraub, Nise Yamaguchi, Luciano Dias, Mayra Pinheiro, Marcelo Queiroga, Braga Netto, Mauro Luiz de Brito Ribeiro, Marcellus Jos√© Barroso Camp√™lo   3 Jos√© Odilon Torres, Marcos Tolentino, T√∫lio Silveira, Francisco Emerson Maximiano, Raimundo Nonato Brasil, Luiz Paulo Dominghetti, Andreia da Silva Lima, Jos√© Ricardo Santana, Teresa Cristina Reis de S√°, Marconny Nunes Ribeiro, Roberto Dias, Rafael Francisco Carmo Alves, Cristiano Carvalho, Emanuela Medrades, Carlos Alberto de S√°, Marcelo Blanco, Danilo Trento   4 Eduardo Parrillo, Jo√£o Paulo F. Barros, Paola Werneck, Rodrigo Esper, Fernando Oikawa, Fl√°vio Cadegiani, Daniel Garrido Baena, Pedro Benedito Batista Junior, Fl√°vio Adsuara Cadegiani, Fernando Parrillo, Fernanda de Oliveira Igarashi, Carla Guerra   5 Thiago Fernandes da Costa, Marcelo Bento Pires, Regina C√©lia Oliveira, F√°bio Wajngarten, Alex Lial Marinho     Supostos crimes dentro de cada comunidade    * { box-sizing: border-box; } #myTable4 { border-collapse: collapse; width: 95%; max-height: 470px; overflow-x:auto; font-size: 18px; } #myTable4 th, #myTable4 td { text-align: left; margin: 0 auto; padding: 20px; } #myTable4 th, #myTable4 td { text-align: left; margin: 0 auto; padding: 20px; }    √çndice da comunidade Supostos crimes   1 Prevarica√ß√£o, Infra√ß√£o a Medidas Sanit√°rias Preventivas, Advocacia Administrativa, Improbidade Administrativa, Epidemia com Resultado em Morte, Incita√ß√£o ao crime, Falsifica√ß√£o de Documento Particular, Crime Contra Humanidade, Emprego Irregular de Verbas P√∫blicas, Charlatanismo, Crimes de Responsabilidade, Forma√ß√£o de Organiza√ß√£o Criminosa   2 Prevarica√ß√£o, Comunica√ß√£o Falsa de Crime, Improbidade Administrativa, Epidemia com Resultado em Morte, Crime Contra Humanidade, Emprego Irregular de Verbas P√∫blicas, Crimes de Responsabilidade   3 Corrup√ß√£o Ativa, Improbidade Administrativa, Uso de Documento Falso, Corrup√ß√£o Passiva, Fraude Processual, Falsidade Ideol√≥gica, Forma√ß√£o de Organiza√ß√£o Criminosa, Fraude em Contrato   4 Omiss√£o de Notifica√ß√£o de Doen√ßa, Perigo Para a vida ou Sa√∫de de Outrem, Falsidade Ideol√≥gica, Crime Contra Humanidade   5 Prevarica√ß√£o, Advocacia Administrativa       √â importante frisar que liga√ß√£o entre duas pessoas significa apenas que elas foram citadas em um mesmo crime. Portanto, n√£o afirmamos que, se existe liga√ß√£o entre duas pessoas, elas necessariamente possuem uma rela√ß√£o e/ou comunica√ß√£o direta.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n Do total de 78 nomes, tr√™s deles est√£o citados separadamente em tr√™s diferentes supostos crimes. Uma vez que esses v√©rtices s√£o isolados, n√£o os inclu√≠mos na rede e, portanto, o n√∫mero de v√©rtices se reduz a 75.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n O infomap √© bastante robusto pois busca encontrar comunidades por meio de caminhadas aleat√≥rias na rede. S√£o consideradas comunidades as regi√µes nas quais o caminhante aleat√≥rio tende a permanecer por um tempo maior do que o esperado.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n Por se tratar de um algoritmo n√£o supervisionado, o resultado de 5 m√≥dulos obtido via infomap deve ser encarado com ceticismo. Entretanto, uma breve an√°lise via maximiza√ß√£o de modularidade nos retornou um valor pr√≥ximo a esse, com m√©dia de 4 comunidades. Futuramente, podemos considerar outros algoritmos para tratar esse problema.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n Note que duas comunidades diferentes podem compartilhar um mesmo crime. Nada impede, por exemplo, que duas pessoas com os mesmos crimes atribu√≠dos estejam em comunidades diferentes.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n   ","date":1636329600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1636329600,"objectID":"1a0347050358a563272497dec4248172","permalink":"https://alvarofrancomartins.com/post/cpi_covid/","publishdate":"2021-11-08T00:00:00Z","relpermalink":"/post/cpi_covid/","section":"post","summary":"Entenda melhor a rede dos supostos crimes praticados durante a pandemia da COVID-19","tags":["Redes criminosas","CPI da Covid-19","COVID","Comiss√£o Parlamentar de Inqu√©rito"],"title":"Visualizando a CPI da COVID","type":"post"},{"authors":["Alvaro Franco Martins","Haroldo V. Ribeiro","Luiz G. A. Alves","Ervin K. Lenzi","Matjaz Perc"],"categories":null,"content":"","date":1516752000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1516752000,"objectID":"0e36dd8fa8e19bb42073e933b199cd02","permalink":"https://alvarofrancomartins.com/publication/brazilian-corruption-network/","publishdate":"2018-01-24T00:00:00Z","relpermalink":"/publication/brazilian-corruption-network/","section":"publication","summary":"Our research reveals that corruption runs in small groups that rarely comprise more than eight people, in networks that have hubs and a modular structure that encompasses more than one corruption scandal.","tags":["Corruption Networks"],"title":"The dynamical structure of political corruption networks","type":"publication"},{"authors":null,"categories":null,"content":"","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"f26b5133c34eec1aa0a09390a36c2ade","permalink":"https://alvarofrancomartins.com/admin/config.yml","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/admin/config.yml","section":"","summary":"","tags":null,"title":"","type":"wowchemycms"},{"authors":null,"categories":null,"content":"","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"c9b5771543b03b8149b612b630936a56","permalink":"https://alvarofrancomartins.com/experience/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/experience/","section":"","summary":"","tags":null,"title":"Experience","type":"widget_page"}]