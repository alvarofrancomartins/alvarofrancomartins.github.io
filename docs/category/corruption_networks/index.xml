<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>corruption_networks | Alvaro Franco Martins</title>
    <link>https://alvarofrancomartins.com/category/corruption_networks/</link>
      <atom:link href="https://alvarofrancomartins.com/category/corruption_networks/index.xml" rel="self" type="application/rss+xml" />
    <description>corruption_networks</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>en-us</language><lastBuildDate>Fri, 13 Aug 2021 00:00:00 +0000</lastBuildDate>
    <image>
      <url>https://alvarofrancomartins.com/media/sharing.png</url>
      <title>corruption_networks</title>
      <link>https://alvarofrancomartins.com/category/corruption_networks/</link>
    </image>
    
    <item>
      <title>Political corruption networks 1</title>
      <link>https://alvarofrancomartins.com/post/teste/</link>
      <pubDate>Fri, 13 Aug 2021 00:00:00 +0000</pubDate>
      <guid>https://alvarofrancomartins.com/post/teste/</guid>
      <description>&lt;h1 id=&#34;our-main-results&#34;&gt;Our main results&lt;/h1&gt;
&lt;p&gt;We have studied the corruption networks of Brazil and Spain. Here I present our main findings:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;The countries have distributions of people per scandal with approximately the same characteristic number ($\approx$ 7 people). It seems, therefore, that people usually act in small groups when involved in corruption processes.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The networks display small-world properties (high clustering coefficient and low average path length). However, corruption agents have tried to increase their distance as these networks have evolved. This result indicates an agreement with the so-called &lt;a href=&#34;https://www.jstor.org/stable/2095954&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;theory of secret societies&lt;/a&gt;, in which the evolution of illegal networks is assumed to maximize concealment.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The networks have degree distributions well described by exponential distributions. Moreover, their characteristic degrees have essentially the same evolving pattern.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The networks present modular structures and the number of modules grows linearly with the number of scandals.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The evolution of the networks are characterized by abrupt changes in the size of the largest connected component, which is due to the coalescence (or connection) of different network components. This process is caused by repeat offenders (i.e, individuals that are involved in at least two scandals).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The countries have number of repeat offenders that grows linearly with the total number of offenders. The recidivism rates (number of repeat offenders / total number of offenders) are 9% for Spain and 14,2% for Brazil, and stay the same throughout the entire network growth.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The repeat offenders are able to connect different parts of the network and function as brokers. In this sense, the recidivism rate plays an important role on the evolution, structure and dynamics of corruption networks. The difference in the network metrics (such as density and average path length) are then explained by the difference in the recidivism rates.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Last but not least, we have proposed a model to grow networks that model corruption networks taking into account two simple elements presented above: the linear recidivism pattern and the distribution of people per scandal.&lt;/p&gt;
&lt;p&gt;Our model have not only produced visually strikingly similar networks to the empirical ones, but were capable of describing all the evolving patterns (3, 4 and 5) discussed above.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Political corruption networks 1</title>
      <link>https://alvarofrancomartins.com/post/teste_2/</link>
      <pubDate>Fri, 13 Aug 2021 00:00:00 +0000</pubDate>
      <guid>https://alvarofrancomartins.com/post/teste_2/</guid>
      <description>&lt;h1 id=&#34;our-main-results&#34;&gt;Our main results&lt;/h1&gt;
&lt;p&gt;We have studied the corruption networks of Brazil and Spain. Here I present our main findings:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;The countries have distributions of people per scandal with approximately the same characteristic number ($\approx$ 7 people). It seems, therefore, that people usually act in small groups when involved in corruption processes.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The networks display small-world properties (high clustering coefficient and low average path length). However, corruption agents have tried to increase their distance as these networks have evolved. This result indicates an agreement with the so-called &lt;a href=&#34;https://www.jstor.org/stable/2095954&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;theory of secret societies&lt;/a&gt;, in which the evolution of illegal networks is assumed to maximize concealment.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The networks have degree distributions well described by exponential distributions. Moreover, their characteristic degrees have essentially the same evolving pattern.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The networks present modular structures and the number of modules grows linearly with the number of scandals.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The evolution of the networks are characterized by abrupt changes in the size of the largest connected component, which is due to the coalescence (or connection) of different network components. This process is caused by repeat offenders (i.e, individuals that are involved in at least two scandals).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The countries have number of repeat offenders that grows linearly with the total number of offenders. The recidivism rates (number of repeat offenders / total number of offenders) are 9% for Spain and 14,2% for Brazil, and stay the same throughout the entire network growth.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The repeat offenders are able to connect different parts of the network and function as brokers. In this sense, the recidivism rate plays an important role on the evolution, structure and dynamics of corruption networks. The difference in the network metrics (such as density and average path length) are then explained by the difference in the recidivism rates.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Last but not least, we have proposed a model to grow networks that model corruption networks taking into account two simple elements presented above: the linear recidivism pattern and the distribution of people per scandal.&lt;/p&gt;
&lt;p&gt;Our model have not only produced visually strikingly similar networks to the empirical ones, but were capable of describing all the evolving patterns (3, 4 and 5) discussed above.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Political corruption networks</title>
      <link>https://alvarofrancomartins.com/post/political_corruption_networks/</link>
      <pubDate>Tue, 13 Jul 2021 00:00:00 +0000</pubDate>
      <guid>https://alvarofrancomartins.com/post/political_corruption_networks/</guid>
      <description>&lt;h1 id=&#34;our-main-results&#34;&gt;Our main results&lt;/h1&gt;
&lt;p&gt;We have studied the corruption networks of Brazil and Spain. Here I present our main findings:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;The countries have distributions of people per scandal with approximately the same characteristic number ($\approx$ 7 people). It seems, therefore, that people usually act in small groups when involved in corruption processes.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The networks display small-world properties (high clustering coefficient and low average path length). However, corruption agents have tried to increase their distance as these networks have evolved. This result indicates an agreement with the so-called &lt;a href=&#34;https://www.jstor.org/stable/2095954&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;theory of secret societies&lt;/a&gt;, in which the evolution of illegal networks is assumed to maximize concealment.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The networks have degree distributions well described by exponential distributions. Moreover, their characteristic degrees have essentially the same evolving pattern.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The networks present modular structures and the number of modules grows linearly with the number of scandals.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The evolution of the networks are characterized by abrupt changes in the size of the largest connected component, which is due to the coalescence (or connection) of different network components. This process is caused by repeat offenders (i.e, individuals that are involved in at least two scandals).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The countries have number of repeat offenders that grows linearly with the total number of offenders. The recidivism rates (number of repeat offenders / total number of offenders) are 9% for Spain and 14,2% for Brazil, and stay the same throughout the entire network growth.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The repeat offenders are able to connect different parts of the network and function as brokers. In this sense, the recidivism rate plays an important role on the evolution, structure and dynamics of corruption networks. The difference in the network metrics (such as density and average path length) are then explained by the difference in the recidivism rates.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Last but not least, we have proposed a model to grow networks that model corruption networks taking into account two simple elements presented above: the linear recidivism pattern and the distribution of people per scandal.&lt;/p&gt;
&lt;p&gt;Our model have not only produced visually strikingly similar networks to the empirical ones, but were capable of describing all the evolving patterns (3, 4 and 5) discussed above.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>A computational model for political corruption networks</title>
      <link>https://alvarofrancomartins.com/post/model/</link>
      <pubDate>Sun, 13 Dec 2020 00:00:00 +0000</pubDate>
      <guid>https://alvarofrancomartins.com/post/model/</guid>
      <description>&lt;h1 id=&#34;the-model&#34;&gt;The model&lt;/h1&gt;
&lt;p&gt;$$r(n) = \alpha n + \beta$$&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$\alpha$: The recidivism rate, that is, number of repeat offenders / total offenders.&lt;/li&gt;
&lt;li&gt;$\beta$: The regression coefficient. It controls when the repeat offenders starts to appear in the network.&lt;/li&gt;
&lt;li&gt;$p_a$: Probability of repeat offenders to reoffend in more than two cases.&lt;/li&gt;
&lt;li&gt;$1/\lambda$: Characteristic number of people per corruption scandals (found to be $\approx 7$ people).&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;play-with-the-model&#34;&gt;Play with the model&lt;/h1&gt;
&lt;p&gt;Donec eget orci at felis auctor malesuada vel a ante. Aliquam dictum, tellus id pharetra varius, lacus elit auctor mi, ut consequat risus metus at neque. Praesent ut tortor quis magna eleifend pulvinar et sit amet libero. Interdum et malesuada fames ac ante ipsum primis in faucibus. Duis ut leo convallis, tristique risus nec, placerat mauris. Fusce urna orci, ullamcorper in metus sed, tincidunt efficitur tellus. Phasellus iaculis urna a orci pulvinar, at lacinia ligula cursus.&lt;/p&gt;

&lt;!DOCTYPE html&gt;
&lt;html lang=&#34;en&#34;&gt;

  &lt;head&gt;
    &lt;title&gt;Network Corruption Model&lt;/title&gt;

    &lt;style&gt;
      #mynetwork {
        display: inline-block;
        height: 620px;
        width: 100%;
        border: 1px solid #444444;
        background-color: #222222;
      }

      .input-group {
        width: 80%;
        padding:  0px;
      }

      .my_input {
        border: solid 1px #ccc;

        padding-left: 10px;

        border-radius: 5px;
        margin-bottom: 5px;

        }

      .btn-primary{
        font-size: 20px;
        margin-left: 10px;
        margin-bottom: 5px;
      }

      .btn-outline-primary{
        font-size: 20px;
        margin-left: 10px;
        margin-bottom: 5px;
      }

      .row {
        margin-left:2px;
      }
}

    &lt;/style&gt;

    &lt;script type=&#34;text/javascript&#34; src=&#34;https://unpkg.com/vis-network/standalone/umd/vis-network.min.js&#34;&gt;&lt;/script&gt;
    &lt;script src=&#34;https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js&#34;&gt;&lt;/script&gt;
  &lt;/head&gt;

  &lt;body&gt;
    &lt;div class=&#34;input-group&#34;&gt;
      &lt;label style=&#34;font-size:28px;padding-top:5px;&#34;&gt;$\alpha$ &amp;nbsp&lt;/label&gt;&lt;input class = &#34;my_input&#34; type=&#34;number&#34; name=&#34;recidivism_rate&#34; min=0 max=1 step=0.001 value=0.142 id=&#34;recidivism_rate&#34; /&gt;

      &lt;label style=&#34;font-size:28px;padding-top:5px;&#34;&gt;&amp;nbsp&amp;nbsp $\beta$ &amp;nbsp&lt;/label&gt;&lt;input class = &#34;my_input&#34; type=&#34;number&#34; name=&#34;beta_parameter&#34; min=-100 max=0 step=-1 value=-11 id=&#34;beta_parameter&#34; /&gt;

      &lt;div class=&#34;row&#34;&gt;
        &lt;button id=&#34;startNewNetwork&#34; class=&#34;btn btn-primary&#34; onclick=&#34;startNewNetwork();addCompleteGraph();enableAddGraph();&#34;&gt;Start new network&lt;/button&gt;
        &lt;button id=&#34;add_new_scandal&#34; class=&#34;btn btn-outline-primary&#34; onclick=&#34;addCompleteGraph();&#34; disabled&gt;Add new scandal&lt;/button&gt;
      &lt;/div&gt;

    &lt;/div&gt;

    &lt;div id=&#34;mynetwork&#34;&gt;&lt;/div&gt;

    &lt;script type=&#34;text/javascript&#34;&gt;
      var container = document.getElementById(&#34;mynetwork&#34;);

      proba = 0.024;
      lambda = 7.33;

      const options = {
        &#34;autoResize&#34;: true,
        &#34;height&#34;: &#39;100%&#39;,
        &#34;width&#34;: &#39;100%&#39;,
        &#34;physics&#34;: {
          &#34;enabled&#34;: true,
          &#34;forceAtlas2Based&#34;: {
            &#34;theta&#34;: 0.9,
            &#34;gravitationalConstant&#34;: -100,
            &#34;centralGravity&#34;: 0.01,
            &#34;springConstant&#34;: 0.08,
            &#34;springLength&#34;: 100,
            &#34;damping&#34;: 0.7,
            &#34;avoidOverlap&#34;: 0
          },
          &#34;maxVelocity&#34;: 50,
          &#34;minVelocity&#34;: 0.1,
          &#34;solver&#34;: &#39;forceAtlas2Based&#39;,
          &#34;stabilization&#34;: {
            &#34;enabled&#34;: false
          },
          &#34;timestep&#34;: 0.2,
          &#34;adaptiveTimestep&#34;: true,
        },
        &#34;edges&#34;: {
          &#34;smooth&#34;: false
        },
        &#34;nodes&#34;: {
          &#34;shape&#34;: &#34;dot&#34;,
          &#34;size&#34;: 10,
        },
        &#34;interaction&#34;: {
          &#34;dragNodes&#34;: false,
          &#34;dragView&#34;: true
        }
      }

      function startNewNetwork() {
        a = parseFloat(document.getElementById(&#34;recidivism_rate&#34;).value);
        b = parseFloat(document.getElementById(&#34;beta_parameter&#34;).value);

        last_agent_index = 0;
        total_repeated_agents = 0;

        repeated_agent_names = [];
        agent_names = [];

        nodes = new vis.DataSet();
        edges = new vis.DataSet();

        data = {
          nodes: nodes,
          edges: edges,
        };

        return network = new vis.Network(container, data, options);
      }

      function expoSampling(scale) {
        return Math.round(-scale * Math.log(1.0 - Math.random()));
      }

      function addCompleteGraph() {
        // calculate the size of the complete graph to enter the network
        var n_new_agents = expoSampling(lambda);

        while (n_new_agents &lt;= 1) {
          var n_new_agents = expoSampling(lambda);
        }

        // get index from new nodes
        var new_agent_names = [];
        for (let n = last_agent_index; n &lt; last_agent_index + n_new_agents; n++) {
          new_agent_names.push(n);
        }
        last_agent_index += n_new_agents;

        size_network = agent_names.length;

        // apply model
        var new_repeated_agents = Math.round(a * (size_network) + b - total_repeated_agents);

        if (new_repeated_agents &gt; 0) {

          var minimo = Math.min(new_repeated_agents, new_agent_names.length);

          for (let i = 0; i &lt; minimo; i++) {

            if ((Math.random() &lt;= proba) &amp;&amp; (repeated_agent_names.length &gt; 0)) {

              id_old = repeated_agent_names[Math.floor(Math.random() * repeated_agent_names.length)];

            } else {

              let difference = agent_names.filter(x =&gt; !repeated_agent_names.includes(x));

              id_old = difference[Math.floor(Math.random() * difference.length)];

              total_repeated_agents += 1;
            }

            new_agent_names[i] = id_old;
            repeated_agent_names.push(id_old);
          }
        }

        for (let i = 0; i &lt; new_agent_names.length; i++) {
          if (!agent_names.includes(new_agent_names[i])) {
            agent_names.push(new_agent_names[i])
          }
        }

        // add complete graph to the network
        for (let n = 0; n &lt; new_agent_names.length; n++) {
          nodes.update({
            id: new_agent_names[n]
          })
        }

        for (let i = 0; i &lt; new_agent_names.length; i++) {
          for (let j = i + 1; j &lt; new_agent_names.length; j++) {
            let i_ = new_agent_names[i];
            let j_ = new_agent_names[j];

            if (i_ != j_) {
              edges.update({
                from: i_,
                to: j_
              });
            }
          }
        }
        network.fit();
      }

      // button dynamics
      const numSeconds = 1
      document.querySelector(&#39;#add_new_scandal&#39;).addEventListener(&#39;click&#39;, (e) =&gt; {
        e.target.disabled = true
        setTimeout(() =&gt; {
          e.target.disabled = false
        }, numSeconds * 500)
      })

      function enableAddGraph() {
        document.getElementById(&#34;add_new_scandal&#34;).disabled = false;
      }

    &lt;/script&gt;

  &lt;/body&gt;

&lt;/html&gt;
&lt;h1 id=&#34;python-code&#34;&gt;Python code&lt;/h1&gt;
&lt;p&gt;First of all,&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;numpy&lt;/span&gt;          &lt;span class=&#34;k&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;np&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;graph_tool.all&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;gt&lt;/span&gt;

&lt;span class=&#34;kn&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;itertools&lt;/span&gt; &lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;combinations&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;a href=&#34;https://git.skewed.de/count0/graph-tool/wikis/installation-instructions&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;See graph-tool installation instructions.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Duis ut leo convallis, tristique risus nec, placerat mauris. Fusce urna orci, ullamcorper in metus sed, tincidunt efficitur tellus. Phasellus iaculis urna a orci pulvinar, at lacinia ligula cursus. Vivamus ullamcorper purus in mauris volutpat, ac aliquet risus molestie. Nulla a nisi laoreet, imperdiet augue id, dictum magna. Integer vel quam nec augue maximus elementum nec et ex.&lt;/p&gt;
&lt;details class=&#34;spoiler &#34;  id=&#34;spoiler-1&#34;&gt;
  &lt;summary&gt;Click to view the full algorithm&lt;/summary&gt;
  &lt;p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;generate_net_links&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tmax&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;100&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;lambda_&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;7.33&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.09&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;11.5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;proba&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.024&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;#34;&amp;#34;
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;    Generate a corruption network based on our model.
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;    
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;    Parameters
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;    ---------
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;    tmax : int
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;           Number of iteration steps (default: 100).
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;    lambda_ : float
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;           Characteristic number of people per scandal (default: 7.33).
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;    a, b : float
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;           Parameters defining the number of repeated agents (nr) as a function
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;           of total number of agents (n): nr = a*n + b (default: 0.09, -11.5).
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;    proba : float
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;            Probability of selecting a repeated agent that was already involved in
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;            another scandal (default: 0.024091841863485983).
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;    Returns
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;    -------
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;    links_list : list
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;                 A list of edge lists where each element correspond to
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;                 a particular iteration step.
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;    &amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
    
    &lt;span class=&#34;n&#34;&gt;t&lt;/span&gt;                          &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;links&lt;/span&gt;                      &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;links_list&lt;/span&gt;                 &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;agent_names&lt;/span&gt;                &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;set&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;last_agent_index&lt;/span&gt;           &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;repeated_agent_names&lt;/span&gt;       &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;set&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;total_repeated_agents&lt;/span&gt;      &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
    
    &lt;span class=&#34;k&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tmax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;n_new_agents&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;np&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;round&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;np&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;random&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;exponential&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;lambda_&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;
            
        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;n_new_agents&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
        
            &lt;span class=&#34;n&#34;&gt;new_agent_names&lt;/span&gt;     &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;np&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;arange&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;last_agent_index&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;last_agent_index&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;n_new_agents&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)]&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;last_agent_index&lt;/span&gt;   &lt;span class=&#34;o&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;n_new_agents&lt;/span&gt;
            
            &lt;span class=&#34;n&#34;&gt;new_repeated_agents&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;np&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;round&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;agent_names&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;total_repeated_agents&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;
            
            &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;new_repeated_agents&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
                &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;range&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;min&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;new_repeated_agents&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;new_agent_names&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))):&lt;/span&gt;

                    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;np&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;random&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;uniform&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;proba&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;repeated_agent_names&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
                        &lt;span class=&#34;c1&#34;&gt;#select from repeated_agent_names&lt;/span&gt;
                        &lt;span class=&#34;n&#34;&gt;repeated_agent&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;np&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;random&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;choice&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;repeated_agent_names&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
                    &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
                        &lt;span class=&#34;c1&#34;&gt;#select from agent_names&lt;/span&gt;
                        &lt;span class=&#34;n&#34;&gt;repeated_agent&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;np&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;random&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;choice&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;repeated_agent_names&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;^&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;agent_names&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
                        &lt;span class=&#34;n&#34;&gt;total_repeated_agents&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;

                    &lt;span class=&#34;n&#34;&gt;new_agent_names&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;repeated_agent&lt;/span&gt;
                    &lt;span class=&#34;n&#34;&gt;repeated_agent_names&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;add&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;repeated_agent&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
                    
            &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;agent_&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;new_agent_names&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
                &lt;span class=&#34;n&#34;&gt;agent_names&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;add&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;agent_&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
            
            &lt;span class=&#34;n&#34;&gt;new_links&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;combinations&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;new_agent_names&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
            
            &lt;span class=&#34;n&#34;&gt;links_list&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;new_links&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;t&lt;/span&gt;          &lt;span class=&#34;o&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;

    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;links_list&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;
&lt;/details&gt;
&lt;p&gt;Donec eleifend turpis sit amet magna faucibus egestas. Duis nulla mi, venenatis in lacinia vitae, volutpat maximus enim.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;&lt;span class=&#34;n&#34;&gt;edge_lists&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;generate_net_links&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tmax&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;100&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.09&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Vivamus ullamcorper purus in mauris volutpat, ac aliquet risus molestie. Nulla a nisi laoreet, imperdiet augue id, dictum magna. Integer vel quam nec augue maximus elementum nec et ex. Nunc id lobortis nunc. Morbi aliquam nec arcu sed iaculis. Maecenas vitae varius mi, in imperdiet lacus.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;network&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;edges_list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;g&lt;/span&gt;           &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;gt&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Graph&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;directed&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;False&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;edge_list_i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;np&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;concatenate&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;edges_list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt;
    
    &lt;span class=&#34;n&#34;&gt;g&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;add_edge_list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;edge_list_i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;hashed&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;True&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    
    &lt;span class=&#34;n&#34;&gt;gt&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;remove_self_loops&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;g&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;gt&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;remove_parallel_edges&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;g&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;g&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Finally, generate the network until $i$ steps&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;&lt;span class=&#34;n&#34;&gt;rede_final&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;network&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;100&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;edge_lists&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;rede_final&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Returning the following network&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;&amp;lt;Graph object, undirected, with 767 vertices and 4805 edges, at 0x7f2789007d60&amp;gt;&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
  </channel>
</rss>
