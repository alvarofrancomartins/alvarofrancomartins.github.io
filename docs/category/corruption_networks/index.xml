<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>corruption_networks | Alvaro Franco Martins</title>
    <link>https://alvarofrancomartins.com/category/corruption_networks/</link>
      <atom:link href="https://alvarofrancomartins.com/category/corruption_networks/index.xml" rel="self" type="application/rss+xml" />
    <description>corruption_networks</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>en-us</language><lastBuildDate>Sun, 13 Dec 2020 00:00:00 +0000</lastBuildDate>
    <image>
      <url>https://alvarofrancomartins.com/media/icon_hu2554c39cea7f7ac56f2127a9008220c1_75996_512x512_fill_lanczos_center_3.png</url>
      <title>corruption_networks</title>
      <link>https://alvarofrancomartins.com/category/corruption_networks/</link>
    </image>
    
    <item>
      <title>A computational model for political corruption networks</title>
      <link>https://alvarofrancomartins.com/post/model/</link>
      <pubDate>Sun, 13 Dec 2020 00:00:00 +0000</pubDate>
      <guid>https://alvarofrancomartins.com/post/model/</guid>
      <description>&lt;h1 id=&#34;play-with-the-model&#34;&gt;Play with the model&lt;/h1&gt;
&lt;p&gt;Donec eget orci at felis auctor malesuada vel a ante. Aliquam dictum, tellus id pharetra varius, lacus elit auctor mi, ut consequat risus metus at neque. Praesent ut tortor quis magna eleifend pulvinar et sit amet libero. Interdum et malesuada fames ac ante ipsum primis in faucibus. Duis ut leo convallis, tristique risus nec, placerat mauris. Fusce urna orci, ullamcorper in metus sed, tincidunt efficitur tellus. Phasellus iaculis urna a orci pulvinar, at lacinia ligula cursus.&lt;/p&gt;

&lt;!DOCTYPE html&gt;
&lt;html lang=&#34;en&#34;&gt;

  &lt;head&gt;
    &lt;title&gt;Network Corruption Model&lt;/title&gt;

    &lt;style&gt;
      #mynetwork {
        display: inline-block;
        height: 620px;
        width: 100%;
        border: 1px solid #444444;
        background-color: #222222;
      }

      .input-group {
        width: 70%;
        padding:  0px;
      }

      .btn-primary{
        font-size: 16px;
        margin: 1px 3px;
      }

      .btn-outline-primary{
        font-size: 16px;
        margin: 1px 1px;
      }

}

    &lt;/style&gt;

    &lt;script type=&#34;text/javascript&#34; src=&#34;https://unpkg.com/vis-network/standalone/umd/vis-network.min.js&#34;&gt;&lt;/script&gt;
    &lt;script src=&#34;https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js&#34;&gt;&lt;/script&gt;
  &lt;/head&gt;

  &lt;body&gt;
    &lt;div class=&#34;input-group&#34;&gt;

      &lt;label style=&#34;font-size:28px;&#34;&gt;$\alpha$ &amp;nbsp&lt;/label&gt;&lt;input style=&#34;height:100%; padding:15px;&#34; type=&#34;number&#34; name=&#34;recidivism_rate&#34; min=0 max=1 step=0.001 value=0.142 id=&#34;recidivism_rate&#34; class=&#34;form-control&#34; /&gt;

      &lt;label style=&#34;font-size:28px;&#34;&gt;&amp;nbsp&amp;nbsp $\beta$ &amp;nbsp&lt;/label&gt;&lt;input style=&#34;height:100%; padding:15px;&#34; type=&#34;number&#34; name=&#34;beta_parameter&#34; min=-100 max=0 step=-1 value=-11 id=&#34;beta_parameter&#34; class=&#34;form-control&#34; /&gt;

      &lt;button id=&#34;startNewNetwork&#34; class=&#34;btn btn-primary&#34; onclick=&#34;startNewNetwork();addCompleteGraph();enableAddGraph();&#34;&gt;Start new network&lt;/button&gt;
      &lt;button id=&#34;add_new_scandal&#34; class=&#34;btn btn-outline-primary&#34; onclick=&#34;addCompleteGraph();&#34; disabled&gt;Add new scandal&lt;/button&gt;
    &lt;/div&gt;

    &lt;div id=&#34;mynetwork&#34;&gt;&lt;/div&gt;

    &lt;script type=&#34;text/javascript&#34;&gt;
      var container = document.getElementById(&#34;mynetwork&#34;);

      proba = 0.024;
      lambda = 7.33;

      const options = {
        &#34;autoResize&#34;: true,
        &#34;height&#34;: &#39;100%&#39;,
        &#34;width&#34;: &#39;100%&#39;,
        &#34;physics&#34;: {
          &#34;enabled&#34;: true,
          &#34;forceAtlas2Based&#34;: {
            &#34;theta&#34;: 0.9,
            &#34;gravitationalConstant&#34;: -100,
            &#34;centralGravity&#34;: 0.01,
            &#34;springConstant&#34;: 0.08,
            &#34;springLength&#34;: 100,
            &#34;damping&#34;: 0.7,
            &#34;avoidOverlap&#34;: 0
          },
          &#34;maxVelocity&#34;: 50,
          &#34;minVelocity&#34;: 0.1,
          &#34;solver&#34;: &#39;forceAtlas2Based&#39;,
          &#34;stabilization&#34;: {
            &#34;enabled&#34;: false
          },
          &#34;timestep&#34;: 0.2,
          &#34;adaptiveTimestep&#34;: true,
        },
        &#34;edges&#34;: {
          &#34;smooth&#34;: false
        },
        &#34;nodes&#34;: {
          &#34;shape&#34;: &#34;dot&#34;,
          &#34;size&#34;: 10,
        },
        &#34;interaction&#34;: {
          &#34;dragNodes&#34;: false,
          &#34;dragView&#34;: true
        }
      }

      function startNewNetwork() {
        a = parseFloat(document.getElementById(&#34;recidivism_rate&#34;).value);
        b = parseFloat(document.getElementById(&#34;beta_parameter&#34;).value);

        last_agent_index = 0;
        total_repeated_agents = 0;

        repeated_agent_names = [];
        agent_names = [];

        nodes = new vis.DataSet();
        edges = new vis.DataSet();

        data = {
          nodes: nodes,
          edges: edges,
        };

        return network = new vis.Network(container, data, options);
      }

      function expoSampling(scale) {
        return Math.round(-scale * Math.log(1.0 - Math.random()));
      }

      function addCompleteGraph() {
        // calculate the size of the complete graph to enter the network
        var n_new_agents = expoSampling(lambda);

        while (n_new_agents &lt;= 1) {
          var n_new_agents = expoSampling(lambda);
        }

        // get index from new nodes
        var new_agent_names = [];
        for (let n = last_agent_index; n &lt; last_agent_index + n_new_agents; n++) {
          new_agent_names.push(n);
        }
        last_agent_index += n_new_agents;

        size_network = agent_names.length;

        // apply model
        var new_repeated_agents = Math.round(a * (size_network) + b - total_repeated_agents);

        if (new_repeated_agents &gt; 0) {

          var minimo = Math.min(new_repeated_agents, new_agent_names.length);

          for (let i = 0; i &lt; minimo; i++) {

            if ((Math.random() &lt;= proba) &amp;&amp; (repeated_agent_names.length &gt; 0)) {

              id_old = repeated_agent_names[Math.floor(Math.random() * repeated_agent_names.length)];

            } else {

              let difference = agent_names.filter(x =&gt; !repeated_agent_names.includes(x));

              id_old = difference[Math.floor(Math.random() * difference.length)];

              total_repeated_agents += 1;
            }

            new_agent_names[i] = id_old;
            repeated_agent_names.push(id_old);
          }
        }

        for (let i = 0; i &lt; new_agent_names.length; i++) {
          if (!agent_names.includes(new_agent_names[i])) {
            agent_names.push(new_agent_names[i])
          }
        }

        // add complete graph to the network
        for (let n = 0; n &lt; new_agent_names.length; n++) {
          nodes.update({
            id: new_agent_names[n]
          })
        }

        for (let i = 0; i &lt; new_agent_names.length; i++) {
          for (let j = i + 1; j &lt; new_agent_names.length; j++) {
            let i_ = new_agent_names[i];
            let j_ = new_agent_names[j];

            if (i_ != j_) {
              edges.update({
                from: i_,
                to: j_
              });
            }
          }
        }
        network.fit();
      }

      // button dynamics
      const numSeconds = 1
      document.querySelector(&#39;#add_new_scandal&#39;).addEventListener(&#39;click&#39;, (e) =&gt; {
        e.target.disabled = true
        setTimeout(() =&gt; {
          e.target.disabled = false
        }, numSeconds * 500)
      })

      function enableAddGraph() {
        document.getElementById(&#34;add_new_scandal&#34;).disabled = false;
      }

    &lt;/script&gt;

  &lt;/body&gt;

&lt;/html&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;generate_net_incremental&lt;/span&gt;(tmax &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;, lambda_ &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;7.33&lt;/span&gt;, a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0.09&lt;/span&gt;, b &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;11.5&lt;/span&gt;, proba &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0.024&lt;/span&gt;):
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    Generate a corruption network based on our model.
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    Parameters
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    ---------
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    tmax : int
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;           Number iteration steps (default: 100).
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    lambda_ : float
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;           Characteristic number of people per scandal.
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    a, b : int
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;           Parameters defining the number of repeated agents (nr) as a function
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;           of total number of agents (n): nr = a*n + b (default: 0.09, -11.5).
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    proba : float
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;            Probabilty selecting a repeated agent that was already involved in
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;            another scandal (default: 0.024091841863485983).
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    Returns
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    -------
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    links_list : list of ndarrays
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;                 A list of ndarrays where each element is ndarray with the edge
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;                 list at a particular iteration step.
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    &amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;

    t                          &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
    links                      &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
    links_list                 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
    agent_names                &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; set()
    last_agent_index           &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
    repeated_agent_names       &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; set()
    total_repeated_agents      &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; t &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; tmax:
        n_new_agents &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; int(np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;round(np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;random&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;exponential(lambda_)))

        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; n_new_agents &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:

            new_agent_names     &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [x &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;arange(last_agent_index, last_agent_index &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; n_new_agents)]
            last_agent_index   &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; n_new_agents

            new_repeated_agents &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; int(np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;round((a&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(len(agent_names)) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; b &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; total_repeated_agents)))

            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; new_repeated_agents &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:
                &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(min(new_repeated_agents, len(new_agent_names))):

                    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;random&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;uniform() &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; proba) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; (len(repeated_agent_names) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;):
                        &lt;span style=&#34;color:#75715e&#34;&gt;#select from repeated_agent_names&lt;/span&gt;
                        repeated_agent &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;random&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;choice(list(repeated_agent_names))
                    &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
                        &lt;span style=&#34;color:#75715e&#34;&gt;#select from agent_names&lt;/span&gt;
                        repeated_agent &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;random&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;choice(list(repeated_agent_names&lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt;agent_names))
                        total_repeated_agents &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;

                    new_agent_names[i] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; repeated_agent
                    repeated_agent_names&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add(repeated_agent)

            &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; agent_ &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; new_agent_names:
                agent_names&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add(agent_)
            
            new_links &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;asarray(list(combinations(new_agent_names, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)))&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;tolist()

            links      &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; new_links
            links_list &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; [np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;asarray(links)]
            t          &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
            
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; links_list
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
  </channel>
</rss>
